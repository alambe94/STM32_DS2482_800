
STM32_DS2484_800.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001018  08005f68  08005f68  00015f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f88  08006f88  00016f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08006f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004fc  2000067c  0800760c  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b78  0800760c  00020b78  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012e36  00000000  00000000  000206a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000294e  00000000  00000000  000334db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000052c7  00000000  00000000  00035e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000770  00000000  00000000  0003b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b70  00000000  00000000  0003b860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000546c  00000000  00000000  0003c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002d3c  00000000  00000000  0004183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00044578  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f44  00000000  00000000  000445f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000067c 	.word	0x2000067c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f50 	.word	0x08005f50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000680 	.word	0x20000680
 800014c:	08005f50 	.word	0x08005f50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_frsub>:
 8000a80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a84:	e002      	b.n	8000a8c <__addsf3>
 8000a86:	bf00      	nop

08000a88 <__aeabi_fsub>:
 8000a88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a8c <__addsf3>:
 8000a8c:	0042      	lsls	r2, r0, #1
 8000a8e:	bf1f      	itttt	ne
 8000a90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a94:	ea92 0f03 	teqne	r2, r3
 8000a98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa0:	d06a      	beq.n	8000b78 <__addsf3+0xec>
 8000aa2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aaa:	bfc1      	itttt	gt
 8000aac:	18d2      	addgt	r2, r2, r3
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	4048      	eorgt	r0, r1
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	bfb8      	it	lt
 8000ab6:	425b      	neglt	r3, r3
 8000ab8:	2b19      	cmp	r3, #25
 8000aba:	bf88      	it	hi
 8000abc:	4770      	bxhi	lr
 8000abe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ad6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4249      	negne	r1, r1
 8000ade:	ea92 0f03 	teq	r2, r3
 8000ae2:	d03f      	beq.n	8000b64 <__addsf3+0xd8>
 8000ae4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae8:	fa41 fc03 	asr.w	ip, r1, r3
 8000aec:	eb10 000c 	adds.w	r0, r0, ip
 8000af0:	f1c3 0320 	rsb	r3, r3, #32
 8000af4:	fa01 f103 	lsl.w	r1, r1, r3
 8000af8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__addsf3+0x78>
 8000afe:	4249      	negs	r1, r1
 8000b00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b08:	d313      	bcc.n	8000b32 <__addsf3+0xa6>
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d306      	bcc.n	8000b1e <__addsf3+0x92>
 8000b10:	0840      	lsrs	r0, r0, #1
 8000b12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b16:	f102 0201 	add.w	r2, r2, #1
 8000b1a:	2afe      	cmp	r2, #254	; 0xfe
 8000b1c:	d251      	bcs.n	8000bc2 <__addsf3+0x136>
 8000b1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	ea40 0003 	orr.w	r0, r0, r3
 8000b30:	4770      	bx	lr
 8000b32:	0049      	lsls	r1, r1, #1
 8000b34:	eb40 0000 	adc.w	r0, r0, r0
 8000b38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	d1ed      	bne.n	8000b1e <__addsf3+0x92>
 8000b42:	fab0 fc80 	clz	ip, r0
 8000b46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b52:	bfaa      	itet	ge
 8000b54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b58:	4252      	neglt	r2, r2
 8000b5a:	4318      	orrge	r0, r3
 8000b5c:	bfbc      	itt	lt
 8000b5e:	40d0      	lsrlt	r0, r2
 8000b60:	4318      	orrlt	r0, r3
 8000b62:	4770      	bx	lr
 8000b64:	f092 0f00 	teq	r2, #0
 8000b68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b6c:	bf06      	itte	eq
 8000b6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b72:	3201      	addeq	r2, #1
 8000b74:	3b01      	subne	r3, #1
 8000b76:	e7b5      	b.n	8000ae4 <__addsf3+0x58>
 8000b78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	bf18      	it	ne
 8000b82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b86:	d021      	beq.n	8000bcc <__addsf3+0x140>
 8000b88:	ea92 0f03 	teq	r2, r3
 8000b8c:	d004      	beq.n	8000b98 <__addsf3+0x10c>
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	bf08      	it	eq
 8000b94:	4608      	moveq	r0, r1
 8000b96:	4770      	bx	lr
 8000b98:	ea90 0f01 	teq	r0, r1
 8000b9c:	bf1c      	itt	ne
 8000b9e:	2000      	movne	r0, #0
 8000ba0:	4770      	bxne	lr
 8000ba2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ba6:	d104      	bne.n	8000bb2 <__addsf3+0x126>
 8000ba8:	0040      	lsls	r0, r0, #1
 8000baa:	bf28      	it	cs
 8000bac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	4770      	bx	lr
 8000bb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bb6:	bf3c      	itt	cc
 8000bb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bxcc	lr
 8000bbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd0:	bf16      	itet	ne
 8000bd2:	4608      	movne	r0, r1
 8000bd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd8:	4601      	movne	r1, r0
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	bf06      	itte	eq
 8000bde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be2:	ea90 0f01 	teqeq	r0, r1
 8000be6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ui2f>:
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e004      	b.n	8000bfc <__aeabi_i2f+0x8>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_i2f>:
 8000bf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	bf48      	it	mi
 8000bfa:	4240      	negmi	r0, r0
 8000bfc:	ea5f 0c00 	movs.w	ip, r0
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c08:	4601      	mov	r1, r0
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	e01c      	b.n	8000c4a <__aeabi_l2f+0x2a>

08000c10 <__aeabi_ul2f>:
 8000c10:	ea50 0201 	orrs.w	r2, r0, r1
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e00a      	b.n	8000c34 <__aeabi_l2f+0x14>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_l2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__aeabi_l2f+0x14>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	ea5f 0c01 	movs.w	ip, r1
 8000c38:	bf02      	ittt	eq
 8000c3a:	4684      	moveq	ip, r0
 8000c3c:	4601      	moveq	r1, r0
 8000c3e:	2000      	moveq	r0, #0
 8000c40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c44:	bf08      	it	eq
 8000c46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c4e:	fabc f28c 	clz	r2, ip
 8000c52:	3a08      	subs	r2, #8
 8000c54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c58:	db10      	blt.n	8000c7c <__aeabi_l2f+0x5c>
 8000c5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5e:	4463      	add	r3, ip
 8000c60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c64:	f1c2 0220 	rsb	r2, r2, #32
 8000c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	eb43 0002 	adc.w	r0, r3, r2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f102 0220 	add.w	r2, r2, #32
 8000c80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c84:	f1c2 0220 	rsb	r2, r2, #32
 8000c88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c90:	eb43 0002 	adc.w	r0, r3, r2
 8000c94:	bf08      	it	eq
 8000c96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_fmul>:
 8000c9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000caa:	ea92 0f0c 	teqne	r2, ip
 8000cae:	ea93 0f0c 	teqne	r3, ip
 8000cb2:	d06f      	beq.n	8000d94 <__aeabi_fmul+0xf8>
 8000cb4:	441a      	add	r2, r3
 8000cb6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cba:	0240      	lsls	r0, r0, #9
 8000cbc:	bf18      	it	ne
 8000cbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc2:	d01e      	beq.n	8000d02 <__aeabi_fmul+0x66>
 8000cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ccc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cdc:	bf3e      	ittt	cc
 8000cde:	0049      	lslcc	r1, r1, #1
 8000ce0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce4:	005b      	lslcc	r3, r3, #1
 8000ce6:	ea40 0001 	orr.w	r0, r0, r1
 8000cea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cee:	2afd      	cmp	r2, #253	; 0xfd
 8000cf0:	d81d      	bhi.n	8000d2e <__aeabi_fmul+0x92>
 8000cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	4770      	bx	lr
 8000d02:	f090 0f00 	teq	r0, #0
 8000d06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0a:	bf08      	it	eq
 8000d0c:	0249      	lsleq	r1, r1, #9
 8000d0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d16:	3a7f      	subs	r2, #127	; 0x7f
 8000d18:	bfc2      	ittt	gt
 8000d1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d22:	4770      	bxgt	lr
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	dc5d      	bgt.n	8000dec <__aeabi_fmul+0x150>
 8000d30:	f112 0f19 	cmn.w	r2, #25
 8000d34:	bfdc      	itt	le
 8000d36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3a:	4770      	bxle	lr
 8000d3c:	f1c2 0200 	rsb	r2, r2, #0
 8000d40:	0041      	lsls	r1, r0, #1
 8000d42:	fa21 f102 	lsr.w	r1, r1, r2
 8000d46:	f1c2 0220 	rsb	r2, r2, #32
 8000d4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d52:	f140 0000 	adc.w	r0, r0, #0
 8000d56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5a:	bf08      	it	eq
 8000d5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d60:	4770      	bx	lr
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0040      	lsleq	r0, r0, #1
 8000d6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d72:	3a01      	subeq	r2, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xce>
 8000d76:	ea40 000c 	orr.w	r0, r0, ip
 8000d7a:	f093 0f00 	teq	r3, #0
 8000d7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0049      	lsleq	r1, r1, #1
 8000d86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8a:	3b01      	subeq	r3, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fmul+0xe6>
 8000d8e:	ea41 010c 	orr.w	r1, r1, ip
 8000d92:	e78f      	b.n	8000cb4 <__aeabi_fmul+0x18>
 8000d94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d98:	ea92 0f0c 	teq	r2, ip
 8000d9c:	bf18      	it	ne
 8000d9e:	ea93 0f0c 	teqne	r3, ip
 8000da2:	d00a      	beq.n	8000dba <__aeabi_fmul+0x11e>
 8000da4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da8:	bf18      	it	ne
 8000daa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	d1d8      	bne.n	8000d62 <__aeabi_fmul+0xc6>
 8000db0:	ea80 0001 	eor.w	r0, r0, r1
 8000db4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	bf17      	itett	ne
 8000dc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc4:	4608      	moveq	r0, r1
 8000dc6:	f091 0f00 	teqne	r1, #0
 8000dca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dce:	d014      	beq.n	8000dfa <__aeabi_fmul+0x15e>
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d101      	bne.n	8000dda <__aeabi_fmul+0x13e>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	d10f      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000dda:	ea93 0f0c 	teq	r3, ip
 8000dde:	d103      	bne.n	8000de8 <__aeabi_fmul+0x14c>
 8000de0:	024b      	lsls	r3, r1, #9
 8000de2:	bf18      	it	ne
 8000de4:	4608      	movne	r0, r1
 8000de6:	d108      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	4770      	bx	lr
 8000dfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fdiv>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d069      	beq.n	8000ef0 <__aeabi_fdiv+0xec>
 8000e1c:	eba2 0203 	sub.w	r2, r2, r3
 8000e20:	ea80 0c01 	eor.w	ip, r0, r1
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2a:	d037      	beq.n	8000e9c <__aeabi_fdiv+0x98>
 8000e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	bf38      	it	cc
 8000e40:	005b      	lslcc	r3, r3, #1
 8000e42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	bf24      	itt	cs
 8000e4e:	1a5b      	subcs	r3, r3, r1
 8000e50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e66:	bf24      	itt	cs
 8000e68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	bf18      	it	ne
 8000e82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e86:	d1e0      	bne.n	8000e4a <__aeabi_fdiv+0x46>
 8000e88:	2afd      	cmp	r2, #253	; 0xfd
 8000e8a:	f63f af50 	bhi.w	8000d2e <__aeabi_fmul+0x92>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e94:	bf08      	it	eq
 8000e96:	f020 0001 	biceq.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea4:	327f      	adds	r2, #127	; 0x7f
 8000ea6:	bfc2      	ittt	gt
 8000ea8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb0:	4770      	bxgt	lr
 8000eb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	3a01      	subs	r2, #1
 8000ebc:	e737      	b.n	8000d2e <__aeabi_fmul+0x92>
 8000ebe:	f092 0f00 	teq	r2, #0
 8000ec2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0040      	lsleq	r0, r0, #1
 8000eca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ece:	3a01      	subeq	r2, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xc2>
 8000ed2:	ea40 000c 	orr.w	r0, r0, ip
 8000ed6:	f093 0f00 	teq	r3, #0
 8000eda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0049      	lsleq	r1, r1, #1
 8000ee2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ee6:	3b01      	subeq	r3, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fdiv+0xda>
 8000eea:	ea41 010c 	orr.w	r1, r1, ip
 8000eee:	e795      	b.n	8000e1c <__aeabi_fdiv+0x18>
 8000ef0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef4:	ea92 0f0c 	teq	r2, ip
 8000ef8:	d108      	bne.n	8000f0c <__aeabi_fdiv+0x108>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	f47f af7d 	bne.w	8000dfa <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	f47f af70 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e776      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	d104      	bne.n	8000f1c <__aeabi_fdiv+0x118>
 8000f12:	024b      	lsls	r3, r1, #9
 8000f14:	f43f af4c 	beq.w	8000db0 <__aeabi_fmul+0x114>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e76e      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1ca      	bne.n	8000ebe <__aeabi_fdiv+0xba>
 8000f28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f2c:	f47f af5c 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f34:	f47f af3c 	bne.w	8000db0 <__aeabi_fmul+0x114>
 8000f38:	e75f      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_uldivmod>:
 8000f3c:	b953      	cbnz	r3, 8000f54 <__aeabi_uldivmod+0x18>
 8000f3e:	b94a      	cbnz	r2, 8000f54 <__aeabi_uldivmod+0x18>
 8000f40:	2900      	cmp	r1, #0
 8000f42:	bf08      	it	eq
 8000f44:	2800      	cmpeq	r0, #0
 8000f46:	bf1c      	itt	ne
 8000f48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f50:	f000 b97a 	b.w	8001248 <__aeabi_idiv0>
 8000f54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f5c:	f000 f806 	bl	8000f6c <__udivmoddi4>
 8000f60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f68:	b004      	add	sp, #16
 8000f6a:	4770      	bx	lr

08000f6c <__udivmoddi4>:
 8000f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	468c      	mov	ip, r1
 8000f72:	460e      	mov	r6, r1
 8000f74:	4604      	mov	r4, r0
 8000f76:	9d08      	ldr	r5, [sp, #32]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d150      	bne.n	800101e <__udivmoddi4+0xb2>
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	4617      	mov	r7, r2
 8000f80:	d96c      	bls.n	800105c <__udivmoddi4+0xf0>
 8000f82:	fab2 fe82 	clz	lr, r2
 8000f86:	f1be 0f00 	cmp.w	lr, #0
 8000f8a:	d00b      	beq.n	8000fa4 <__udivmoddi4+0x38>
 8000f8c:	f1ce 0c20 	rsb	ip, lr, #32
 8000f90:	fa01 f60e 	lsl.w	r6, r1, lr
 8000f94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000f98:	fa02 f70e 	lsl.w	r7, r2, lr
 8000f9c:	ea4c 0c06 	orr.w	ip, ip, r6
 8000fa0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000fa4:	0c3a      	lsrs	r2, r7, #16
 8000fa6:	fbbc f9f2 	udiv	r9, ip, r2
 8000faa:	b2bb      	uxth	r3, r7
 8000fac:	fb02 cc19 	mls	ip, r2, r9, ip
 8000fb0:	fb09 fa03 	mul.w	sl, r9, r3
 8000fb4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000fb8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000fbc:	45b2      	cmp	sl, r6
 8000fbe:	d90a      	bls.n	8000fd6 <__udivmoddi4+0x6a>
 8000fc0:	19f6      	adds	r6, r6, r7
 8000fc2:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8000fc6:	f080 8125 	bcs.w	8001214 <__udivmoddi4+0x2a8>
 8000fca:	45b2      	cmp	sl, r6
 8000fcc:	f240 8122 	bls.w	8001214 <__udivmoddi4+0x2a8>
 8000fd0:	f1a9 0902 	sub.w	r9, r9, #2
 8000fd4:	443e      	add	r6, r7
 8000fd6:	eba6 060a 	sub.w	r6, r6, sl
 8000fda:	fbb6 f0f2 	udiv	r0, r6, r2
 8000fde:	fb02 6610 	mls	r6, r2, r0, r6
 8000fe2:	fb00 f303 	mul.w	r3, r0, r3
 8000fe6:	b2a4      	uxth	r4, r4
 8000fe8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000fec:	42a3      	cmp	r3, r4
 8000fee:	d909      	bls.n	8001004 <__udivmoddi4+0x98>
 8000ff0:	19e4      	adds	r4, r4, r7
 8000ff2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ff6:	f080 810b 	bcs.w	8001210 <__udivmoddi4+0x2a4>
 8000ffa:	42a3      	cmp	r3, r4
 8000ffc:	f240 8108 	bls.w	8001210 <__udivmoddi4+0x2a4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	2100      	movs	r1, #0
 8001006:	1ae4      	subs	r4, r4, r3
 8001008:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800100c:	2d00      	cmp	r5, #0
 800100e:	d062      	beq.n	80010d6 <__udivmoddi4+0x16a>
 8001010:	2300      	movs	r3, #0
 8001012:	fa24 f40e 	lsr.w	r4, r4, lr
 8001016:	602c      	str	r4, [r5, #0]
 8001018:	606b      	str	r3, [r5, #4]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d907      	bls.n	8001032 <__udivmoddi4+0xc6>
 8001022:	2d00      	cmp	r5, #0
 8001024:	d055      	beq.n	80010d2 <__udivmoddi4+0x166>
 8001026:	2100      	movs	r1, #0
 8001028:	e885 0041 	stmia.w	r5, {r0, r6}
 800102c:	4608      	mov	r0, r1
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	fab3 f183 	clz	r1, r3
 8001036:	2900      	cmp	r1, #0
 8001038:	f040 808f 	bne.w	800115a <__udivmoddi4+0x1ee>
 800103c:	42b3      	cmp	r3, r6
 800103e:	d302      	bcc.n	8001046 <__udivmoddi4+0xda>
 8001040:	4282      	cmp	r2, r0
 8001042:	f200 80fc 	bhi.w	800123e <__udivmoddi4+0x2d2>
 8001046:	1a84      	subs	r4, r0, r2
 8001048:	eb66 0603 	sbc.w	r6, r6, r3
 800104c:	2001      	movs	r0, #1
 800104e:	46b4      	mov	ip, r6
 8001050:	2d00      	cmp	r5, #0
 8001052:	d040      	beq.n	80010d6 <__udivmoddi4+0x16a>
 8001054:	e885 1010 	stmia.w	r5, {r4, ip}
 8001058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105c:	b912      	cbnz	r2, 8001064 <__udivmoddi4+0xf8>
 800105e:	2701      	movs	r7, #1
 8001060:	fbb7 f7f2 	udiv	r7, r7, r2
 8001064:	fab7 fe87 	clz	lr, r7
 8001068:	f1be 0f00 	cmp.w	lr, #0
 800106c:	d135      	bne.n	80010da <__udivmoddi4+0x16e>
 800106e:	2101      	movs	r1, #1
 8001070:	1bf6      	subs	r6, r6, r7
 8001072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001076:	fa1f f887 	uxth.w	r8, r7
 800107a:	fbb6 f2fc 	udiv	r2, r6, ip
 800107e:	fb0c 6612 	mls	r6, ip, r2, r6
 8001082:	fb08 f002 	mul.w	r0, r8, r2
 8001086:	0c23      	lsrs	r3, r4, #16
 8001088:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800108c:	42b0      	cmp	r0, r6
 800108e:	d907      	bls.n	80010a0 <__udivmoddi4+0x134>
 8001090:	19f6      	adds	r6, r6, r7
 8001092:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8001096:	d202      	bcs.n	800109e <__udivmoddi4+0x132>
 8001098:	42b0      	cmp	r0, r6
 800109a:	f200 80d2 	bhi.w	8001242 <__udivmoddi4+0x2d6>
 800109e:	461a      	mov	r2, r3
 80010a0:	1a36      	subs	r6, r6, r0
 80010a2:	fbb6 f0fc 	udiv	r0, r6, ip
 80010a6:	fb0c 6610 	mls	r6, ip, r0, r6
 80010aa:	fb08 f800 	mul.w	r8, r8, r0
 80010ae:	b2a3      	uxth	r3, r4
 80010b0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80010b4:	45a0      	cmp	r8, r4
 80010b6:	d907      	bls.n	80010c8 <__udivmoddi4+0x15c>
 80010b8:	19e4      	adds	r4, r4, r7
 80010ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010be:	d202      	bcs.n	80010c6 <__udivmoddi4+0x15a>
 80010c0:	45a0      	cmp	r8, r4
 80010c2:	f200 80b9 	bhi.w	8001238 <__udivmoddi4+0x2cc>
 80010c6:	4618      	mov	r0, r3
 80010c8:	eba4 0408 	sub.w	r4, r4, r8
 80010cc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80010d0:	e79c      	b.n	800100c <__udivmoddi4+0xa0>
 80010d2:	4629      	mov	r1, r5
 80010d4:	4628      	mov	r0, r5
 80010d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010da:	fa07 f70e 	lsl.w	r7, r7, lr
 80010de:	f1ce 0320 	rsb	r3, lr, #32
 80010e2:	fa26 f203 	lsr.w	r2, r6, r3
 80010e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80010ea:	fbb2 f1fc 	udiv	r1, r2, ip
 80010ee:	fa1f f887 	uxth.w	r8, r7
 80010f2:	fb0c 2211 	mls	r2, ip, r1, r2
 80010f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80010fa:	fa20 f303 	lsr.w	r3, r0, r3
 80010fe:	fb01 f908 	mul.w	r9, r1, r8
 8001102:	4333      	orrs	r3, r6
 8001104:	0c1e      	lsrs	r6, r3, #16
 8001106:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800110a:	45b1      	cmp	r9, r6
 800110c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001110:	d909      	bls.n	8001126 <__udivmoddi4+0x1ba>
 8001112:	19f6      	adds	r6, r6, r7
 8001114:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8001118:	f080 808c 	bcs.w	8001234 <__udivmoddi4+0x2c8>
 800111c:	45b1      	cmp	r9, r6
 800111e:	f240 8089 	bls.w	8001234 <__udivmoddi4+0x2c8>
 8001122:	3902      	subs	r1, #2
 8001124:	443e      	add	r6, r7
 8001126:	eba6 0609 	sub.w	r6, r6, r9
 800112a:	fbb6 f0fc 	udiv	r0, r6, ip
 800112e:	fb0c 6210 	mls	r2, ip, r0, r6
 8001132:	fb00 f908 	mul.w	r9, r0, r8
 8001136:	b29e      	uxth	r6, r3
 8001138:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800113c:	45b1      	cmp	r9, r6
 800113e:	d907      	bls.n	8001150 <__udivmoddi4+0x1e4>
 8001140:	19f6      	adds	r6, r6, r7
 8001142:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001146:	d271      	bcs.n	800122c <__udivmoddi4+0x2c0>
 8001148:	45b1      	cmp	r9, r6
 800114a:	d96f      	bls.n	800122c <__udivmoddi4+0x2c0>
 800114c:	3802      	subs	r0, #2
 800114e:	443e      	add	r6, r7
 8001150:	eba6 0609 	sub.w	r6, r6, r9
 8001154:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001158:	e78f      	b.n	800107a <__udivmoddi4+0x10e>
 800115a:	f1c1 0720 	rsb	r7, r1, #32
 800115e:	fa22 f807 	lsr.w	r8, r2, r7
 8001162:	408b      	lsls	r3, r1
 8001164:	ea48 0303 	orr.w	r3, r8, r3
 8001168:	fa26 f407 	lsr.w	r4, r6, r7
 800116c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001170:	fbb4 f9fe 	udiv	r9, r4, lr
 8001174:	fa1f fc83 	uxth.w	ip, r3
 8001178:	fb0e 4419 	mls	r4, lr, r9, r4
 800117c:	408e      	lsls	r6, r1
 800117e:	fa20 f807 	lsr.w	r8, r0, r7
 8001182:	fb09 fa0c 	mul.w	sl, r9, ip
 8001186:	ea48 0806 	orr.w	r8, r8, r6
 800118a:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800118e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8001192:	45a2      	cmp	sl, r4
 8001194:	fa02 f201 	lsl.w	r2, r2, r1
 8001198:	fa00 f601 	lsl.w	r6, r0, r1
 800119c:	d908      	bls.n	80011b0 <__udivmoddi4+0x244>
 800119e:	18e4      	adds	r4, r4, r3
 80011a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80011a4:	d244      	bcs.n	8001230 <__udivmoddi4+0x2c4>
 80011a6:	45a2      	cmp	sl, r4
 80011a8:	d942      	bls.n	8001230 <__udivmoddi4+0x2c4>
 80011aa:	f1a9 0902 	sub.w	r9, r9, #2
 80011ae:	441c      	add	r4, r3
 80011b0:	eba4 040a 	sub.w	r4, r4, sl
 80011b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80011b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80011bc:	fb00 fc0c 	mul.w	ip, r0, ip
 80011c0:	fa1f f888 	uxth.w	r8, r8
 80011c4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80011c8:	45a4      	cmp	ip, r4
 80011ca:	d907      	bls.n	80011dc <__udivmoddi4+0x270>
 80011cc:	18e4      	adds	r4, r4, r3
 80011ce:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 80011d2:	d229      	bcs.n	8001228 <__udivmoddi4+0x2bc>
 80011d4:	45a4      	cmp	ip, r4
 80011d6:	d927      	bls.n	8001228 <__udivmoddi4+0x2bc>
 80011d8:	3802      	subs	r0, #2
 80011da:	441c      	add	r4, r3
 80011dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011e0:	fba0 8902 	umull	r8, r9, r0, r2
 80011e4:	eba4 0c0c 	sub.w	ip, r4, ip
 80011e8:	45cc      	cmp	ip, r9
 80011ea:	46c2      	mov	sl, r8
 80011ec:	46ce      	mov	lr, r9
 80011ee:	d315      	bcc.n	800121c <__udivmoddi4+0x2b0>
 80011f0:	d012      	beq.n	8001218 <__udivmoddi4+0x2ac>
 80011f2:	b155      	cbz	r5, 800120a <__udivmoddi4+0x29e>
 80011f4:	ebb6 030a 	subs.w	r3, r6, sl
 80011f8:	eb6c 060e 	sbc.w	r6, ip, lr
 80011fc:	fa06 f707 	lsl.w	r7, r6, r7
 8001200:	40cb      	lsrs	r3, r1
 8001202:	431f      	orrs	r7, r3
 8001204:	40ce      	lsrs	r6, r1
 8001206:	602f      	str	r7, [r5, #0]
 8001208:	606e      	str	r6, [r5, #4]
 800120a:	2100      	movs	r1, #0
 800120c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001210:	4610      	mov	r0, r2
 8001212:	e6f7      	b.n	8001004 <__udivmoddi4+0x98>
 8001214:	4689      	mov	r9, r1
 8001216:	e6de      	b.n	8000fd6 <__udivmoddi4+0x6a>
 8001218:	4546      	cmp	r6, r8
 800121a:	d2ea      	bcs.n	80011f2 <__udivmoddi4+0x286>
 800121c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001220:	eb69 0e03 	sbc.w	lr, r9, r3
 8001224:	3801      	subs	r0, #1
 8001226:	e7e4      	b.n	80011f2 <__udivmoddi4+0x286>
 8001228:	4670      	mov	r0, lr
 800122a:	e7d7      	b.n	80011dc <__udivmoddi4+0x270>
 800122c:	4618      	mov	r0, r3
 800122e:	e78f      	b.n	8001150 <__udivmoddi4+0x1e4>
 8001230:	4681      	mov	r9, r0
 8001232:	e7bd      	b.n	80011b0 <__udivmoddi4+0x244>
 8001234:	4611      	mov	r1, r2
 8001236:	e776      	b.n	8001126 <__udivmoddi4+0x1ba>
 8001238:	3802      	subs	r0, #2
 800123a:	443c      	add	r4, r7
 800123c:	e744      	b.n	80010c8 <__udivmoddi4+0x15c>
 800123e:	4608      	mov	r0, r1
 8001240:	e706      	b.n	8001050 <__udivmoddi4+0xe4>
 8001242:	3a02      	subs	r2, #2
 8001244:	443e      	add	r6, r7
 8001246:	e72b      	b.n	80010a0 <__udivmoddi4+0x134>

08001248 <__aeabi_idiv0>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_InitTick+0x24>)
{
 800124e:	b510      	push	{r4, lr}
 8001250:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	fbb0 f0f3 	udiv	r0, r0, r3
 800125c:	f000 f880 	bl	8001360 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001260:	2200      	movs	r2, #0
 8001262:	4621      	mov	r1, r4
 8001264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001268:	f000 f846 	bl	80012f8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800126c:	2000      	movs	r0, #0
 800126e:	bd10      	pop	{r4, pc}
 8001270:	20000008 	.word	0x20000008

08001274 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x20>)
{
 8001276:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001282:	f000 f827 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ffe0 	bl	800124c <HAL_InitTick>
  HAL_MspInit();
 800128c:	f001 fe4a 	bl	8002f24 <HAL_MspInit>
}
 8001290:	2000      	movs	r0, #0
 8001292:	bd08      	pop	{r3, pc}
 8001294:	40022000 	.word	0x40022000

08001298 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001298:	4a02      	ldr	r2, [pc, #8]	; (80012a4 <HAL_IncTick+0xc>)
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000ad8 	.word	0x20000ad8

080012a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <HAL_GetTick+0x8>)
 80012aa:	6818      	ldr	r0, [r3, #0]
}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000ad8 	.word	0x20000ad8

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80012b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff fff6 	bl	80012a8 <HAL_GetTick>
 80012bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80012be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80012c2:	bf18      	it	ne
 80012c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	f7ff ffef 	bl	80012a8 <HAL_GetTick>
 80012ca:	1b40      	subs	r0, r0, r5
 80012cc:	42a0      	cmp	r0, r4
 80012ce:	d3fa      	bcc.n	80012c6 <HAL_Delay+0x12>
  {
  }
}
 80012d0:	b003      	add	sp, #12
 80012d2:	bd30      	pop	{r4, r5, pc}

080012d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80012d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80012da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e2:	041b      	lsls	r3, r3, #16
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80012ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012f0:	60d3      	str	r3, [r2, #12]
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b530      	push	{r4, r5, lr}
 80012fc:	68dc      	ldr	r4, [r3, #12]
 80012fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001302:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	2b04      	cmp	r3, #4
 800130a:	bf28      	it	cs
 800130c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001314:	bf98      	it	ls
 8001316:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	fa05 f303 	lsl.w	r3, r5, r3
 800131c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001320:	bf88      	it	hi
 8001322:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4019      	ands	r1, r3
 8001326:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	fa05 f404 	lsl.w	r4, r5, r4
 800132c:	3c01      	subs	r4, #1
 800132e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001330:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001332:	ea42 0201 	orr.w	r2, r2, r1
 8001336:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	bfaf      	iteee	ge
 800133c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	4b06      	ldrlt	r3, [pc, #24]	; (800135c <HAL_NVIC_SetPriority+0x64>)
 8001342:	f000 000f 	andlt.w	r0, r0, #15
 8001346:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	bfa5      	ittet	ge
 800134a:	b2d2      	uxtbge	r2, r2
 800134c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001356:	bd30      	pop	{r4, r5, pc}
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	e000ed14 	.word	0xe000ed14

08001360 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	3801      	subs	r0, #1
 8001362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001366:	d20a      	bcs.n	800137e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800138e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	bf0c      	ite	eq
 8001394:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001398:	f022 0204 	bicne.w	r2, r2, #4
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	4770      	bx	lr
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013a4:	4770      	bx	lr

080013a6 <HAL_SYSTICK_IRQHandler>:
{
 80013a6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80013a8:	f7ff fffc 	bl	80013a4 <HAL_SYSTICK_Callback>
 80013ac:	bd08      	pop	{r3, pc}
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80013b4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	4616      	mov	r6, r2
 80013b8:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ba:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001560 <HAL_GPIO_Init+0x1b0>
 80013be:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001564 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80013c2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80013c8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013cc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80013d0:	45a0      	cmp	r8, r4
 80013d2:	d17f      	bne.n	80014d4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80013d4:	684d      	ldr	r5, [r1, #4]
 80013d6:	2d12      	cmp	r5, #18
 80013d8:	f000 80af 	beq.w	800153a <HAL_GPIO_Init+0x18a>
 80013dc:	f200 8088 	bhi.w	80014f0 <HAL_GPIO_Init+0x140>
 80013e0:	2d02      	cmp	r5, #2
 80013e2:	f000 80a7 	beq.w	8001534 <HAL_GPIO_Init+0x184>
 80013e6:	d87c      	bhi.n	80014e2 <HAL_GPIO_Init+0x132>
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	f000 808e 	beq.w	800150a <HAL_GPIO_Init+0x15a>
 80013ee:	2d01      	cmp	r5, #1
 80013f0:	f000 809e 	beq.w	8001530 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80013f4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f8:	2cff      	cmp	r4, #255	; 0xff
 80013fa:	bf93      	iteet	ls
 80013fc:	4682      	movls	sl, r0
 80013fe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001402:	3d08      	subhi	r5, #8
 8001404:	f8d0 b000 	ldrls.w	fp, [r0]
 8001408:	bf92      	itee	ls
 800140a:	00b5      	lslls	r5, r6, #2
 800140c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001410:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001412:	fa09 f805 	lsl.w	r8, r9, r5
 8001416:	ea2b 0808 	bic.w	r8, fp, r8
 800141a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800141e:	bf88      	it	hi
 8001420:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001424:	ea48 0505 	orr.w	r5, r8, r5
 8001428:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800142c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001430:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001434:	d04e      	beq.n	80014d4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001436:	4d47      	ldr	r5, [pc, #284]	; (8001554 <HAL_GPIO_Init+0x1a4>)
 8001438:	4f46      	ldr	r7, [pc, #280]	; (8001554 <HAL_GPIO_Init+0x1a4>)
 800143a:	69ad      	ldr	r5, [r5, #24]
 800143c:	f026 0803 	bic.w	r8, r6, #3
 8001440:	f045 0501 	orr.w	r5, r5, #1
 8001444:	61bd      	str	r5, [r7, #24]
 8001446:	69bd      	ldr	r5, [r7, #24]
 8001448:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800144c:	f005 0501 	and.w	r5, r5, #1
 8001450:	9501      	str	r5, [sp, #4]
 8001452:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001456:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800145a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800145c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001460:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001464:	fa09 f90b 	lsl.w	r9, r9, fp
 8001468:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146c:	4d3a      	ldr	r5, [pc, #232]	; (8001558 <HAL_GPIO_Init+0x1a8>)
 800146e:	42a8      	cmp	r0, r5
 8001470:	d068      	beq.n	8001544 <HAL_GPIO_Init+0x194>
 8001472:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001476:	42a8      	cmp	r0, r5
 8001478:	d066      	beq.n	8001548 <HAL_GPIO_Init+0x198>
 800147a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800147e:	42a8      	cmp	r0, r5
 8001480:	d064      	beq.n	800154c <HAL_GPIO_Init+0x19c>
 8001482:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001486:	42a8      	cmp	r0, r5
 8001488:	bf0c      	ite	eq
 800148a:	2503      	moveq	r5, #3
 800148c:	2504      	movne	r5, #4
 800148e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001492:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001496:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800149a:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80014a0:	bf14      	ite	ne
 80014a2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80014a4:	43a5      	biceq	r5, r4
 80014a6:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80014a8:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014aa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80014ae:	bf14      	ite	ne
 80014b0:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80014b2:	43a5      	biceq	r5, r4
 80014b4:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80014b6:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80014bc:	bf14      	ite	ne
 80014be:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80014c0:	43a5      	biceq	r5, r4
 80014c2:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80014c4:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80014ca:	bf14      	ite	ne
 80014cc:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80014ce:	ea25 0404 	biceq.w	r4, r5, r4
 80014d2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014d4:	3601      	adds	r6, #1
 80014d6:	2e10      	cmp	r6, #16
 80014d8:	f47f af73 	bne.w	80013c2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80014dc:	b003      	add	sp, #12
 80014de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80014e2:	2d03      	cmp	r5, #3
 80014e4:	d022      	beq.n	800152c <HAL_GPIO_Init+0x17c>
 80014e6:	2d11      	cmp	r5, #17
 80014e8:	d184      	bne.n	80013f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ea:	68ca      	ldr	r2, [r1, #12]
 80014ec:	3204      	adds	r2, #4
          break;
 80014ee:	e781      	b.n	80013f4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80014f0:	4f1a      	ldr	r7, [pc, #104]	; (800155c <HAL_GPIO_Init+0x1ac>)
 80014f2:	42bd      	cmp	r5, r7
 80014f4:	d009      	beq.n	800150a <HAL_GPIO_Init+0x15a>
 80014f6:	d812      	bhi.n	800151e <HAL_GPIO_Init+0x16e>
 80014f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001568 <HAL_GPIO_Init+0x1b8>
 80014fc:	454d      	cmp	r5, r9
 80014fe:	d004      	beq.n	800150a <HAL_GPIO_Init+0x15a>
 8001500:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001504:	454d      	cmp	r5, r9
 8001506:	f47f af75 	bne.w	80013f4 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800150a:	688a      	ldr	r2, [r1, #8]
 800150c:	b1c2      	cbz	r2, 8001540 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800150e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001510:	bf0c      	ite	eq
 8001512:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001516:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151a:	2208      	movs	r2, #8
 800151c:	e76a      	b.n	80013f4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800151e:	4575      	cmp	r5, lr
 8001520:	d0f3      	beq.n	800150a <HAL_GPIO_Init+0x15a>
 8001522:	4565      	cmp	r5, ip
 8001524:	d0f1      	beq.n	800150a <HAL_GPIO_Init+0x15a>
 8001526:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800156c <HAL_GPIO_Init+0x1bc>
 800152a:	e7eb      	b.n	8001504 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800152c:	2200      	movs	r2, #0
 800152e:	e761      	b.n	80013f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001530:	68ca      	ldr	r2, [r1, #12]
          break;
 8001532:	e75f      	b.n	80013f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001534:	68ca      	ldr	r2, [r1, #12]
 8001536:	3208      	adds	r2, #8
          break;
 8001538:	e75c      	b.n	80013f4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800153a:	68ca      	ldr	r2, [r1, #12]
 800153c:	320c      	adds	r2, #12
          break;
 800153e:	e759      	b.n	80013f4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001540:	2204      	movs	r2, #4
 8001542:	e757      	b.n	80013f4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001544:	2500      	movs	r5, #0
 8001546:	e7a2      	b.n	800148e <HAL_GPIO_Init+0xde>
 8001548:	2501      	movs	r5, #1
 800154a:	e7a0      	b.n	800148e <HAL_GPIO_Init+0xde>
 800154c:	2502      	movs	r5, #2
 800154e:	e79e      	b.n	800148e <HAL_GPIO_Init+0xde>
 8001550:	40010400 	.word	0x40010400
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800
 800155c:	10210000 	.word	0x10210000
 8001560:	10310000 	.word	0x10310000
 8001564:	10320000 	.word	0x10320000
 8001568:	10110000 	.word	0x10110000
 800156c:	10220000 	.word	0x10220000

08001570 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	b10a      	cbz	r2, 8001576 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001572:	6101      	str	r1, [r0, #16]
 8001574:	4770      	bx	lr
 8001576:	0409      	lsls	r1, r1, #16
 8001578:	e7fb      	b.n	8001572 <HAL_GPIO_WritePin+0x2>

0800157a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800157a:	6802      	ldr	r2, [r0, #0]
 800157c:	6953      	ldr	r3, [r2, #20]
 800157e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001582:	d00d      	beq.n	80015a0 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001584:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001588:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800158a:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800158c:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800158e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001594:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001598:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
 800159e:	4770      	bx	lr
  }
  return HAL_OK;
 80015a0:	4618      	mov	r0, r3
}
 80015a2:	4770      	bx	lr

080015a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80015a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a8:	4604      	mov	r4, r0
 80015aa:	4617      	mov	r7, r2
 80015ac:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015ae:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80015b2:	b28e      	uxth	r6, r1
 80015b4:	6825      	ldr	r5, [r4, #0]
 80015b6:	f1b8 0f01 	cmp.w	r8, #1
 80015ba:	bf0c      	ite	eq
 80015bc:	696b      	ldreq	r3, [r5, #20]
 80015be:	69ab      	ldrne	r3, [r5, #24]
 80015c0:	ea36 0303 	bics.w	r3, r6, r3
 80015c4:	bf14      	ite	ne
 80015c6:	2001      	movne	r0, #1
 80015c8:	2000      	moveq	r0, #0
 80015ca:	b908      	cbnz	r0, 80015d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80015cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015d0:	696b      	ldr	r3, [r5, #20]
 80015d2:	055a      	lsls	r2, r3, #21
 80015d4:	d512      	bpl.n	80015fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015d6:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80015d8:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015e0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80015e4:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80015e6:	2304      	movs	r3, #4
 80015e8:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	2300      	movs	r3, #0
      return HAL_ERROR;
 80015ec:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80015ee:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80015f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80015f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80015f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80015fc:	1c7b      	adds	r3, r7, #1
 80015fe:	d0d9      	beq.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001600:	b94f      	cbnz	r7, 8001616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001602:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001604:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001606:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001608:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800160c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001610:	2003      	movs	r0, #3
 8001612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001616:	f7ff fe47 	bl	80012a8 <HAL_GetTick>
 800161a:	eba0 0009 	sub.w	r0, r0, r9
 800161e:	4287      	cmp	r7, r0
 8001620:	d2c8      	bcs.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001622:	e7ee      	b.n	8001602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001624 <I2C_WaitOnFlagUntilTimeout>:
{
 8001624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001628:	4604      	mov	r4, r0
 800162a:	4690      	mov	r8, r2
 800162c:	461f      	mov	r7, r3
 800162e:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001630:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001634:	b28d      	uxth	r5, r1
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	f1b9 0f01 	cmp.w	r9, #1
 800163c:	bf0c      	ite	eq
 800163e:	695b      	ldreq	r3, [r3, #20]
 8001640:	699b      	ldrne	r3, [r3, #24]
 8001642:	ea35 0303 	bics.w	r3, r5, r3
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	4543      	cmp	r3, r8
 800164e:	d002      	beq.n	8001656 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001650:	2000      	movs	r0, #0
}
 8001652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001656:	1c7b      	adds	r3, r7, #1
 8001658:	d0ed      	beq.n	8001636 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800165a:	b95f      	cbnz	r7, 8001674 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800165c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800165e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001660:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001662:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001666:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800166a:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001674:	f7ff fe18 	bl	80012a8 <HAL_GetTick>
 8001678:	1b80      	subs	r0, r0, r6
 800167a:	4287      	cmp	r7, r0
 800167c:	d2db      	bcs.n	8001636 <I2C_WaitOnFlagUntilTimeout+0x12>
 800167e:	e7ed      	b.n	800165c <I2C_WaitOnFlagUntilTimeout+0x38>

08001680 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	d501      	bpl.n	8001694 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001690:	2000      	movs	r0, #0
 8001692:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff ff70 	bl	800157a <I2C_IsAcknowledgeFailed>
 800169a:	b9a8      	cbnz	r0, 80016c8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800169c:	1c6a      	adds	r2, r5, #1
 800169e:	d0f3      	beq.n	8001688 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016a0:	b965      	cbnz	r5, 80016bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80016a4:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80016ac:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80016ae:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80016b0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80016b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80016b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016bc:	f7ff fdf4 	bl	80012a8 <HAL_GetTick>
 80016c0:	1b80      	subs	r0, r0, r6
 80016c2:	4285      	cmp	r5, r0
 80016c4:	d2e0      	bcs.n	8001688 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80016c6:	e7ec      	b.n	80016a2 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80016c8:	2001      	movs	r0, #1
}
 80016ca:	bd70      	pop	{r4, r5, r6, pc}

080016cc <I2C_RequestMemoryWrite>:
{
 80016cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80016d0:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80016d2:	6802      	ldr	r2, [r0, #0]
{
 80016d4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80016d6:	6813      	ldr	r3, [r2, #0]
{
 80016d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]
{
 80016e0:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016e2:	9600      	str	r6, [sp, #0]
 80016e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016e6:	2200      	movs	r2, #0
 80016e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80016ec:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016ee:	f7ff ff99 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 80016f2:	b968      	cbnz	r0, 8001710 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80016fa:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016fe:	4633      	mov	r3, r6
 8001700:	491a      	ldr	r1, [pc, #104]	; (800176c <I2C_RequestMemoryWrite+0xa0>)
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff ff4e 	bl	80015a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001708:	b130      	cbz	r0, 8001718 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800170a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d018      	beq.n	8001742 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001710:	2003      	movs	r0, #3
}
 8001712:	b004      	add	sp, #16
 8001714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	9003      	str	r0, [sp, #12]
 800171c:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800171e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001720:	9203      	str	r2, [sp, #12]
 8001722:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001724:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001726:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001728:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800172a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800172c:	f7ff ffa8 	bl	8001680 <I2C_WaitOnTXEFlagUntilTimeout>
 8001730:	b148      	cbz	r0, 8001746 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001734:	2b04      	cmp	r3, #4
 8001736:	d1eb      	bne.n	8001710 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001740:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
 8001744:	e7e5      	b.n	8001712 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001746:	f1b8 0f01 	cmp.w	r8, #1
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	d102      	bne.n	8001754 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800174e:	b2ed      	uxtb	r5, r5
 8001750:	611d      	str	r5, [r3, #16]
 8001752:	e7de      	b.n	8001712 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001754:	0a2a      	lsrs	r2, r5, #8
 8001756:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001758:	990a      	ldr	r1, [sp, #40]	; 0x28
 800175a:	4632      	mov	r2, r6
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff ff8f 	bl	8001680 <I2C_WaitOnTXEFlagUntilTimeout>
 8001762:	2800      	cmp	r0, #0
 8001764:	d1e5      	bne.n	8001732 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	e7f1      	b.n	800174e <I2C_RequestMemoryWrite+0x82>
 800176a:	bf00      	nop
 800176c:	00010002 	.word	0x00010002

08001770 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	4604      	mov	r4, r0
 8001774:	460d      	mov	r5, r1
 8001776:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	6943      	ldr	r3, [r0, #20]
 800177c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001780:	d001      	beq.n	8001786 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001782:	2000      	movs	r0, #0
}
 8001784:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001786:	6942      	ldr	r2, [r0, #20]
 8001788:	06d2      	lsls	r2, r2, #27
 800178a:	d50b      	bpl.n	80017a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800178c:	f06f 0210 	mvn.w	r2, #16
 8001790:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001792:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001794:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001796:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800179a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800179c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800179e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017a4:	b95d      	cbnz	r5, 80017be <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80017a8:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017aa:	f043 0320 	orr.w	r3, r3, #32
 80017ae:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80017b0:	2320      	movs	r3, #32
 80017b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80017b6:	2300      	movs	r3, #0
 80017b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017be:	f7ff fd73 	bl	80012a8 <HAL_GetTick>
 80017c2:	1b80      	subs	r0, r0, r6
 80017c4:	4285      	cmp	r5, r0
 80017c6:	d2d7      	bcs.n	8001778 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80017c8:	e7ed      	b.n	80017a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080017ca <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80017ca:	b570      	push	{r4, r5, r6, lr}
 80017cc:	4604      	mov	r4, r0
 80017ce:	460d      	mov	r5, r1
 80017d0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	075b      	lsls	r3, r3, #29
 80017d8:	d501      	bpl.n	80017de <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fecb 	bl	800157a <I2C_IsAcknowledgeFailed>
 80017e4:	b9a8      	cbnz	r0, 8001812 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80017e6:	1c6a      	adds	r2, r5, #1
 80017e8:	d0f3      	beq.n	80017d2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017ea:	b965      	cbnz	r5, 8001806 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80017ee:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80017f8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80017fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001800:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001804:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001806:	f7ff fd4f 	bl	80012a8 <HAL_GetTick>
 800180a:	1b80      	subs	r0, r0, r6
 800180c:	4285      	cmp	r5, r0
 800180e:	d2e0      	bcs.n	80017d2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001810:	e7ec      	b.n	80017ec <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001812:	2001      	movs	r0, #1
}
 8001814:	bd70      	pop	{r4, r5, r6, pc}
	...

08001818 <HAL_I2C_Init>:
{
 8001818:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800181a:	4604      	mov	r4, r0
 800181c:	2800      	cmp	r0, #0
 800181e:	d063      	beq.n	80018e8 <HAL_I2C_Init+0xd0>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001820:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001824:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001828:	b91b      	cbnz	r3, 8001832 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800182a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800182e:	f001 fbc1 	bl	8002fb4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001832:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001834:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001836:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800183a:	6813      	ldr	r3, [r2, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800183c:	4e2b      	ldr	r6, [pc, #172]	; (80018ec <HAL_I2C_Init+0xd4>)
  __HAL_I2C_DISABLE(hi2c);
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001844:	f000 fdbe 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001848:	6863      	ldr	r3, [r4, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800184a:	4d29      	ldr	r5, [pc, #164]	; (80018f0 <HAL_I2C_Init+0xd8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800184c:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800184e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001852:	bf88      	it	hi
 8001854:	f44f 7196 	movhi.w	r1, #300	; 0x12c
  hi2c->Instance->CR2 = freqrange;
 8001858:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800185a:	bf88      	it	hi
 800185c:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 800185e:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001860:	bf85      	ittet	hi
 8001862:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001866:	fbb1 f1f5 	udivhi	r1, r1, r5
 800186a:	1c69      	addls	r1, r5, #1
 800186c:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800186e:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001870:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001872:	d821      	bhi.n	80018b8 <HAL_I2C_Init+0xa0>
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fbb0 f0f3 	udiv	r0, r0, r3
 800187a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800187e:	2b03      	cmp	r3, #3
 8001880:	bf98      	it	ls
 8001882:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001884:	6a21      	ldr	r1, [r4, #32]
 8001886:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001888:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800188a:	430b      	orrs	r3, r1
 800188c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800188e:	68e1      	ldr	r1, [r4, #12]
 8001890:	6923      	ldr	r3, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001892:	2000      	movs	r0, #0
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001894:	430b      	orrs	r3, r1
 8001896:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001898:	69a1      	ldr	r1, [r4, #24]
 800189a:	6963      	ldr	r3, [r4, #20]
 800189c:	430b      	orrs	r3, r1
 800189e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80018a0:	6813      	ldr	r3, [r2, #0]
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80018a8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018aa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80018b8:	68a1      	ldr	r1, [r4, #8]
 80018ba:	b949      	cbnz	r1, 80018d0 <HAL_I2C_Init+0xb8>
 80018bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80018c4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80018c8:	b163      	cbz	r3, 80018e4 <HAL_I2C_Init+0xcc>
 80018ca:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80018ce:	e7d9      	b.n	8001884 <HAL_I2C_Init+0x6c>
 80018d0:	2119      	movs	r1, #25
 80018d2:	434b      	muls	r3, r1
 80018d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80018d8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80018dc:	b113      	cbz	r3, 80018e4 <HAL_I2C_Init+0xcc>
 80018de:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80018e2:	e7cf      	b.n	8001884 <HAL_I2C_Init+0x6c>
 80018e4:	2001      	movs	r0, #1
 80018e6:	e7cd      	b.n	8001884 <HAL_I2C_Init+0x6c>
    return HAL_ERROR;
 80018e8:	2001      	movs	r0, #1
}
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	000186a0 	.word	0x000186a0
 80018f0:	000f4240 	.word	0x000f4240

080018f4 <HAL_I2C_Master_Transmit>:
{
 80018f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80018f8:	4604      	mov	r4, r0
 80018fa:	461f      	mov	r7, r3
 80018fc:	460d      	mov	r5, r1
 80018fe:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001900:	f7ff fcd2 	bl	80012a8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001904:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001908:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800190a:	2b20      	cmp	r3, #32
 800190c:	d004      	beq.n	8001918 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800190e:	2502      	movs	r5, #2
}
 8001910:	4628      	mov	r0, r5
 8001912:	b004      	add	sp, #16
 8001914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001918:	9000      	str	r0, [sp, #0]
 800191a:	2319      	movs	r3, #25
 800191c:	2201      	movs	r2, #1
 800191e:	495d      	ldr	r1, [pc, #372]	; (8001a94 <HAL_I2C_Master_Transmit+0x1a0>)
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff fe7f 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001926:	2800      	cmp	r0, #0
 8001928:	d1f1      	bne.n	800190e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800192a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800192e:	2b01      	cmp	r3, #1
 8001930:	d0ed      	beq.n	800190e <HAL_I2C_Master_Transmit+0x1a>
 8001932:	2301      	movs	r3, #1
 8001934:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800193e:	bf5e      	ittt	pl
 8001940:	681a      	ldrpl	r2, [r3, #0]
 8001942:	f042 0201 	orrpl.w	r2, r2, #1
 8001946:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001950:	2221      	movs	r2, #33	; 0x21
 8001952:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001956:	2210      	movs	r2, #16
 8001958:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195c:	2200      	movs	r2, #0
 800195e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001960:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001964:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001966:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001968:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800196a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800196e:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001970:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001972:	2a04      	cmp	r2, #4
 8001974:	d004      	beq.n	8001980 <HAL_I2C_Master_Transmit+0x8c>
 8001976:	2a01      	cmp	r2, #1
 8001978:	d002      	beq.n	8001980 <HAL_I2C_Master_Transmit+0x8c>
 800197a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800197e:	d104      	bne.n	800198a <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e002      	b.n	8001990 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800198a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800198c:	2a12      	cmp	r2, #18
 800198e:	d0f7      	beq.n	8001980 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001990:	9600      	str	r6, [sp, #0]
 8001992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001994:	2200      	movs	r2, #0
 8001996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff fe42 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	bb28      	cbnz	r0, 80019ee <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a2:	6923      	ldr	r3, [r4, #16]
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019aa:	d112      	bne.n	80019d2 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ac:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80019b0:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019b2:	4633      	mov	r3, r6
 80019b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019b6:	4938      	ldr	r1, [pc, #224]	; (8001a98 <HAL_I2C_Master_Transmit+0x1a4>)
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff fdf3 	bl	80015a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019be:	4605      	mov	r5, r0
 80019c0:	b9a0      	cbnz	r0, 80019ec <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	9003      	str	r0, [sp, #12]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	9203      	str	r2, [sp, #12]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	9303      	str	r3, [sp, #12]
 80019ce:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80019d0:	e050      	b.n	8001a74 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019d2:	11eb      	asrs	r3, r5, #7
 80019d4:	f003 0306 	and.w	r3, r3, #6
 80019d8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80019dc:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019de:	492f      	ldr	r1, [pc, #188]	; (8001a9c <HAL_I2C_Master_Transmit+0x1a8>)
 80019e0:	4633      	mov	r3, r6
 80019e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fddd 	bl	80015a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ea:	b148      	cbz	r0, 8001a00 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80019f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80019fc:	2501      	movs	r5, #1
 80019fe:	e787      	b.n	8001910 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	b2ed      	uxtb	r5, r5
 8001a04:	611d      	str	r5, [r3, #16]
 8001a06:	e7d4      	b.n	80019b2 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001a08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001a0c:	2503      	movs	r5, #3
 8001a0e:	e77f      	b.n	8001910 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a10:	4632      	mov	r2, r6
 8001a12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fe33 	bl	8001680 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a1a:	b140      	cbz	r0, 8001a2e <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d1f4      	bne.n	8001a0c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e7e6      	b.n	80019fc <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a30:	6820      	ldr	r0, [r4, #0]
 8001a32:	1c4b      	adds	r3, r1, #1
 8001a34:	6263      	str	r3, [r4, #36]	; 0x24
 8001a36:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001a38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a3a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001a3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a44:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001a46:	1e53      	subs	r3, r2, #1
 8001a48:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a4a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001a4c:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a4e:	d50a      	bpl.n	8001a66 <HAL_I2C_Master_Transmit+0x172>
 8001a50:	b14b      	cbz	r3, 8001a66 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a52:	1c8b      	adds	r3, r1, #2
 8001a54:	6263      	str	r3, [r4, #36]	; 0x24
 8001a56:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001a58:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a5a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001a5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001a5e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a66:	4632      	mov	r2, r6
 8001a68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff fead 	bl	80017ca <I2C_WaitOnBTFFlagUntilTimeout>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d1d3      	bne.n	8001a1c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001a74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ca      	bne.n	8001a10 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a7a:	6821      	ldr	r1, [r4, #0]
 8001a7c:	680a      	ldr	r2, [r1, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a82:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001a86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001a92:	e73d      	b.n	8001910 <HAL_I2C_Master_Transmit+0x1c>
 8001a94:	00100002 	.word	0x00100002
 8001a98:	00010002 	.word	0x00010002
 8001a9c:	00010008 	.word	0x00010008

08001aa0 <HAL_I2C_Master_Receive>:
{
 8001aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	4698      	mov	r8, r3
 8001aaa:	460d      	mov	r5, r1
 8001aac:	4691      	mov	r9, r2
 8001aae:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001ab0:	f7ff fbfa 	bl	80012a8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ab4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001ab8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d004      	beq.n	8001ac8 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001abe:	2502      	movs	r5, #2
}
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	b009      	add	sp, #36	; 0x24
 8001ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac8:	9000      	str	r0, [sp, #0]
 8001aca:	2319      	movs	r3, #25
 8001acc:	2201      	movs	r2, #1
 8001ace:	49a2      	ldr	r1, [pc, #648]	; (8001d58 <HAL_I2C_Master_Receive+0x2b8>)
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff fda7 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d1f1      	bne.n	8001abe <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001ada:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d0ed      	beq.n	8001abe <HAL_I2C_Master_Receive+0x1e>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001aee:	bf5e      	ittt	pl
 8001af0:	681a      	ldrpl	r2, [r3, #0]
 8001af2:	f042 0201 	orrpl.w	r2, r2, #1
 8001af6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afe:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b00:	2222      	movs	r2, #34	; 0x22
 8001b02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b06:	2210      	movs	r2, #16
 8001b08:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b10:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001b14:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b18:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001b1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001b1c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001b20:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b24:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b26:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b28:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001b2c:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b2e:	d004      	beq.n	8001b3a <HAL_I2C_Master_Receive+0x9a>
 8001b30:	2a01      	cmp	r2, #1
 8001b32:	d002      	beq.n	8001b3a <HAL_I2C_Master_Receive+0x9a>
 8001b34:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001b38:	d104      	bne.n	8001b44 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e002      	b.n	8001b4a <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001b44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b46:	2a11      	cmp	r2, #17
 8001b48:	d0f7      	beq.n	8001b3a <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b4a:	9600      	str	r6, [sp, #0]
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff fd65 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d14d      	bne.n	8001bfa <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	d139      	bne.n	8001bdc <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b68:	f045 0501 	orr.w	r5, r5, #1
 8001b6c:	b2ed      	uxtb	r5, r5
 8001b6e:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b70:	4633      	mov	r3, r6
 8001b72:	463a      	mov	r2, r7
 8001b74:	4979      	ldr	r1, [pc, #484]	; (8001d5c <HAL_I2C_Master_Receive+0x2bc>)
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff fd14 	bl	80015a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d13a      	bne.n	8001bf8 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8001b82:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d069      	beq.n	8001c5e <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d17a      	bne.n	8001c84 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b94:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b96:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	9504      	str	r5, [sp, #16]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	9204      	str	r2, [sp, #16]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	9204      	str	r2, [sp, #16]
 8001ba4:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bae:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001d64 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8001bb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d05b      	beq.n	8001c72 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	f200 80d4 	bhi.w	8001d68 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d17b      	bne.n	8001cbc <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001bc4:	4632      	mov	r2, r6
 8001bc6:	4639      	mov	r1, r7
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff fdd1 	bl	8001770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	f000 8093 	beq.w	8001cfa <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d116      	bne.n	8001c08 <HAL_I2C_Master_Receive+0x168>
 8001bda:	e03e      	b.n	8001c5a <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bdc:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001be0:	f008 0806 	and.w	r8, r8, #6
 8001be4:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001be8:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bea:	495d      	ldr	r1, [pc, #372]	; (8001d60 <HAL_I2C_Master_Receive+0x2c0>)
 8001bec:	4633      	mov	r3, r6
 8001bee:	463a      	mov	r2, r7
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff fcd7 	bl	80015a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf6:	b148      	cbz	r0, 8001c0c <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	d128      	bne.n	8001c56 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001c04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001c08:	2501      	movs	r5, #1
 8001c0a:	e759      	b.n	8001ac0 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	b2ed      	uxtb	r5, r5
 8001c10:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c12:	463a      	mov	r2, r7
 8001c14:	4633      	mov	r3, r6
 8001c16:	4951      	ldr	r1, [pc, #324]	; (8001d5c <HAL_I2C_Master_Receive+0x2bc>)
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff fcc3 	bl	80015a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d1e9      	bne.n	8001bf8 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	9007      	str	r0, [sp, #28]
 8001c28:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2c:	9107      	str	r1, [sp, #28]
 8001c2e:	6999      	ldr	r1, [r3, #24]
 8001c30:	9107      	str	r1, [sp, #28]
 8001c32:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c3a:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c3c:	9600      	str	r6, [sp, #0]
 8001c3e:	463b      	mov	r3, r7
 8001c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c44:	f7ff fcee 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d1d6      	bne.n	8001bfa <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c4c:	6822      	ldr	r2, [r4, #0]
 8001c4e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001c52:	6113      	str	r3, [r2, #16]
 8001c54:	e78c      	b.n	8001b70 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8001c56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8001c5a:	2503      	movs	r5, #3
 8001c5c:	e730      	b.n	8001ac0 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5e:	9503      	str	r5, [sp, #12]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	9203      	str	r2, [sp, #12]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	9203      	str	r2, [sp, #12]
 8001c68:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c70:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	2320      	movs	r3, #32
 8001c74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001c7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001c82:	e71d      	b.n	8001ac0 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001c84:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001c86:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001c88:	d10e      	bne.n	8001ca8 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	9505      	str	r5, [sp, #20]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	9205      	str	r2, [sp, #20]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	9205      	str	r2, [sp, #20]
 8001c9e:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	e781      	b.n	8001bac <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cac:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cae:	9506      	str	r5, [sp, #24]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	9206      	str	r2, [sp, #24]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	9306      	str	r3, [sp, #24]
 8001cb8:	9b06      	ldr	r3, [sp, #24]
 8001cba:	e779      	b.n	8001bb0 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001cbc:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cbe:	9600      	str	r6, [sp, #0]
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4641      	mov	r1, r8
 8001cc8:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001cca:	d124      	bne.n	8001d16 <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ccc:	f7ff fcaa 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d1c2      	bne.n	8001c5a <HAL_I2C_Master_Receive+0x1ba>
 8001cd4:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cde:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ce0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	1c51      	adds	r1, r2, #1
 8001ce6:	6261      	str	r1, [r4, #36]	; 0x24
 8001ce8:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001cea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001cf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cf8:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	6262      	str	r2, [r4, #36]	; 0x24
 8001d00:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d02:	6912      	ldr	r2, [r2, #16]
 8001d04:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001d14:	e74e      	b.n	8001bb4 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d16:	f7ff fc85 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	d19c      	bne.n	8001c5a <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d20:	6821      	ldr	r1, [r4, #0]
 8001d22:	680b      	ldr	r3, [r1, #0]
 8001d24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d28:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2a:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d2e:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	6261      	str	r1, [r4, #36]	; 0x24
 8001d34:	6821      	ldr	r1, [r4, #0]
 8001d36:	6909      	ldr	r1, [r1, #16]
 8001d38:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001d3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d3c:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d44:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	f7ff fc69 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d0bf      	beq.n	8001cd6 <HAL_I2C_Master_Receive+0x236>
 8001d56:	e780      	b.n	8001c5a <HAL_I2C_Master_Receive+0x1ba>
 8001d58:	00100002 	.word	0x00100002
 8001d5c:	00010002 	.word	0x00010002
 8001d60:	00010008 	.word	0x00010008
 8001d64:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d68:	4632      	mov	r2, r6
 8001d6a:	4639      	mov	r1, r7
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff fcff 	bl	8001770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	f47f af2e 	bne.w	8001bd4 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	6262      	str	r2, [r4, #36]	; 0x24
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	6912      	ldr	r2, [r2, #16]
 8001d82:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001d84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d86:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d94:	6953      	ldr	r3, [r2, #20]
 8001d96:	075b      	lsls	r3, r3, #29
 8001d98:	f57f af0c 	bpl.w	8001bb4 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	6261      	str	r1, [r4, #36]	; 0x24
 8001da2:	e7ae      	b.n	8001d02 <HAL_I2C_Master_Receive+0x262>

08001da4 <HAL_I2C_Mem_Write>:
{
 8001da4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001da8:	4604      	mov	r4, r0
 8001daa:	469a      	mov	sl, r3
 8001dac:	4688      	mov	r8, r1
 8001dae:	4691      	mov	r9, r2
 8001db0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001db2:	f7ff fa79 	bl	80012a8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001db6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001dba:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d003      	beq.n	8001dc8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001dc0:	2002      	movs	r0, #2
}
 8001dc2:	b002      	add	sp, #8
 8001dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc8:	9000      	str	r0, [sp, #0]
 8001dca:	2319      	movs	r3, #25
 8001dcc:	2201      	movs	r2, #1
 8001dce:	493e      	ldr	r1, [pc, #248]	; (8001ec8 <HAL_I2C_Mem_Write+0x124>)
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff fc27 	bl	8001624 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d1f2      	bne.n	8001dc0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001dda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d0ee      	beq.n	8001dc0 <HAL_I2C_Mem_Write+0x1c>
 8001de2:	2301      	movs	r3, #1
 8001de4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001de8:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dea:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dec:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dee:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001df2:	bf58      	it	pl
 8001df4:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001df6:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001df8:	bf5c      	itt	pl
 8001dfa:	f042 0201 	orrpl.w	r2, r2, #1
 8001dfe:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e08:	2321      	movs	r3, #33	; 0x21
 8001e0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e0e:	2340      	movs	r3, #64	; 0x40
 8001e10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e16:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001e18:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e1a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e1e:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001e20:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e24:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e26:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e2a:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001e2c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e2e:	4653      	mov	r3, sl
 8001e30:	f7ff fc4c 	bl	80016cc <I2C_RequestMemoryWrite>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d02a      	beq.n	8001e8e <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e38:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001e3a:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d107      	bne.n	8001e52 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
 8001e44:	e7bd      	b.n	8001dc2 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e46:	f7ff fc1b 	bl	8001680 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e4a:	b120      	cbz	r0, 8001e56 <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d034      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001e52:	2003      	movs	r0, #3
 8001e54:	e7b5      	b.n	8001dc2 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e58:	6827      	ldr	r7, [r4, #0]
 8001e5a:	1c4b      	adds	r3, r1, #1
 8001e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e5e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001e60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e62:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001e64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e66:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e6e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001e70:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e72:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001e74:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e76:	d50a      	bpl.n	8001e8e <HAL_I2C_Mem_Write+0xea>
 8001e78:	b148      	cbz	r0, 8001e8e <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e7a:	1c8b      	adds	r3, r1, #2
 8001e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e7e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001e80:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e82:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001e86:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001e8e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e90:	462a      	mov	r2, r5
 8001e92:	4631      	mov	r1, r6
 8001e94:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1d5      	bne.n	8001e46 <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9a:	f7ff fc96 	bl	80017ca <I2C_WaitOnBTFFlagUntilTimeout>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d1d4      	bne.n	8001e4c <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ea2:	6822      	ldr	r2, [r4, #0]
 8001ea4:	6813      	ldr	r3, [r2, #0]
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eaa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001eae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001eba:	e782      	b.n	8001dc2 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ebc:	6822      	ldr	r2, [r4, #0]
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e7bc      	b.n	8001e42 <HAL_I2C_Mem_Write+0x9e>
 8001ec8:	00100002 	.word	0x00100002
 8001ecc:	ffff0000 	.word	0xffff0000

08001ed0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4b01      	ldr	r3, [pc, #4]	; (8001ed8 <HAL_PWR_EnableBkUpAccess+0x8>)
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	4770      	bx	lr
 8001ed8:	420e0020 	.word	0x420e0020

08001edc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001edc:	6803      	ldr	r3, [r0, #0]
{
 8001ede:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	07db      	lsls	r3, r3, #31
{
 8001ee4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	d410      	bmi.n	8001f0a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee8:	682b      	ldr	r3, [r5, #0]
 8001eea:	079f      	lsls	r7, r3, #30
 8001eec:	d45e      	bmi.n	8001fac <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	0719      	lsls	r1, r3, #28
 8001ef2:	f100 8095 	bmi.w	8002020 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef6:	682b      	ldr	r3, [r5, #0]
 8001ef8:	075a      	lsls	r2, r3, #29
 8001efa:	f100 80bf 	bmi.w	800207c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efe:	69ea      	ldr	r2, [r5, #28]
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	f040 812d 	bne.w	8002160 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001f06:	2000      	movs	r0, #0
 8001f08:	e014      	b.n	8001f34 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f0a:	4c90      	ldr	r4, [pc, #576]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d007      	beq.n	8001f26 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f16:	6863      	ldr	r3, [r4, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
 8001f20:	6863      	ldr	r3, [r4, #4]
 8001f22:	03de      	lsls	r6, r3, #15
 8001f24:	d509      	bpl.n	8001f3a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	039c      	lsls	r4, r3, #14
 8001f2a:	d5dd      	bpl.n	8001ee8 <HAL_RCC_OscConfig+0xc>
 8001f2c:	686b      	ldr	r3, [r5, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1da      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	b002      	add	sp, #8
 8001f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	686b      	ldr	r3, [r5, #4]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d110      	bne.n	8001f64 <HAL_RCC_OscConfig+0x88>
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f9ad 	bl	80012a8 <HAL_GetTick>
 8001f4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	0398      	lsls	r0, r3, #14
 8001f54:	d4c8      	bmi.n	8001ee8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f56:	f7ff f9a7 	bl	80012a8 <HAL_GetTick>
 8001f5a:	1b80      	subs	r0, r0, r6
 8001f5c:	2864      	cmp	r0, #100	; 0x64
 8001f5e:	d9f7      	bls.n	8001f50 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001f60:	2003      	movs	r0, #3
 8001f62:	e7e7      	b.n	8001f34 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	b99b      	cbnz	r3, 8001f8e <HAL_RCC_OscConfig+0xb2>
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f76:	f7ff f997 	bl	80012a8 <HAL_GetTick>
 8001f7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	0399      	lsls	r1, r3, #14
 8001f80:	d5b2      	bpl.n	8001ee8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f82:	f7ff f991 	bl	80012a8 <HAL_GetTick>
 8001f86:	1b80      	subs	r0, r0, r6
 8001f88:	2864      	cmp	r0, #100	; 0x64
 8001f8a:	d9f7      	bls.n	8001f7c <HAL_RCC_OscConfig+0xa0>
 8001f8c:	e7e8      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	d103      	bne.n	8001f9e <HAL_RCC_OscConfig+0xc2>
 8001f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9a:	6023      	str	r3, [r4, #0]
 8001f9c:	e7d1      	b.n	8001f42 <HAL_RCC_OscConfig+0x66>
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6023      	str	r3, [r4, #0]
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	e7cd      	b.n	8001f48 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fac:	4c67      	ldr	r4, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8001fae:	6863      	ldr	r3, [r4, #4]
 8001fb0:	f013 0f0c 	tst.w	r3, #12
 8001fb4:	d007      	beq.n	8001fc6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fb6:	6863      	ldr	r3, [r4, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d110      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x106>
 8001fc0:	6863      	ldr	r3, [r4, #4]
 8001fc2:	03da      	lsls	r2, r3, #15
 8001fc4:	d40d      	bmi.n	8001fe2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	079b      	lsls	r3, r3, #30
 8001fca:	d502      	bpl.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
 8001fcc:	692b      	ldr	r3, [r5, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d1af      	bne.n	8001f32 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	696a      	ldr	r2, [r5, #20]
 8001fd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fde:	6023      	str	r3, [r4, #0]
 8001fe0:	e785      	b.n	8001eee <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe2:	692a      	ldr	r2, [r5, #16]
 8001fe4:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 8001fe6:	b16a      	cbz	r2, 8002004 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fec:	f7ff f95c 	bl	80012a8 <HAL_GetTick>
 8001ff0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	079f      	lsls	r7, r3, #30
 8001ff6:	d4ec      	bmi.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f956 	bl	80012a8 <HAL_GetTick>
 8001ffc:	1b80      	subs	r0, r0, r6
 8001ffe:	2802      	cmp	r0, #2
 8002000:	d9f7      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x116>
 8002002:	e7ad      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002004:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002006:	f7ff f94f 	bl	80012a8 <HAL_GetTick>
 800200a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	0798      	lsls	r0, r3, #30
 8002010:	f57f af6d 	bpl.w	8001eee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f948 	bl	80012a8 <HAL_GetTick>
 8002018:	1b80      	subs	r0, r0, r6
 800201a:	2802      	cmp	r0, #2
 800201c:	d9f6      	bls.n	800200c <HAL_RCC_OscConfig+0x130>
 800201e:	e79f      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002020:	69aa      	ldr	r2, [r5, #24]
 8002022:	4c4a      	ldr	r4, [pc, #296]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8002024:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_RCC_OscConfig+0x278>)
 8002026:	b1da      	cbz	r2, 8002060 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800202c:	f7ff f93c 	bl	80012a8 <HAL_GetTick>
 8002030:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002034:	079b      	lsls	r3, r3, #30
 8002036:	d50d      	bpl.n	8002054 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002038:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fbb3 f3f2 	udiv	r3, r3, r2
 8002044:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002046:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	9201      	str	r2, [sp, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <HAL_RCC_OscConfig+0x16a>
 8002052:	e750      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff f928 	bl	80012a8 <HAL_GetTick>
 8002058:	1b80      	subs	r0, r0, r6
 800205a:	2802      	cmp	r0, #2
 800205c:	d9e9      	bls.n	8002032 <HAL_RCC_OscConfig+0x156>
 800205e:	e77f      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002060:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002062:	f7ff f921 	bl	80012a8 <HAL_GetTick>
 8002066:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800206a:	079f      	lsls	r7, r3, #30
 800206c:	f57f af43 	bpl.w	8001ef6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff f91a 	bl	80012a8 <HAL_GetTick>
 8002074:	1b80      	subs	r0, r0, r6
 8002076:	2802      	cmp	r0, #2
 8002078:	d9f6      	bls.n	8002068 <HAL_RCC_OscConfig+0x18c>
 800207a:	e771      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207c:	4c33      	ldr	r4, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0x270>)
 800207e:	69e3      	ldr	r3, [r4, #28]
 8002080:	00d8      	lsls	r0, r3, #3
 8002082:	d424      	bmi.n	80020ce <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002084:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	69e3      	ldr	r3, [r4, #28]
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61e3      	str	r3, [r4, #28]
 800208e:	69e3      	ldr	r3, [r4, #28]
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4e30      	ldr	r6, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x280>)
 800209a:	6833      	ldr	r3, [r6, #0]
 800209c:	05d9      	lsls	r1, r3, #23
 800209e:	d518      	bpl.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	68eb      	ldr	r3, [r5, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d126      	bne.n	80020f4 <HAL_RCC_OscConfig+0x218>
 80020a6:	6a23      	ldr	r3, [r4, #32]
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80020ae:	f7ff f8fb 	bl	80012a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020b6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	6a23      	ldr	r3, [r4, #32]
 80020ba:	079b      	lsls	r3, r3, #30
 80020bc:	d53f      	bpl.n	800213e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80020be:	2f00      	cmp	r7, #0
 80020c0:	f43f af1d 	beq.w	8001efe <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	69e3      	ldr	r3, [r4, #28]
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ca:	61e3      	str	r3, [r4, #28]
 80020cc:	e717      	b.n	8001efe <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2700      	movs	r7, #0
 80020d0:	e7e2      	b.n	8002098 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d2:	6833      	ldr	r3, [r6, #0]
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80020da:	f7ff f8e5 	bl	80012a8 <HAL_GetTick>
 80020de:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	6833      	ldr	r3, [r6, #0]
 80020e2:	05da      	lsls	r2, r3, #23
 80020e4:	d4dc      	bmi.n	80020a0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7ff f8df 	bl	80012a8 <HAL_GetTick>
 80020ea:	eba0 0008 	sub.w	r0, r0, r8
 80020ee:	2864      	cmp	r0, #100	; 0x64
 80020f0:	d9f6      	bls.n	80020e0 <HAL_RCC_OscConfig+0x204>
 80020f2:	e735      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	b9ab      	cbnz	r3, 8002122 <HAL_RCC_OscConfig+0x246>
 80020f6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6223      	str	r3, [r4, #32]
 8002102:	6a23      	ldr	r3, [r4, #32]
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800210a:	f7ff f8cd 	bl	80012a8 <HAL_GetTick>
 800210e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	6a23      	ldr	r3, [r4, #32]
 8002112:	0798      	lsls	r0, r3, #30
 8002114:	d5d3      	bpl.n	80020be <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7ff f8c7 	bl	80012a8 <HAL_GetTick>
 800211a:	1b80      	subs	r0, r0, r6
 800211c:	4540      	cmp	r0, r8
 800211e:	d9f7      	bls.n	8002110 <HAL_RCC_OscConfig+0x234>
 8002120:	e71e      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	2b05      	cmp	r3, #5
 8002124:	6a23      	ldr	r3, [r4, #32]
 8002126:	d103      	bne.n	8002130 <HAL_RCC_OscConfig+0x254>
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6223      	str	r3, [r4, #32]
 800212e:	e7ba      	b.n	80020a6 <HAL_RCC_OscConfig+0x1ca>
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6223      	str	r3, [r4, #32]
 8002136:	6a23      	ldr	r3, [r4, #32]
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	e7b6      	b.n	80020ac <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff f8b3 	bl	80012a8 <HAL_GetTick>
 8002142:	eba0 0008 	sub.w	r0, r0, r8
 8002146:	42b0      	cmp	r0, r6
 8002148:	d9b6      	bls.n	80020b8 <HAL_RCC_OscConfig+0x1dc>
 800214a:	e709      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
 800214c:	40021000 	.word	0x40021000
 8002150:	42420000 	.word	0x42420000
 8002154:	42420480 	.word	0x42420480
 8002158:	20000008 	.word	0x20000008
 800215c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	4c22      	ldr	r4, [pc, #136]	; (80021ec <HAL_RCC_OscConfig+0x310>)
 8002162:	6863      	ldr	r3, [r4, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	f43f aee2 	beq.w	8001f32 <HAL_RCC_OscConfig+0x56>
 800216e:	2300      	movs	r3, #0
 8002170:	4e1f      	ldr	r6, [pc, #124]	; (80021f0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002174:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002176:	d12b      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002178:	f7ff f896 	bl	80012a8 <HAL_GetTick>
 800217c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	0199      	lsls	r1, r3, #6
 8002182:	d41f      	bmi.n	80021c4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002184:	6a2b      	ldr	r3, [r5, #32]
 8002186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800218c:	6862      	ldr	r2, [r4, #4]
 800218e:	68a9      	ldr	r1, [r5, #8]
 8002190:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002194:	430a      	orrs	r2, r1
 8002196:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002198:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800219a:	6862      	ldr	r2, [r4, #4]
 800219c:	430b      	orrs	r3, r1
 800219e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80021a2:	4313      	orrs	r3, r2
 80021a4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80021a6:	2301      	movs	r3, #1
 80021a8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80021aa:	f7ff f87d 	bl	80012a8 <HAL_GetTick>
 80021ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	019a      	lsls	r2, r3, #6
 80021b4:	f53f aea7 	bmi.w	8001f06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f876 	bl	80012a8 <HAL_GetTick>
 80021bc:	1b40      	subs	r0, r0, r5
 80021be:	2802      	cmp	r0, #2
 80021c0:	d9f6      	bls.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
 80021c2:	e6cd      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f870 	bl	80012a8 <HAL_GetTick>
 80021c8:	1bc0      	subs	r0, r0, r7
 80021ca:	2802      	cmp	r0, #2
 80021cc:	d9d7      	bls.n	800217e <HAL_RCC_OscConfig+0x2a2>
 80021ce:	e6c7      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80021d0:	f7ff f86a 	bl	80012a8 <HAL_GetTick>
 80021d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	f57f ae94 	bpl.w	8001f06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff f863 	bl	80012a8 <HAL_GetTick>
 80021e2:	1b40      	subs	r0, r0, r5
 80021e4:	2802      	cmp	r0, #2
 80021e6:	d9f6      	bls.n	80021d6 <HAL_RCC_OscConfig+0x2fa>
 80021e8:	e6ba      	b.n	8001f60 <HAL_RCC_OscConfig+0x84>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	42420060 	.word	0x42420060

080021f4 <HAL_RCC_GetSysClockFreq>:
{
 80021f4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 80021f8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021fa:	ac02      	add	r4, sp, #8
 80021fc:	f103 0510 	add.w	r5, r3, #16
 8002200:	4622      	mov	r2, r4
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	3308      	adds	r3, #8
 8002208:	c203      	stmia	r2!, {r0, r1}
 800220a:	42ab      	cmp	r3, r5
 800220c:	4614      	mov	r4, r2
 800220e:	d1f7      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002210:	2301      	movs	r3, #1
 8002212:	f88d 3004 	strb.w	r3, [sp, #4]
 8002216:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002218:	4912      	ldr	r1, [pc, #72]	; (8002264 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800221a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800221e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	f003 020c 	and.w	r2, r3, #12
 8002224:	2a08      	cmp	r2, #8
 8002226:	d118      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002228:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800222c:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222e:	bf48      	it	mi
 8002230:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002232:	a806      	add	r0, sp, #24
 8002234:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002236:	bf48      	it	mi
 8002238:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002240:	bf41      	itttt	mi
 8002242:	aa06      	addmi	r2, sp, #24
 8002244:	189b      	addmi	r3, r3, r2
 8002246:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800224a:	4b07      	ldrmi	r3, [pc, #28]	; (8002268 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800224c:	bf54      	ite	pl
 800224e:	4b07      	ldrpl	r3, [pc, #28]	; (800226c <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002250:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002254:	4358      	muls	r0, r3
}
 8002256:	b007      	add	sp, #28
 8002258:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800225c:	e7fb      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x62>
 800225e:	bf00      	nop
 8002260:	08005f68 	.word	0x08005f68
 8002264:	40021000 	.word	0x40021000
 8002268:	007a1200 	.word	0x007a1200
 800226c:	003d0900 	.word	0x003d0900

08002270 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002270:	4a4d      	ldr	r2, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x138>)
{
 8002272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002276:	6813      	ldr	r3, [r2, #0]
{
 8002278:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	428b      	cmp	r3, r1
{
 8002280:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002282:	d328      	bcc.n	80022d6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	682a      	ldr	r2, [r5, #0]
 8002286:	0791      	lsls	r1, r2, #30
 8002288:	d432      	bmi.n	80022f0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	07d2      	lsls	r2, r2, #31
 800228c:	d438      	bmi.n	8002300 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800228e:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_RCC_ClockConfig+0x138>)
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	429e      	cmp	r6, r3
 8002298:	d373      	bcc.n	8002382 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229a:	682a      	ldr	r2, [r5, #0]
 800229c:	4c43      	ldr	r4, [pc, #268]	; (80023ac <HAL_RCC_ClockConfig+0x13c>)
 800229e:	f012 0f04 	tst.w	r2, #4
 80022a2:	d179      	bne.n	8002398 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	0713      	lsls	r3, r2, #28
 80022a6:	d506      	bpl.n	80022b6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a8:	6863      	ldr	r3, [r4, #4]
 80022aa:	692a      	ldr	r2, [r5, #16]
 80022ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80022b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022b4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022b6:	f7ff ff9d 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80022ba:	6863      	ldr	r3, [r4, #4]
 80022bc:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <HAL_RCC_ClockConfig+0x140>)
 80022be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	40d8      	lsrs	r0, r3
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_ClockConfig+0x144>)
 80022c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe ffbe 	bl	800124c <HAL_InitTick>
  return HAL_OK;
 80022d0:	2000      	movs	r0, #0
}
 80022d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	f023 0307 	bic.w	r3, r3, #7
 80022dc:	430b      	orrs	r3, r1
 80022de:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022e0:	6813      	ldr	r3, [r2, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	4299      	cmp	r1, r3
 80022e8:	d0cc      	beq.n	8002284 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80022ea:	2001      	movs	r0, #1
 80022ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	492e      	ldr	r1, [pc, #184]	; (80023ac <HAL_RCC_ClockConfig+0x13c>)
 80022f2:	68a8      	ldr	r0, [r5, #8]
 80022f4:	684b      	ldr	r3, [r1, #4]
 80022f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fa:	4303      	orrs	r3, r0
 80022fc:	604b      	str	r3, [r1, #4]
 80022fe:	e7c4      	b.n	800228a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002300:	686a      	ldr	r2, [r5, #4]
 8002302:	4c2a      	ldr	r4, [pc, #168]	; (80023ac <HAL_RCC_ClockConfig+0x13c>)
 8002304:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	d0ec      	beq.n	80022ea <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002310:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002312:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	4313      	orrs	r3, r2
 800231c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800231e:	f7fe ffc3 	bl	80012a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002324:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	2b01      	cmp	r3, #1
 8002328:	d114      	bne.n	8002354 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d0ac      	beq.n	800228e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe ffb8 	bl	80012a8 <HAL_GetTick>
 8002338:	1bc0      	subs	r0, r0, r7
 800233a:	4540      	cmp	r0, r8
 800233c:	d9f5      	bls.n	800232a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800233e:	2003      	movs	r0, #3
 8002340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002344:	2a02      	cmp	r2, #2
 8002346:	d102      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800234c:	e7df      	b.n	800230e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	f013 0f02 	tst.w	r3, #2
 8002352:	e7dc      	b.n	800230e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002354:	2b02      	cmp	r3, #2
 8002356:	d10f      	bne.n	8002378 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d095      	beq.n	800228e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002362:	f7fe ffa1 	bl	80012a8 <HAL_GetTick>
 8002366:	1bc0      	subs	r0, r0, r7
 8002368:	4540      	cmp	r0, r8
 800236a:	d9f5      	bls.n	8002358 <HAL_RCC_ClockConfig+0xe8>
 800236c:	e7e7      	b.n	800233e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236e:	f7fe ff9b 	bl	80012a8 <HAL_GetTick>
 8002372:	1bc0      	subs	r0, r0, r7
 8002374:	4540      	cmp	r0, r8
 8002376:	d8e2      	bhi.n	800233e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	f013 0f0c 	tst.w	r3, #12
 800237e:	d1f6      	bne.n	800236e <HAL_RCC_ClockConfig+0xfe>
 8002380:	e785      	b.n	800228e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	6813      	ldr	r3, [r2, #0]
 8002384:	f023 0307 	bic.w	r3, r3, #7
 8002388:	4333      	orrs	r3, r6
 800238a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	429e      	cmp	r6, r3
 8002394:	d1a9      	bne.n	80022ea <HAL_RCC_ClockConfig+0x7a>
 8002396:	e780      	b.n	800229a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	6863      	ldr	r3, [r4, #4]
 800239a:	68e9      	ldr	r1, [r5, #12]
 800239c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6063      	str	r3, [r4, #4]
 80023a4:	e77e      	b.n	80022a4 <HAL_RCC_ClockConfig+0x34>
 80023a6:	bf00      	nop
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08006cfb 	.word	0x08006cfb
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_RCC_GetHCLKFreq>:
}
 80023b8:	4b01      	ldr	r3, [pc, #4]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80023d2:	6810      	ldr	r0, [r2, #0]
}    
 80023d4:	40d8      	lsrs	r0, r3
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08006d0b 	.word	0x08006d0b
 80023e0:	20000008 	.word	0x20000008

080023e4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023f2:	6810      	ldr	r0, [r2, #0]
} 
 80023f4:	40d8      	lsrs	r0, r3
 80023f6:	4770      	bx	lr
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08006d0b 	.word	0x08006d0b
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002404:	6803      	ldr	r3, [r0, #0]
{
 8002406:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800240a:	07d9      	lsls	r1, r3, #31
{
 800240c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800240e:	d520      	bpl.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002410:	4c35      	ldr	r4, [pc, #212]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002412:	69e3      	ldr	r3, [r4, #28]
 8002414:	00da      	lsls	r2, r3, #3
 8002416:	d432      	bmi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002418:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	69e3      	ldr	r3, [r4, #28]
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	61e3      	str	r3, [r4, #28]
 8002422:	69e3      	ldr	r3, [r4, #28]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	4e2f      	ldr	r6, [pc, #188]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	d526      	bpl.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002434:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002436:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800243a:	d136      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800243c:	6a23      	ldr	r3, [r4, #32]
 800243e:	686a      	ldr	r2, [r5, #4]
 8002440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002444:	4313      	orrs	r3, r2
 8002446:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002448:	b11f      	cbz	r7, 8002452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	69e3      	ldr	r3, [r4, #28]
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002452:	6828      	ldr	r0, [r5, #0]
 8002454:	0783      	lsls	r3, r0, #30
 8002456:	d506      	bpl.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800245a:	68a9      	ldr	r1, [r5, #8]
 800245c:	6853      	ldr	r3, [r2, #4]
 800245e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002462:	430b      	orrs	r3, r1
 8002464:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002466:	f010 0010 	ands.w	r0, r0, #16
 800246a:	d01b      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800246e:	68e9      	ldr	r1, [r5, #12]
 8002470:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002472:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002474:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002478:	430b      	orrs	r3, r1
 800247a:	6053      	str	r3, [r2, #4]
 800247c:	e012      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2700      	movs	r7, #0
 8002480:	e7d4      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	6833      	ldr	r3, [r6, #0]
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800248a:	f7fe ff0d 	bl	80012a8 <HAL_GetTick>
 800248e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	6833      	ldr	r3, [r6, #0]
 8002492:	05d8      	lsls	r0, r3, #23
 8002494:	d4ce      	bmi.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe ff07 	bl	80012a8 <HAL_GetTick>
 800249a:	eba0 0008 	sub.w	r0, r0, r8
 800249e:	2864      	cmp	r0, #100	; 0x64
 80024a0:	d9f6      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80024a2:	2003      	movs	r0, #3
}
 80024a4:	b002      	add	sp, #8
 80024a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024aa:	686a      	ldr	r2, [r5, #4]
 80024ac:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d0c3      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80024b4:	2001      	movs	r0, #1
 80024b6:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024bc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80024c4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024c6:	07d9      	lsls	r1, r3, #31
 80024c8:	d5b8      	bpl.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80024ca:	f7fe feed 	bl	80012a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80024d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	6a23      	ldr	r3, [r4, #32]
 80024d6:	079a      	lsls	r2, r3, #30
 80024d8:	d4b0      	bmi.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fee5 	bl	80012a8 <HAL_GetTick>
 80024de:	1b80      	subs	r0, r0, r6
 80024e0:	4540      	cmp	r0, r8
 80024e2:	d9f7      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80024e4:	e7dd      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
 80024f0:	42420440 	.word	0x42420440

080024f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 80024fa:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024fc:	ad02      	add	r5, sp, #8
 80024fe:	f103 0610 	add.w	r6, r3, #16
 8002502:	462a      	mov	r2, r5
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	3308      	adds	r3, #8
 800250a:	c203      	stmia	r2!, {r0, r1}
 800250c:	42b3      	cmp	r3, r6
 800250e:	4615      	mov	r5, r2
 8002510:	d1f7      	bne.n	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002512:	2301      	movs	r3, #1
 8002514:	f88d 3004 	strb.w	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800251a:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800251c:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8002520:	d047      	beq.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8002522:	2c10      	cmp	r4, #16
 8002524:	d017      	beq.n	8002556 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8002526:	2c01      	cmp	r4, #1
 8002528:	d14f      	bne.n	80025ca <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800252a:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800252e:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002530:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002532:	4019      	ands	r1, r3
 8002534:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002538:	d044      	beq.n	80025c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002542:	d12d      	bne.n	80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8002544:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002548:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800254a:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800254e:	bf08      	it	eq
 8002550:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8002552:	b006      	add	sp, #24
 8002554:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002558:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002560:	d0f7      	beq.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002562:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8002566:	a806      	add	r0, sp, #24
 8002568:	4402      	add	r2, r0
 800256a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800256e:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002570:	bf41      	itttt	mi
 8002572:	685a      	ldrmi	r2, [r3, #4]
 8002574:	a906      	addmi	r1, sp, #24
 8002576:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800257a:	1852      	addmi	r2, r2, r1
 800257c:	bf44      	itt	mi
 800257e:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002582:	4a15      	ldrmi	r2, [pc, #84]	; (80025d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002584:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002586:	bf4c      	ite	mi
 8002588:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800258c:	4a13      	ldrpl	r2, [pc, #76]	; (80025dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800258e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002590:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002594:	d4dd      	bmi.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8002596:	2303      	movs	r3, #3
 8002598:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800259a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800259e:	e7d8      	b.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a4:	d111      	bne.n	80025ca <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80025a6:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80025a8:	f24f 4024 	movw	r0, #62500	; 0xf424
 80025ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025b0:	e7cd      	b.n	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025b2:	f7ff ff17 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80025be:	3301      	adds	r3, #1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	e7ea      	b.n	800259a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 80025c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025c8:	e7c3      	b.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 80025ca:	2000      	movs	r0, #0
 80025cc:	e7c1      	b.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80025ce:	bf00      	nop
 80025d0:	08005f78 	.word	0x08005f78
 80025d4:	40021000 	.word	0x40021000
 80025d8:	007a1200 	.word	0x007a1200
 80025dc:	003d0900 	.word	0x003d0900

080025e0 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025e0:	6803      	ldr	r3, [r0, #0]
{
 80025e2:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025e4:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80025e6:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025e8:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80025ea:	b295      	uxth	r5, r2
 80025ec:	b28c      	uxth	r4, r1
 80025ee:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80025f0:	bf1d      	ittte	ne
 80025f2:	69d8      	ldrne	r0, [r3, #28]
 80025f4:	b280      	uxthne	r0, r0
 80025f6:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80025fa:	b280      	uxtheq	r0, r0
 80025fc:	bf08      	it	eq
 80025fe:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8002602:	bd30      	pop	{r4, r5, pc}

08002604 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002604:	6803      	ldr	r3, [r0, #0]
 8002606:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800260a:	b29b      	uxth	r3, r3
}
 800260c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002610:	4770      	bx	lr

08002612 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8002612:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002614:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002616:	f000 000f 	and.w	r0, r0, #15
 800261a:	fb02 0003 	mla	r0, r2, r3, r0
}
 800261e:	b2c0      	uxtb	r0, r0
 8002620:	4770      	bx	lr

08002622 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 8002622:	2902      	cmp	r1, #2
{
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 800262a:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 800262e:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 8002632:	d81a      	bhi.n	800266a <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8002634:	434b      	muls	r3, r1
 8002636:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 800263a:	fbb3 f0f6 	udiv	r0, r3, r6
 800263e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002642:	fbb4 f3f3 	udiv	r3, r4, r3
 8002646:	3204      	adds	r2, #4
 8002648:	442a      	add	r2, r5
 800264a:	4410      	add	r0, r2
 800264c:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8002650:	4418      	add	r0, r3
 8002652:	2364      	movs	r3, #100	; 0x64
 8002654:	fbb4 f4f3 	udiv	r4, r4, r3
 8002658:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 800265a:	2307      	movs	r3, #7
 800265c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002660:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002664:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8002666:	b2c0      	uxtb	r0, r0
 8002668:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 800266a:	fb03 f001 	mul.w	r0, r3, r1
 800266e:	fbb0 f0f6 	udiv	r0, r0, r6
 8002672:	3202      	adds	r2, #2
 8002674:	442a      	add	r2, r5
 8002676:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800267a:	4410      	add	r0, r2
 800267c:	2264      	movs	r2, #100	; 0x64
 800267e:	fbb5 f3f3 	udiv	r3, r5, r3
 8002682:	fbb5 f2f2 	udiv	r2, r5, r2
 8002686:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 800268a:	4418      	add	r0, r3
 800268c:	1a80      	subs	r0, r0, r2
 800268e:	e7e4      	b.n	800265a <RTC_WeekDayNum+0x38>

08002690 <RTC_EnterInitMode>:
{
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002694:	f7fe fe08 	bl	80012a8 <HAL_GetTick>
 8002698:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	0692      	lsls	r2, r2, #26
 80026a0:	d505      	bpl.n	80026ae <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026a2:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 80026a4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026a6:	f042 0210 	orr.w	r2, r2, #16
 80026aa:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 80026ac:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80026ae:	f7fe fdfb 	bl	80012a8 <HAL_GetTick>
 80026b2:	1b40      	subs	r0, r0, r5
 80026b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80026b8:	d9ef      	bls.n	800269a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80026ba:	2003      	movs	r0, #3
}
 80026bc:	bd38      	pop	{r3, r4, r5, pc}

080026be <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026be:	6802      	ldr	r2, [r0, #0]
{
 80026c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026c2:	6853      	ldr	r3, [r2, #4]
{
 80026c4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026c6:	f023 0310 	bic.w	r3, r3, #16
 80026ca:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80026cc:	f7fe fdec 	bl	80012a8 <HAL_GetTick>
 80026d0:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	069b      	lsls	r3, r3, #26
 80026d8:	d501      	bpl.n	80026de <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 80026da:	2000      	movs	r0, #0
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80026de:	f7fe fde3 	bl	80012a8 <HAL_GetTick>
 80026e2:	1b40      	subs	r0, r0, r5
 80026e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80026e8:	d9f3      	bls.n	80026d2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80026ea:	2003      	movs	r0, #3
}
 80026ec:	bd38      	pop	{r3, r4, r5, pc}

080026ee <RTC_WriteTimeCounter>:
{
 80026ee:	b538      	push	{r3, r4, r5, lr}
 80026f0:	4605      	mov	r5, r0
 80026f2:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80026f4:	f7ff ffcc 	bl	8002690 <RTC_EnterInitMode>
 80026f8:	b958      	cbnz	r0, 8002712 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80026fe:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002700:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002702:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002704:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002706:	f7ff ffda 	bl	80026be <RTC_ExitInitMode>
    status = HAL_ERROR;
 800270a:	3000      	adds	r0, #0
 800270c:	bf18      	it	ne
 800270e:	2001      	movne	r0, #1
 8002710:	bd38      	pop	{r3, r4, r5, pc}
 8002712:	2001      	movs	r0, #1
}
 8002714:	bd38      	pop	{r3, r4, r5, pc}

08002716 <RTC_WriteAlarmCounter>:
{
 8002716:	b538      	push	{r3, r4, r5, lr}
 8002718:	4605      	mov	r5, r0
 800271a:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800271c:	f7ff ffb8 	bl	8002690 <RTC_EnterInitMode>
 8002720:	b958      	cbnz	r0, 800273a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002726:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002728:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800272a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800272c:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800272e:	f7ff ffc6 	bl	80026be <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002732:	3000      	adds	r0, #0
 8002734:	bf18      	it	ne
 8002736:	2001      	movne	r0, #1
 8002738:	bd38      	pop	{r3, r4, r5, pc}
 800273a:	2001      	movs	r0, #1
}
 800273c:	bd38      	pop	{r3, r4, r5, pc}

0800273e <HAL_RTC_SetTime>:
{
 800273e:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8002740:	4604      	mov	r4, r0
 8002742:	b1e0      	cbz	r0, 800277e <HAL_RTC_SetTime+0x40>
 8002744:	b1d9      	cbz	r1, 800277e <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8002746:	7c03      	ldrb	r3, [r0, #16]
 8002748:	2602      	movs	r6, #2
 800274a:	2b01      	cmp	r3, #1
 800274c:	d046      	beq.n	80027dc <HAL_RTC_SetTime+0x9e>
 800274e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002750:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8002752:	7403      	strb	r3, [r0, #16]
 8002754:	7808      	ldrb	r0, [r1, #0]
 8002756:	784e      	ldrb	r6, [r1, #1]
 8002758:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 800275a:	b992      	cbnz	r2, 8002782 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 800275c:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800275e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8002762:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002764:	fb03 5000 	mla	r0, r3, r0, r5
 8002768:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800276a:	4629      	mov	r1, r5
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff ffbe 	bl	80026ee <RTC_WriteTimeCounter>
 8002772:	4606      	mov	r6, r0
 8002774:	b1b0      	cbz	r0, 80027a4 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002776:	2304      	movs	r3, #4
 8002778:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800277a:	2300      	movs	r3, #0
 800277c:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 800277e:	2601      	movs	r6, #1
 8002780:	e02c      	b.n	80027dc <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002782:	f7ff ff46 	bl	8002612 <RTC_Bcd2ToByte>
 8002786:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002788:	4630      	mov	r0, r6
 800278a:	f7ff ff42 	bl	8002612 <RTC_Bcd2ToByte>
 800278e:	233c      	movs	r3, #60	; 0x3c
 8002790:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002792:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002796:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 800279a:	4608      	mov	r0, r1
 800279c:	f7ff ff39 	bl	8002612 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027a0:	4405      	add	r5, r0
 80027a2:	e7e2      	b.n	800276a <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80027a4:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80027a6:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80027a8:	6853      	ldr	r3, [r2, #4]
 80027aa:	f023 0305 	bic.w	r3, r3, #5
 80027ae:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80027b0:	f7ff ff28 	bl	8002604 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	d00d      	beq.n	80027d4 <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 80027b8:	4285      	cmp	r5, r0
 80027ba:	d90b      	bls.n	80027d4 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027bc:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80027c0:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff ffa6 	bl	8002716 <RTC_WriteAlarmCounter>
 80027ca:	b118      	cbz	r0, 80027d4 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80027cc:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80027ce:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80027d0:	7463      	strb	r3, [r4, #17]
 80027d2:	e7d4      	b.n	800277e <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80027d4:	2301      	movs	r3, #1
 80027d6:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 80027d8:	2300      	movs	r3, #0
 80027da:	7423      	strb	r3, [r4, #16]
}
 80027dc:	4630      	mov	r0, r6
 80027de:	bd70      	pop	{r4, r5, r6, pc}

080027e0 <HAL_RTC_SetDate>:
{
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 80027e4:	4604      	mov	r4, r0
 80027e6:	b358      	cbz	r0, 8002840 <HAL_RTC_SetDate+0x60>
 80027e8:	b351      	cbz	r1, 8002840 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 80027ea:	7c03      	ldrb	r3, [r0, #16]
 80027ec:	2002      	movs	r0, #2
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d027      	beq.n	8002842 <HAL_RTC_SetDate+0x62>
 80027f2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80027f4:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 80027f6:	7423      	strb	r3, [r4, #16]
 80027f8:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80027fa:	bb1a      	cbnz	r2, 8002844 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80027fc:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80027fe:	784b      	ldrb	r3, [r1, #1]
 8002800:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002802:	788b      	ldrb	r3, [r1, #2]
 8002804:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002806:	7ba2      	ldrb	r2, [r4, #14]
 8002808:	7b61      	ldrb	r1, [r4, #13]
 800280a:	7be0      	ldrb	r0, [r4, #15]
 800280c:	f7ff ff09 	bl	8002622 <RTC_WeekDayNum>
 8002810:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002812:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff fee3 	bl	80025e0 <RTC_ReadTimeCounter>
  if (hours > 24U)
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_RTC_SetDate+0xac>)
 800281c:	4298      	cmp	r0, r3
 800281e:	d930      	bls.n	8002882 <HAL_RTC_SetDate+0xa2>
 8002820:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8002824:	fbb0 f5f3 	udiv	r5, r0, r3
 8002828:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800282c:	4620      	mov	r0, r4
 800282e:	4629      	mov	r1, r5
 8002830:	f7ff ff5d 	bl	80026ee <RTC_WriteTimeCounter>
 8002834:	4606      	mov	r6, r0
 8002836:	b188      	cbz	r0, 800285c <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002838:	2304      	movs	r3, #4
 800283a:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 800283c:	2300      	movs	r3, #0
 800283e:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
}
 8002842:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002844:	f7ff fee5 	bl	8002612 <RTC_Bcd2ToByte>
 8002848:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800284a:	7848      	ldrb	r0, [r1, #1]
 800284c:	f7ff fee1 	bl	8002612 <RTC_Bcd2ToByte>
 8002850:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002852:	7888      	ldrb	r0, [r1, #2]
 8002854:	f7ff fedd 	bl	8002612 <RTC_Bcd2ToByte>
 8002858:	73a0      	strb	r0, [r4, #14]
 800285a:	e7d4      	b.n	8002806 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff fed1 	bl	8002604 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002862:	1c43      	adds	r3, r0, #1
 8002864:	d00d      	beq.n	8002882 <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8002866:	4285      	cmp	r5, r0
 8002868:	d90b      	bls.n	8002882 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800286a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800286e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff ff4f 	bl	8002716 <RTC_WriteAlarmCounter>
 8002878:	b118      	cbz	r0, 8002882 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800287a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 800287c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800287e:	7463      	strb	r3, [r4, #17]
 8002880:	e7de      	b.n	8002840 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8002882:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002884:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8002886:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8002888:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	00015f8f 	.word	0x00015f8f

08002890 <HAL_RTC_WaitForSynchro>:
{
 8002890:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002892:	4604      	mov	r4, r0
 8002894:	b1a8      	cbz	r0, 80028c2 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002896:	6802      	ldr	r2, [r0, #0]
 8002898:	6853      	ldr	r3, [r2, #4]
 800289a:	f023 0308 	bic.w	r3, r3, #8
 800289e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80028a0:	f7fe fd02 	bl	80012a8 <HAL_GetTick>
 80028a4:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	071b      	lsls	r3, r3, #28
 80028ac:	d501      	bpl.n	80028b2 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80028ae:	2000      	movs	r0, #0
 80028b0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 80028b2:	f7fe fcf9 	bl	80012a8 <HAL_GetTick>
 80028b6:	1b40      	subs	r0, r0, r5
 80028b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80028bc:	d9f3      	bls.n	80028a6 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80028be:	2003      	movs	r0, #3
}
 80028c0:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080028c8 <HAL_RTC_Init>:
{
 80028c8:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 80028ca:	4604      	mov	r4, r0
 80028cc:	b170      	cbz	r0, 80028ec <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80028ce:	7c43      	ldrb	r3, [r0, #17]
 80028d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028d4:	b913      	cbnz	r3, 80028dc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80028d6:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80028d8:	f000 fb8e 	bl	8002ff8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80028dc:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028de:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80028e0:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028e2:	f7ff ffd5 	bl	8002890 <HAL_RTC_WaitForSynchro>
 80028e6:	b118      	cbz	r0, 80028f0 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028e8:	2304      	movs	r3, #4
 80028ea:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
}
 80028ee:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fecd 	bl	8002690 <RTC_EnterInitMode>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d1f6      	bne.n	80028e8 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80028fa:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80028fc:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80028fe:	6853      	ldr	r3, [r2, #4]
 8002900:	f023 0307 	bic.w	r3, r3, #7
 8002904:	6053      	str	r3, [r2, #4]
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002908:	b118      	cbz	r0, 8002912 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800290a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800290c:	f021 0101 	bic.w	r1, r1, #1
 8002910:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002912:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002914:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8002918:	4303      	orrs	r3, r0
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800291c:	6860      	ldr	r0, [r4, #4]
 800291e:	1c43      	adds	r3, r0, #1
 8002920:	d105      	bne.n	800292e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002922:	2001      	movs	r0, #1
 8002924:	f7ff fde6 	bl	80024f4 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002928:	2800      	cmp	r0, #0
 800292a:	d0dd      	beq.n	80028e8 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 800292c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	6893      	ldr	r3, [r2, #8]
 8002932:	f023 030f 	bic.w	r3, r3, #15
 8002936:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800293a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800293c:	68d3      	ldr	r3, [r2, #12]
 800293e:	b280      	uxth	r0, r0
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	4318      	orrs	r0, r3
 8002946:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff feb8 	bl	80026be <RTC_ExitInitMode>
 800294e:	2301      	movs	r3, #1
 8002950:	b110      	cbz	r0, 8002958 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002952:	2204      	movs	r2, #4
 8002954:	7462      	strb	r2, [r4, #17]
 8002956:	e7c9      	b.n	80028ec <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8002958:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800295a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800295c:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800295e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8002960:	bd10      	pop	{r4, pc}
 8002962:	bf00      	nop
 8002964:	40006c00 	.word	0x40006c00

08002968 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
  tmp += (BackupRegister * 4U);
 8002968:	0089      	lsls	r1, r1, #2
 800296a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800296e:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002972:	b292      	uxth	r2, r2
 8002974:	600a      	str	r2, [r1, #0]
 8002976:	4770      	bx	lr

08002978 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
  backupregister += (BackupRegister * 4U);
 8002978:	0089      	lsls	r1, r1, #2
 800297a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800297e:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8002982:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 8002984:	b280      	uxth	r0, r0
 8002986:	4770      	bx	lr

08002988 <DS2482_Write_Two_Byte>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
HAL_StatusTypeDef DS2482_Write_Two_Byte(uint8_t cmd,uint8_t param)
    {
 8002988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t CMD_DS[2] = {cmd,param};
    return HAL_I2C_Master_Transmit(&hi2c1, 0x18<<1, CMD_DS, 2, 100);
 800298a:	2364      	movs	r3, #100	; 0x64
    uint8_t CMD_DS[2] = {cmd,param};
 800298c:	f88d 000c 	strb.w	r0, [sp, #12]
 8002990:	f88d 100d 	strb.w	r1, [sp, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, 0x18<<1, CMD_DS, 2, 100);
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	aa03      	add	r2, sp, #12
 8002998:	2302      	movs	r3, #2
 800299a:	2130      	movs	r1, #48	; 0x30
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <DS2482_Write_Two_Byte+0x20>)
 800299e:	f7fe ffa9 	bl	80018f4 <HAL_I2C_Master_Transmit>
    }
 80029a2:	b005      	add	sp, #20
 80029a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80029a8:	20000ae0 	.word	0x20000ae0

080029ac <DS2482_Write_One_Byte>:

HAL_StatusTypeDef DS2482_Write_One_Byte(uint8_t cmd)
    {
 80029ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t CMD_DS[1] = {cmd};
    return HAL_I2C_Master_Transmit(&hi2c1, 0x18<<1, CMD_DS, 1, 100);
 80029ae:	2364      	movs	r3, #100	; 0x64
    uint8_t CMD_DS[1] = {cmd};
 80029b0:	aa04      	add	r2, sp, #16
 80029b2:	f802 0d04 	strb.w	r0, [r2, #-4]!
    return HAL_I2C_Master_Transmit(&hi2c1, 0x18<<1, CMD_DS, 1, 100);
 80029b6:	2130      	movs	r1, #48	; 0x30
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4803      	ldr	r0, [pc, #12]	; (80029c8 <DS2482_Write_One_Byte+0x1c>)
 80029bc:	2301      	movs	r3, #1
 80029be:	f7fe ff99 	bl	80018f4 <HAL_I2C_Master_Transmit>
    }
 80029c2:	b005      	add	sp, #20
 80029c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80029c8:	20000ae0 	.word	0x20000ae0

080029cc <DS2482_Read_Byte>:

HAL_StatusTypeDef DS2482_Read_Byte(uint8_t* data)
    {
    return HAL_I2C_Master_Receive(&hi2c1, 0x18<<1, data, 1, 100);
 80029cc:	2364      	movs	r3, #100	; 0x64
    {
 80029ce:	b507      	push	{r0, r1, r2, lr}
    return HAL_I2C_Master_Receive(&hi2c1, 0x18<<1, data, 1, 100);
 80029d0:	4602      	mov	r2, r0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2130      	movs	r1, #48	; 0x30
 80029d6:	2301      	movs	r3, #1
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <DS2482_Read_Byte+0x18>)
 80029da:	f7ff f861 	bl	8001aa0 <HAL_I2C_Master_Receive>
    }
 80029de:	b003      	add	sp, #12
 80029e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80029e4:	20000ae0 	.word	0x20000ae0

080029e8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80029e8:	2305      	movs	r3, #5
{
 80029ea:	b510      	push	{r4, lr}
 80029ec:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80029ee:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029f4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029f6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029f8:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fa:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029fc:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029fe:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a00:	f7ff fa6c 	bl	8001edc <HAL_RCC_OscConfig>
 8002a04:	4601      	mov	r1, r0
 8002a06:	b100      	cbz	r0, 8002a0a <SystemClock_Config+0x22>
 8002a08:	e7fe      	b.n	8002a08 <SystemClock_Config+0x20>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a0a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a0e:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a10:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a12:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a14:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002a16:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a18:	f7ff fc2a 	bl	8002270 <HAL_RCC_ClockConfig>
 8002a1c:	b100      	cbz	r0, 8002a20 <SystemClock_Config+0x38>
 8002a1e:	e7fe      	b.n	8002a1e <SystemClock_Config+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a20:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a24:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a26:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a28:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a2a:	f7ff fceb 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 8002a2e:	4604      	mov	r4, r0
 8002a30:	b100      	cbz	r0, 8002a34 <SystemClock_Config+0x4c>
 8002a32:	e7fe      	b.n	8002a32 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002a34:	f7ff fcc0 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 8002a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a40:	f7fe fc8e 	bl	8001360 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002a44:	2004      	movs	r0, #4
 8002a46:	f7fe fca1 	bl	800138c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a52:	f7fe fc51 	bl	80012f8 <HAL_NVIC_SetPriority>
}
 8002a56:	b014      	add	sp, #80	; 0x50
 8002a58:	bd10      	pop	{r4, pc}
	...

08002a5c <main>:
{
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002a60:	f7fe fc08 	bl	8001274 <HAL_Init>
  SystemClock_Config();
 8002a64:	f7ff ffc0 	bl	80029e8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a68:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <main+0x214>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_VCC_GPIO_Port, OLED_VCC_Pin, GPIO_PIN_SET);
 8002a6a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(OLED_VCC_GPIO_Port, OLED_VCC_Pin, GPIO_PIN_SET);
 8002a6e:	4881      	ldr	r0, [pc, #516]	; (8002c74 <main+0x218>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a70:	f042 0210 	orr.w	r2, r2, #16
 8002a74:	619a      	str	r2, [r3, #24]
 8002a76:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_GND_GPIO_Port, OLED_GND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a78:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	f002 0210 	and.w	r2, r2, #16
 8002a7e:	9202      	str	r2, [sp, #8]
 8002a80:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a82:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a84:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	619a      	str	r2, [r3, #24]
 8002a8c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OLED_VCC_Pin OLED_GND_Pin */
  GPIO_InitStruct.Pin = OLED_VCC_Pin|OLED_GND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a90:	f002 0220 	and.w	r2, r2, #32
 8002a94:	9203      	str	r2, [sp, #12]
 8002a96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	f042 0208 	orr.w	r2, r2, #8
 8002a9e:	619a      	str	r2, [r3, #24]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	f002 0208 	and.w	r2, r2, #8
 8002aa6:	9204      	str	r2, [sp, #16]
 8002aa8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	f042 0204 	orr.w	r2, r2, #4
 8002ab0:	619a      	str	r2, [r3, #24]
 8002ab2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(OLED_VCC_GPIO_Port, OLED_VCC_Pin, GPIO_PIN_SET);
 8002ab4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	9305      	str	r3, [sp, #20]
 8002abc:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(OLED_VCC_GPIO_Port, OLED_VCC_Pin, GPIO_PIN_SET);
 8002abe:	f7fe fd57 	bl	8001570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_GND_GPIO_Port, OLED_GND_Pin, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2120      	movs	r1, #32
 8002ac6:	486b      	ldr	r0, [pc, #428]	; (8002c74 <main+0x218>)
 8002ac8:	f7fe fd52 	bl	8001570 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8002acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	a906      	add	r1, sp, #24
 8002ad2:	4868      	ldr	r0, [pc, #416]	; (8002c74 <main+0x218>)
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8002ad4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ad6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002ada:	f7fe fc69 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_VCC_Pin|OLED_GND_Pin;
 8002ade:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	4864      	ldr	r0, [pc, #400]	; (8002c74 <main+0x218>)
 8002ae2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = OLED_VCC_Pin|OLED_GND_Pin;
 8002ae4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae8:	9507      	str	r5, [sp, #28]
  hi2c1.Init.ClockSpeed = 400000;
 8002aea:	4e63      	ldr	r6, [pc, #396]	; (8002c78 <main+0x21c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f7fe fc60 	bl	80013b0 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8002af0:	4862      	ldr	r0, [pc, #392]	; (8002c7c <main+0x220>)
  hi2c1.Init.ClockSpeed = 400000;
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <main+0x224>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af4:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8002af6:	e880 0048 	stmia.w	r0, {r3, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002afe:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b00:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b02:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b04:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b06:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b08:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b0a:	f7fe fe85 	bl	8001818 <HAL_I2C_Init>
 8002b0e:	b100      	cbz	r0, 8002b12 <main+0xb6>
 8002b10:	e7fe      	b.n	8002b10 <main+0xb4>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b16:	f44f 7380 	mov.w	r3, #256	; 0x100
  hrtc.Instance = RTC;
 8002b1a:	4c5a      	ldr	r4, [pc, #360]	; (8002c84 <main+0x228>)
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002b1c:	495a      	ldr	r1, [pc, #360]	; (8002c88 <main+0x22c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b1e:	4620      	mov	r0, r4
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002b20:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b24:	f7ff fed0 	bl	80028c8 <HAL_RTC_Init>
 8002b28:	4606      	mov	r6, r0
 8002b2a:	b100      	cbz	r0, 8002b2e <main+0xd2>
 8002b2c:	e7fe      	b.n	8002b2c <main+0xd0>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 8002b2e:	4629      	mov	r1, r5
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7ff ff21 	bl	8002978 <HAL_RTCEx_BKUPRead>
 8002b36:	f243 27f2 	movw	r7, #13042	; 0x32f2
 8002b3a:	42b8      	cmp	r0, r7
 8002b3c:	d025      	beq.n	8002b8a <main+0x12e>
  sTime.Hours = 4;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 51;
 8002b44:	2333      	movs	r3, #51	; 0x33
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002b46:	4632      	mov	r2, r6
 8002b48:	a901      	add	r1, sp, #4
 8002b4a:	4620      	mov	r0, r4
  sTime.Minutes = 51;
 8002b4c:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0;
 8002b50:	f88d 6006 	strb.w	r6, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002b54:	f7ff fdf3 	bl	800273e <HAL_RTC_SetTime>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	b100      	cbz	r0, 8002b5e <main+0x102>
 8002b5c:	e7fe      	b.n	8002b5c <main+0x100>
  DateToUpdate.Month = RTC_MONTH_MARCH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f88d 3019 	strb.w	r3, [sp, #25]
  DateToUpdate.Date = 5;
 8002b64:	2305      	movs	r3, #5
 8002b66:	f88d 301a 	strb.w	r3, [sp, #26]
  DateToUpdate.Year = 18;
 8002b6a:	2312      	movs	r3, #18
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002b6c:	a906      	add	r1, sp, #24
 8002b6e:	4620      	mov	r0, r4
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b70:	f88d 5018 	strb.w	r5, [sp, #24]
  DateToUpdate.Year = 18;
 8002b74:	f88d 301b 	strb.w	r3, [sp, #27]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002b78:	f7ff fe32 	bl	80027e0 <HAL_RTC_SetDate>
 8002b7c:	b100      	cbz	r0, 8002b80 <main+0x124>
 8002b7e:	e7fe      	b.n	8002b7e <main+0x122>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32F2);
 8002b80:	463a      	mov	r2, r7
 8002b82:	4629      	mov	r1, r5
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff feef 	bl	8002968 <HAL_RTCEx_BKUPWrite>
  ssd1306_Init();
 8002b8a:	f000 f8db 	bl	8002d44 <ssd1306_Init>
	    temp *= 256.0;
 8002b8e:	f04f 4587 	mov.w	r5, #1132462080	; 0x43800000
	    DS2482_Write_One_Byte(OW_RESET_CMD);
 8002b92:	20b4      	movs	r0, #180	; 0xb4
 8002b94:	f7ff ff0a 	bl	80029ac <DS2482_Write_One_Byte>
	    HAL_Delay(1);
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f7fe fb8b 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_Two_Byte(OW_WRITE_BYTE_CMD,skip_ROM);
 8002b9e:	21cc      	movs	r1, #204	; 0xcc
 8002ba0:	20a5      	movs	r0, #165	; 0xa5
 8002ba2:	f7ff fef1 	bl	8002988 <DS2482_Write_Two_Byte>
	    HAL_Delay(1);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7fe fb84 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_Two_Byte(OW_WRITE_BYTE_CMD,convert_T);
 8002bac:	2144      	movs	r1, #68	; 0x44
 8002bae:	20a5      	movs	r0, #165	; 0xa5
 8002bb0:	f7ff feea 	bl	8002988 <DS2482_Write_Two_Byte>
	    HAL_Delay(1000);
 8002bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bb8:	f7fe fb7c 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_One_Byte(OW_RESET_CMD);
 8002bbc:	20b4      	movs	r0, #180	; 0xb4
 8002bbe:	f7ff fef5 	bl	80029ac <DS2482_Write_One_Byte>
	    HAL_Delay(1);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f7fe fb76 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_Two_Byte(OW_WRITE_BYTE_CMD,skip_ROM);
 8002bc8:	21cc      	movs	r1, #204	; 0xcc
 8002bca:	20a5      	movs	r0, #165	; 0xa5
 8002bcc:	f7ff fedc 	bl	8002988 <DS2482_Write_Two_Byte>
	    HAL_Delay(1);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7fe fb6f 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_Two_Byte(OW_WRITE_BYTE_CMD,read_scratchpad);
 8002bd6:	21be      	movs	r1, #190	; 0xbe
 8002bd8:	20a5      	movs	r0, #165	; 0xa5
 8002bda:	f7ff fed5 	bl	8002988 <DS2482_Write_Two_Byte>
	    HAL_Delay(1);
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7fe fb68 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_One_Byte(OW_READ_BYTE_CMD);
 8002be4:	2096      	movs	r0, #150	; 0x96
 8002be6:	f7ff fee1 	bl	80029ac <DS2482_Write_One_Byte>
	    HAL_Delay(1);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f7fe fb62 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_Two_Byte(SET_READ_POINTER_CMD,READ_DATA_REGISTER_PTR);
 8002bf0:	21e1      	movs	r1, #225	; 0xe1
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	f7ff fec8 	bl	8002988 <DS2482_Write_Two_Byte>
	    DS2482_Read_Byte(&temp1);
 8002bf8:	f10d 0003 	add.w	r0, sp, #3
 8002bfc:	f7ff fee6 	bl	80029cc <DS2482_Read_Byte>
	    DS2482_Write_One_Byte(OW_READ_BYTE_CMD);
 8002c00:	2096      	movs	r0, #150	; 0x96
 8002c02:	f7ff fed3 	bl	80029ac <DS2482_Write_One_Byte>
	    HAL_Delay(1);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7fe fb54 	bl	80012b4 <HAL_Delay>
	    DS2482_Write_Two_Byte(SET_READ_POINTER_CMD,READ_DATA_REGISTER_PTR);
 8002c0c:	21e1      	movs	r1, #225	; 0xe1
 8002c0e:	4608      	mov	r0, r1
 8002c10:	f7ff feba 	bl	8002988 <DS2482_Write_Two_Byte>
	    DS2482_Read_Byte(&temp2);
 8002c14:	a801      	add	r0, sp, #4
 8002c16:	f7ff fed9 	bl	80029cc <DS2482_Read_Byte>
	    temp = temp2;
 8002c1a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002c1e:	f7fd ffe5 	bl	8000bec <__aeabi_ui2f>
	    temp *= 256.0;
 8002c22:	4629      	mov	r1, r5
 8002c24:	f7fe f83a 	bl	8000c9c <__aeabi_fmul>
 8002c28:	4604      	mov	r4, r0
	    temp += temp1;
 8002c2a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002c2e:	f7fd ffe1 	bl	8000bf4 <__aeabi_i2f>
 8002c32:	4621      	mov	r1, r4
 8002c34:	f7fd ff2a 	bl	8000a8c <__addsf3>
	    ssd1306_SetCursor(0, 0);
 8002c38:	2100      	movs	r1, #0
	    temp += temp1;
 8002c3a:	4604      	mov	r4, r0
	    ssd1306_SetCursor(0, 0);
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	f000 f96b 	bl	8002f18 <ssd1306_SetCursor>
	    temp *= 0.0625;
 8002c42:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fe f828 	bl	8000c9c <__aeabi_fmul>
	    sprintf(temp_s,"%0.2f" , temp);
 8002c4c:	f7fd fbec 	bl	8000428 <__aeabi_f2d>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	a806      	add	r0, sp, #24
 8002c56:	490d      	ldr	r1, [pc, #52]	; (8002c8c <main+0x230>)
 8002c58:	f000 fa74 	bl	8003144 <sprintf>
	    ssd1306_WriteString(temp_s, Font_11x18, White);
 8002c5c:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <main+0x234>)
 8002c5e:	2301      	movs	r3, #1
 8002c60:	ca06      	ldmia	r2, {r1, r2}
 8002c62:	a806      	add	r0, sp, #24
 8002c64:	f000 f942 	bl	8002eec <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8002c68:	f000 f83e 	bl	8002ce8 <ssd1306_UpdateScreen>
 8002c6c:	e791      	b.n	8002b92 <main+0x136>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40010c00 	.word	0x40010c00
 8002c78:	00061a80 	.word	0x00061a80
 8002c7c:	20000ae0 	.word	0x20000ae0
 8002c80:	40005400 	.word	0x40005400
 8002c84:	20000b4c 	.word	0x20000b4c
 8002c88:	40002800 	.word	0x40002800
 8002c8c:	08006ce4 	.word	0x08006ce4
 8002c90:	20000000 	.word	0x20000000

08002c94 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002c94:	e7fe      	b.n	8002c94 <_Error_Handler>
	...

08002c98 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
 void ssd1306_WriteCommand(uint8_t command)
{
 8002c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	 HAL_StatusTypeDef status;
	 status=HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,100);
 8002c9a:	2364      	movs	r3, #100	; 0x64
{
 8002c9c:	aa06      	add	r2, sp, #24
 8002c9e:	f802 0d01 	strb.w	r0, [r2, #-1]!
	 status=HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,100);
 8002ca2:	9302      	str	r3, [sp, #8]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2178      	movs	r1, #120	; 0x78
 8002ca8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002cac:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <ssd1306_WriteCommand+0x2c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f7ff f878 	bl	8001da4 <HAL_I2C_Mem_Write>
	if(status!=HAL_OK)
 8002cb4:	b118      	cbz	r0, 8002cbe <ssd1306_WriteCommand+0x26>
	{
		Error_Handler();
 8002cb6:	2119      	movs	r1, #25
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <ssd1306_WriteCommand+0x30>)
 8002cba:	f7ff ffeb 	bl	8002c94 <_Error_Handler>
	}
}
 8002cbe:	b007      	add	sp, #28
 8002cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cc4:	20000ae0 	.word	0x20000ae0
 8002cc8:	08006cea 	.word	0x08006cea

08002ccc <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) 
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002ccc:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002cce:	4905      	ldr	r1, [pc, #20]	; (8002ce4 <ssd1306_Fill+0x18>)
 8002cd0:	1c02      	adds	r2, r0, #0
 8002cd2:	bf18      	it	ne
 8002cd4:	2201      	movne	r2, #1
 8002cd6:	4252      	negs	r2, r2
 8002cd8:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce0:	d1f6      	bne.n	8002cd0 <ssd1306_Fill+0x4>
	}
}
 8002ce2:	4770      	bx	lr
 8002ce4:	2000069e 	.word	0x2000069e

08002ce8 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8002ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cea:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
		if(HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100)!=HAL_OK)
 8002cec:	4d12      	ldr	r5, [pc, #72]	; (8002d38 <ssd1306_UpdateScreen+0x50>)
 8002cee:	4e13      	ldr	r6, [pc, #76]	; (8002d3c <ssd1306_UpdateScreen+0x54>)
		{
			Error_Handler();
 8002cf0:	4f13      	ldr	r7, [pc, #76]	; (8002d40 <ssd1306_UpdateScreen+0x58>)
{
 8002cf2:	b085      	sub	sp, #20
		ssd1306_WriteCommand(0xB0 + i);
 8002cf4:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8002cf8:	b2c0      	uxtb	r0, r0
 8002cfa:	f7ff ffcd 	bl	8002c98 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7ff ffca 	bl	8002c98 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8002d04:	2010      	movs	r0, #16
 8002d06:	f7ff ffc7 	bl	8002c98 <ssd1306_WriteCommand>
		if(HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100)!=HAL_OK)
 8002d0a:	2364      	movs	r3, #100	; 0x64
 8002d0c:	9302      	str	r3, [sp, #8]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	eb05 13c4 	add.w	r3, r5, r4, lsl #7
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2178      	movs	r1, #120	; 0x78
 8002d1e:	4630      	mov	r0, r6
 8002d20:	f7ff f840 	bl	8001da4 <HAL_I2C_Mem_Write>
 8002d24:	b118      	cbz	r0, 8002d2e <ssd1306_UpdateScreen+0x46>
			Error_Handler();
 8002d26:	2172      	movs	r1, #114	; 0x72
 8002d28:	4638      	mov	r0, r7
 8002d2a:	f7ff ffb3 	bl	8002c94 <_Error_Handler>
 8002d2e:	3401      	adds	r4, #1
	for (i = 0; i < 8; i++) {
 8002d30:	2c08      	cmp	r4, #8
 8002d32:	d1df      	bne.n	8002cf4 <ssd1306_UpdateScreen+0xc>
		}
	}
}
 8002d34:	b005      	add	sp, #20
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2000069e 	.word	0x2000069e
 8002d3c:	20000ae0 	.word	0x20000ae0
 8002d40:	08006cea 	.word	0x08006cea

08002d44 <ssd1306_Init>:
{	
 8002d44:	b508      	push	{r3, lr}
	ssd1306_WriteCommand(0xAE); //display off
 8002d46:	20ae      	movs	r0, #174	; 0xae
 8002d48:	f7ff ffa6 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002d4c:	2020      	movs	r0, #32
 8002d4e:	f7ff ffa3 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002d52:	2010      	movs	r0, #16
 8002d54:	f7ff ffa0 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002d58:	20b0      	movs	r0, #176	; 0xb0
 8002d5a:	f7ff ff9d 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002d5e:	20c8      	movs	r0, #200	; 0xc8
 8002d60:	f7ff ff9a 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7ff ff97 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8002d6a:	2010      	movs	r0, #16
 8002d6c:	f7ff ff94 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8002d70:	2040      	movs	r0, #64	; 0x40
 8002d72:	f7ff ff91 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8002d76:	2081      	movs	r0, #129	; 0x81
 8002d78:	f7ff ff8e 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8002d7c:	20ff      	movs	r0, #255	; 0xff
 8002d7e:	f7ff ff8b 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8002d82:	20a1      	movs	r0, #161	; 0xa1
 8002d84:	f7ff ff88 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8002d88:	20a6      	movs	r0, #166	; 0xa6
 8002d8a:	f7ff ff85 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8002d8e:	20a8      	movs	r0, #168	; 0xa8
 8002d90:	f7ff ff82 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8002d94:	203f      	movs	r0, #63	; 0x3f
 8002d96:	f7ff ff7f 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d9a:	20a4      	movs	r0, #164	; 0xa4
 8002d9c:	f7ff ff7c 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8002da0:	20d3      	movs	r0, #211	; 0xd3
 8002da2:	f7ff ff79 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7ff ff76 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002dac:	20d5      	movs	r0, #213	; 0xd5
 8002dae:	f7ff ff73 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002db2:	20f0      	movs	r0, #240	; 0xf0
 8002db4:	f7ff ff70 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002db8:	20d9      	movs	r0, #217	; 0xd9
 8002dba:	f7ff ff6d 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8002dbe:	2022      	movs	r0, #34	; 0x22
 8002dc0:	f7ff ff6a 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8002dc4:	20da      	movs	r0, #218	; 0xda
 8002dc6:	f7ff ff67 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8002dca:	2012      	movs	r0, #18
 8002dcc:	f7ff ff64 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002dd0:	20db      	movs	r0, #219	; 0xdb
 8002dd2:	f7ff ff61 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002dd6:	2020      	movs	r0, #32
 8002dd8:	f7ff ff5e 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002ddc:	208d      	movs	r0, #141	; 0x8d
 8002dde:	f7ff ff5b 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8002de2:	2014      	movs	r0, #20
 8002de4:	f7ff ff58 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002de8:	20af      	movs	r0, #175	; 0xaf
 8002dea:	f7ff ff55 	bl	8002c98 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7ff ff6c 	bl	8002ccc <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002df4:	f7ff ff78 	bl	8002ce8 <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8002df8:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <ssd1306_Init+0xc4>)
	SSD1306.Initialized = 1;
 8002dfe:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8002e00:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002e02:	805a      	strh	r2, [r3, #2]
}
 8002e04:	bd08      	pop	{r3, pc}
 8002e06:	bf00      	nop
 8002e08:	20000698 	.word	0x20000698

08002e0c <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8002e0c:	0603      	lsls	r3, r0, #24
{
 8002e0e:	b510      	push	{r4, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8002e10:	d41a      	bmi.n	8002e48 <ssd1306_DrawPixel+0x3c>
 8002e12:	293f      	cmp	r1, #63	; 0x3f
 8002e14:	d818      	bhi.n	8002e48 <ssd1306_DrawPixel+0x3c>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <ssd1306_DrawPixel+0x40>)
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	b113      	cbz	r3, 8002e22 <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 8002e1c:	fab2 f282 	clz	r2, r2
 8002e20:	0952      	lsrs	r2, r2, #5
 8002e22:	08cc      	lsrs	r4, r1, #3
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 8002e24:	2a01      	cmp	r2, #1
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <ssd1306_DrawPixel+0x44>)
 8002e28:	f001 0107 	and.w	r1, r1, #7
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e2c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == White)
 8002e30:	d104      	bne.n	8002e3c <ssd1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e32:	408a      	lsls	r2, r1
 8002e34:	5c19      	ldrb	r1, [r3, r0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	541a      	strb	r2, [r3, r0]
 8002e3a:	bd10      	pop	{r4, pc}
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	408a      	lsls	r2, r1
 8002e40:	5c19      	ldrb	r1, [r3, r0]
 8002e42:	ea21 0102 	bic.w	r1, r1, r2
 8002e46:	5419      	strb	r1, [r3, r0]
 8002e48:	bd10      	pop	{r4, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000698 	.word	0x20000698
 8002e50:	2000069e 	.word	0x2000069e

08002e54 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	4607      	mov	r7, r0
 8002e5c:	a806      	add	r0, sp, #24
 8002e5e:	e900 0006 	stmdb	r0, {r1, r2}
 8002e62:	469b      	mov	fp, r3
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <ssd1306_WriteChar+0x94>)
 8002e66:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8002e6a:	881c      	ldrh	r4, [r3, #0]
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	eb04 0209 	add.w	r2, r4, r9
 8002e72:	2a7f      	cmp	r2, #127	; 0x7f
 8002e74:	dc36      	bgt.n	8002ee4 <ssd1306_WriteChar+0x90>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002e76:	885b      	ldrh	r3, [r3, #2]
 8002e78:	f89d a011 	ldrb.w	sl, [sp, #17]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002e82:	2a3f      	cmp	r2, #63	; 0x3f
 8002e84:	dc2e      	bgt.n	8002ee4 <ssd1306_WriteChar+0x90>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002e86:	2600      	movs	r6, #0
 8002e88:	f1a7 0220 	sub.w	r2, r7, #32
 8002e8c:	fb0a f302 	mul.w	r3, sl, r2
 8002e90:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font.FontHeight; i++)
 8002e92:	4556      	cmp	r6, sl
 8002e94:	d306      	bcc.n	8002ea4 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 8002e96:	9b01      	ldr	r3, [sp, #4]
 8002e98:	444c      	add	r4, r9
 8002e9a:	801c      	strh	r4, [r3, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	b007      	add	sp, #28
 8002ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8002ea4:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002ea6:	9b03      	ldr	r3, [sp, #12]
 8002ea8:	9905      	ldr	r1, [sp, #20]
 8002eaa:	18f2      	adds	r2, r6, r3
 8002eac:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8002eb0:	9302      	str	r3, [sp, #8]
 8002eb2:	9b00      	ldr	r3, [sp, #0]
 8002eb4:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002eb8:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8002ebc:	454d      	cmp	r5, r9
 8002ebe:	d301      	bcc.n	8002ec4 <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7e6      	b.n	8002e92 <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000) 
 8002ec4:	9b02      	ldr	r3, [sp, #8]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002ec6:	1928      	adds	r0, r5, r4
			if ((b << j) & 0x8000) 
 8002ec8:	fa03 f205 	lsl.w	r2, r3, r5
 8002ecc:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002ece:	bf56      	itet	pl
 8002ed0:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002ed4:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002ed6:	0952      	lsrpl	r2, r2, #5
 8002ed8:	4641      	mov	r1, r8
 8002eda:	b2c0      	uxtb	r0, r0
 8002edc:	f7ff ff96 	bl	8002e0c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	e7eb      	b.n	8002ebc <ssd1306_WriteChar+0x68>
		return 0;
 8002ee4:	2700      	movs	r7, #0
 8002ee6:	e7d9      	b.n	8002e9c <ssd1306_WriteChar+0x48>
 8002ee8:	20000698 	.word	0x20000698

08002eec <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8002eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eee:	461f      	mov	r7, r3
 8002ef0:	466d      	mov	r5, sp
 8002ef2:	e88d 0006 	stmia.w	sp, {r1, r2}
 8002ef6:	1e46      	subs	r6, r0, #1
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8002ef8:	7874      	ldrb	r4, [r6, #1]
 8002efa:	b14c      	cbz	r4, 8002f10 <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002efc:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002f00:	4620      	mov	r0, r4
 8002f02:	463b      	mov	r3, r7
 8002f04:	f7ff ffa6 	bl	8002e54 <ssd1306_WriteChar>
 8002f08:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8002f0c:	42a0      	cmp	r0, r4
 8002f0e:	d0f3      	beq.n	8002ef8 <ssd1306_WriteString+0xc>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 8002f10:	4620      	mov	r0, r4
 8002f12:	b003      	add	sp, #12
 8002f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f18 <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002f18:	4b01      	ldr	r3, [pc, #4]	; (8002f20 <ssd1306_SetCursor+0x8>)
 8002f1a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002f1c:	8059      	strh	r1, [r3, #2]
 8002f1e:	4770      	bx	lr
 8002f20:	20000698 	.word	0x20000698

08002f24 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_MspInit+0x88>)
{
 8002f26:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f28:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	619a      	str	r2, [r3, #24]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3c:	f7fe f9ca 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	f06f 000b 	mvn.w	r0, #11
 8002f46:	4611      	mov	r1, r2
 8002f48:	f7fe f9d6 	bl	80012f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f06f 000a 	mvn.w	r0, #10
 8002f52:	4611      	mov	r1, r2
 8002f54:	f7fe f9d0 	bl	80012f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f06f 0009 	mvn.w	r0, #9
 8002f5e:	4611      	mov	r1, r2
 8002f60:	f7fe f9ca 	bl	80012f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	f06f 0004 	mvn.w	r0, #4
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	f7fe f9c4 	bl	80012f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002f70:	2200      	movs	r2, #0
 8002f72:	f06f 0003 	mvn.w	r0, #3
 8002f76:	4611      	mov	r1, r2
 8002f78:	f7fe f9be 	bl	80012f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f06f 0001 	mvn.w	r0, #1
 8002f82:	4611      	mov	r1, r2
 8002f84:	f7fe f9b8 	bl	80012f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8e:	4611      	mov	r1, r2
 8002f90:	f7fe f9b2 	bl	80012f8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_MspInit+0x8c>)
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002fa4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa6:	b003      	add	sp, #12
 8002fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010000 	.word	0x40010000

08002fb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002fb6:	6802      	ldr	r2, [r0, #0]
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_I2C_MspInit+0x3c>)
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d114      	bne.n	8002fe8 <HAL_I2C_MspInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fbe:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8002fc2:	69da      	ldr	r2, [r3, #28]
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc4:	a902      	add	r1, sp, #8
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fc6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002fca:	61da      	str	r2, [r3, #28]
 8002fcc:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	4809      	ldr	r0, [pc, #36]	; (8002ff4 <HAL_I2C_MspInit+0x40>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002fd8:	23c0      	movs	r3, #192	; 0xc0
 8002fda:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fdc:	2312      	movs	r3, #18
 8002fde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	f7fe f9e4 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fe8:	b007      	add	sp, #28
 8002fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fee:	bf00      	nop
 8002ff0:	40005400 	.word	0x40005400
 8002ff4:	40010c00 	.word	0x40010c00

08002ff8 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ff8:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RTC_MspInit+0x30>)
 8002ffc:	6802      	ldr	r2, [r0, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d10e      	bne.n	8003020 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003002:	f7fe ff65 	bl	8001ed0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RTC_MspInit+0x34>)
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800300e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003010:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <HAL_RTC_MspInit+0x38>)
 800301e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003020:	b003      	add	sp, #12
 8003022:	f85d fb04 	ldr.w	pc, [sp], #4
 8003026:	bf00      	nop
 8003028:	40002800 	.word	0x40002800
 800302c:	40021000 	.word	0x40021000
 8003030:	4242043c 	.word	0x4242043c

08003034 <NMI_Handler>:
 8003034:	4770      	bx	lr

08003036 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003036:	e7fe      	b.n	8003036 <HardFault_Handler>

08003038 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003038:	e7fe      	b.n	8003038 <MemManage_Handler>

0800303a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800303a:	e7fe      	b.n	800303a <BusFault_Handler>

0800303c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800303c:	e7fe      	b.n	800303c <UsageFault_Handler>

0800303e <SVC_Handler>:
 800303e:	4770      	bx	lr

08003040 <DebugMon_Handler>:
 8003040:	4770      	bx	lr

08003042 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003042:	4770      	bx	lr

08003044 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003046:	f7fe f927 	bl	8001298 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800304a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800304e:	f7fe b9aa 	b.w	80013a6 <HAL_SYSTICK_IRQHandler>
	...

08003054 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <SystemInit+0x40>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <SystemInit+0x44>)
 8003062:	400a      	ands	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800306c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003070:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003078:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003080:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003082:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003086:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <SystemInit+0x48>)
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	f8ff0000 	.word	0xf8ff0000
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030a2:	e003      	b.n	80030ac <LoopCopyDataInit>

080030a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030aa:	3104      	adds	r1, #4

080030ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030ac:	480a      	ldr	r0, [pc, #40]	; (80030d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030b4:	d3f6      	bcc.n	80030a4 <CopyDataInit>
  ldr r2, =_sbss
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030b8:	e002      	b.n	80030c0 <LoopFillZerobss>

080030ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030bc:	f842 3b04 	str.w	r3, [r2], #4

080030c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030c4:	d3f9      	bcc.n	80030ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030c6:	f7ff ffc5 	bl	8003054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ca:	f000 f80f 	bl	80030ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030ce:	f7ff fcc5 	bl	8002a5c <main>
  bx lr
 80030d2:	4770      	bx	lr
  ldr r3, =_sidata
 80030d4:	08006f90 	.word	0x08006f90
  ldr r0, =_sdata
 80030d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030dc:	2000067c 	.word	0x2000067c
  ldr r2, =_sbss
 80030e0:	2000067c 	.word	0x2000067c
  ldr r3, = _ebss
 80030e4:	20000b78 	.word	0x20000b78

080030e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC1_2_IRQHandler>
	...

080030ec <__libc_init_array>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	2500      	movs	r5, #0
 80030f0:	4e0c      	ldr	r6, [pc, #48]	; (8003124 <__libc_init_array+0x38>)
 80030f2:	4c0d      	ldr	r4, [pc, #52]	; (8003128 <__libc_init_array+0x3c>)
 80030f4:	1ba4      	subs	r4, r4, r6
 80030f6:	10a4      	asrs	r4, r4, #2
 80030f8:	42a5      	cmp	r5, r4
 80030fa:	d109      	bne.n	8003110 <__libc_init_array+0x24>
 80030fc:	f002 ff28 	bl	8005f50 <_init>
 8003100:	2500      	movs	r5, #0
 8003102:	4e0a      	ldr	r6, [pc, #40]	; (800312c <__libc_init_array+0x40>)
 8003104:	4c0a      	ldr	r4, [pc, #40]	; (8003130 <__libc_init_array+0x44>)
 8003106:	1ba4      	subs	r4, r4, r6
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	42a5      	cmp	r5, r4
 800310c:	d105      	bne.n	800311a <__libc_init_array+0x2e>
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003114:	4798      	blx	r3
 8003116:	3501      	adds	r5, #1
 8003118:	e7ee      	b.n	80030f8 <__libc_init_array+0xc>
 800311a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800311e:	4798      	blx	r3
 8003120:	3501      	adds	r5, #1
 8003122:	e7f2      	b.n	800310a <__libc_init_array+0x1e>
 8003124:	08006f88 	.word	0x08006f88
 8003128:	08006f88 	.word	0x08006f88
 800312c:	08006f88 	.word	0x08006f88
 8003130:	08006f8c 	.word	0x08006f8c

08003134 <memset>:
 8003134:	4603      	mov	r3, r0
 8003136:	4402      	add	r2, r0
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	f803 1b01 	strb.w	r1, [r3], #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <sprintf>:
 8003144:	b40e      	push	{r1, r2, r3}
 8003146:	f44f 7102 	mov.w	r1, #520	; 0x208
 800314a:	b500      	push	{lr}
 800314c:	b09c      	sub	sp, #112	; 0x70
 800314e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003152:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003156:	9104      	str	r1, [sp, #16]
 8003158:	9107      	str	r1, [sp, #28]
 800315a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800315e:	ab1d      	add	r3, sp, #116	; 0x74
 8003160:	9002      	str	r0, [sp, #8]
 8003162:	9006      	str	r0, [sp, #24]
 8003164:	4808      	ldr	r0, [pc, #32]	; (8003188 <sprintf+0x44>)
 8003166:	f853 2b04 	ldr.w	r2, [r3], #4
 800316a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	a902      	add	r1, sp, #8
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	f000 f80a 	bl	800318c <_svfprintf_r>
 8003178:	2200      	movs	r2, #0
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	b01c      	add	sp, #112	; 0x70
 8003180:	f85d eb04 	ldr.w	lr, [sp], #4
 8003184:	b003      	add	sp, #12
 8003186:	4770      	bx	lr
 8003188:	2000000c 	.word	0x2000000c

0800318c <_svfprintf_r>:
 800318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003190:	b0bf      	sub	sp, #252	; 0xfc
 8003192:	4689      	mov	r9, r1
 8003194:	4615      	mov	r5, r2
 8003196:	461f      	mov	r7, r3
 8003198:	4682      	mov	sl, r0
 800319a:	f001 fe29 	bl	8004df0 <_localeconv_r>
 800319e:	6803      	ldr	r3, [r0, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	9311      	str	r3, [sp, #68]	; 0x44
 80031a4:	f7fc ffd4 	bl	8000150 <strlen>
 80031a8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80031ac:	900a      	str	r0, [sp, #40]	; 0x28
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	d518      	bpl.n	80031e4 <_svfprintf_r+0x58>
 80031b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80031b6:	b9ab      	cbnz	r3, 80031e4 <_svfprintf_r+0x58>
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	4650      	mov	r0, sl
 80031bc:	f001 fe2e 	bl	8004e1c <_malloc_r>
 80031c0:	f8c9 0000 	str.w	r0, [r9]
 80031c4:	f8c9 0010 	str.w	r0, [r9, #16]
 80031c8:	b948      	cbnz	r0, 80031de <_svfprintf_r+0x52>
 80031ca:	230c      	movs	r3, #12
 80031cc:	f8ca 3000 	str.w	r3, [sl]
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80031d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80031d8:	b03f      	add	sp, #252	; 0xfc
 80031da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031de:	2340      	movs	r3, #64	; 0x40
 80031e0:	f8c9 3014 	str.w	r3, [r9, #20]
 80031e4:	2300      	movs	r3, #0
 80031e6:	ac2e      	add	r4, sp, #184	; 0xb8
 80031e8:	9421      	str	r4, [sp, #132]	; 0x84
 80031ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80031ec:	9322      	str	r3, [sp, #136]	; 0x88
 80031ee:	9509      	str	r5, [sp, #36]	; 0x24
 80031f0:	9307      	str	r3, [sp, #28]
 80031f2:	930d      	str	r3, [sp, #52]	; 0x34
 80031f4:	930e      	str	r3, [sp, #56]	; 0x38
 80031f6:	9315      	str	r3, [sp, #84]	; 0x54
 80031f8:	9314      	str	r3, [sp, #80]	; 0x50
 80031fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80031fc:	9312      	str	r3, [sp, #72]	; 0x48
 80031fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8003200:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003202:	462b      	mov	r3, r5
 8003204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003208:	b112      	cbz	r2, 8003210 <_svfprintf_r+0x84>
 800320a:	2a25      	cmp	r2, #37	; 0x25
 800320c:	f040 8083 	bne.w	8003316 <_svfprintf_r+0x18a>
 8003210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003212:	1aee      	subs	r6, r5, r3
 8003214:	d00d      	beq.n	8003232 <_svfprintf_r+0xa6>
 8003216:	e884 0048 	stmia.w	r4, {r3, r6}
 800321a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800321c:	4433      	add	r3, r6
 800321e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003222:	3301      	adds	r3, #1
 8003224:	2b07      	cmp	r3, #7
 8003226:	9322      	str	r3, [sp, #136]	; 0x88
 8003228:	dc77      	bgt.n	800331a <_svfprintf_r+0x18e>
 800322a:	3408      	adds	r4, #8
 800322c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800322e:	4433      	add	r3, r6
 8003230:	930b      	str	r3, [sp, #44]	; 0x2c
 8003232:	782b      	ldrb	r3, [r5, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8725 	beq.w	8004084 <_svfprintf_r+0xef8>
 800323a:	2300      	movs	r3, #0
 800323c:	1c69      	adds	r1, r5, #1
 800323e:	461a      	mov	r2, r3
 8003240:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003244:	461d      	mov	r5, r3
 8003246:	200a      	movs	r0, #10
 8003248:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800324c:	930c      	str	r3, [sp, #48]	; 0x30
 800324e:	1c4e      	adds	r6, r1, #1
 8003250:	7809      	ldrb	r1, [r1, #0]
 8003252:	9609      	str	r6, [sp, #36]	; 0x24
 8003254:	9106      	str	r1, [sp, #24]
 8003256:	9906      	ldr	r1, [sp, #24]
 8003258:	3920      	subs	r1, #32
 800325a:	2958      	cmp	r1, #88	; 0x58
 800325c:	f200 8414 	bhi.w	8003a88 <_svfprintf_r+0x8fc>
 8003260:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003264:	041200a5 	.word	0x041200a5
 8003268:	00aa0412 	.word	0x00aa0412
 800326c:	04120412 	.word	0x04120412
 8003270:	04120412 	.word	0x04120412
 8003274:	04120412 	.word	0x04120412
 8003278:	006500ad 	.word	0x006500ad
 800327c:	00b50412 	.word	0x00b50412
 8003280:	041200b8 	.word	0x041200b8
 8003284:	00d800d5 	.word	0x00d800d5
 8003288:	00d800d8 	.word	0x00d800d8
 800328c:	00d800d8 	.word	0x00d800d8
 8003290:	00d800d8 	.word	0x00d800d8
 8003294:	00d800d8 	.word	0x00d800d8
 8003298:	04120412 	.word	0x04120412
 800329c:	04120412 	.word	0x04120412
 80032a0:	04120412 	.word	0x04120412
 80032a4:	04120412 	.word	0x04120412
 80032a8:	04120412 	.word	0x04120412
 80032ac:	0122010c 	.word	0x0122010c
 80032b0:	01220412 	.word	0x01220412
 80032b4:	04120412 	.word	0x04120412
 80032b8:	04120412 	.word	0x04120412
 80032bc:	041200eb 	.word	0x041200eb
 80032c0:	033c0412 	.word	0x033c0412
 80032c4:	04120412 	.word	0x04120412
 80032c8:	04120412 	.word	0x04120412
 80032cc:	03a40412 	.word	0x03a40412
 80032d0:	04120412 	.word	0x04120412
 80032d4:	04120085 	.word	0x04120085
 80032d8:	04120412 	.word	0x04120412
 80032dc:	04120412 	.word	0x04120412
 80032e0:	04120412 	.word	0x04120412
 80032e4:	04120412 	.word	0x04120412
 80032e8:	00fe0412 	.word	0x00fe0412
 80032ec:	0122006b 	.word	0x0122006b
 80032f0:	01220122 	.word	0x01220122
 80032f4:	006b00ee 	.word	0x006b00ee
 80032f8:	04120412 	.word	0x04120412
 80032fc:	041200f1 	.word	0x041200f1
 8003300:	033e031e 	.word	0x033e031e
 8003304:	00f80372 	.word	0x00f80372
 8003308:	03830412 	.word	0x03830412
 800330c:	03a60412 	.word	0x03a60412
 8003310:	04120412 	.word	0x04120412
 8003314:	03be      	.short	0x03be
 8003316:	461d      	mov	r5, r3
 8003318:	e773      	b.n	8003202 <_svfprintf_r+0x76>
 800331a:	aa21      	add	r2, sp, #132	; 0x84
 800331c:	4649      	mov	r1, r9
 800331e:	4650      	mov	r0, sl
 8003320:	f002 fa90 	bl	8005844 <__ssprint_r>
 8003324:	2800      	cmp	r0, #0
 8003326:	f040 868e 	bne.w	8004046 <_svfprintf_r+0xeba>
 800332a:	ac2e      	add	r4, sp, #184	; 0xb8
 800332c:	e77e      	b.n	800322c <_svfprintf_r+0xa0>
 800332e:	2301      	movs	r3, #1
 8003330:	222b      	movs	r2, #43	; 0x2b
 8003332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003334:	e78b      	b.n	800324e <_svfprintf_r+0xc2>
 8003336:	460f      	mov	r7, r1
 8003338:	e7fb      	b.n	8003332 <_svfprintf_r+0x1a6>
 800333a:	b10b      	cbz	r3, 8003340 <_svfprintf_r+0x1b4>
 800333c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003340:	06ae      	lsls	r6, r5, #26
 8003342:	f140 80a1 	bpl.w	8003488 <_svfprintf_r+0x2fc>
 8003346:	3707      	adds	r7, #7
 8003348:	f027 0707 	bic.w	r7, r7, #7
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	9308      	str	r3, [sp, #32]
 8003352:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003356:	2e00      	cmp	r6, #0
 8003358:	f177 0300 	sbcs.w	r3, r7, #0
 800335c:	da05      	bge.n	800336a <_svfprintf_r+0x1de>
 800335e:	232d      	movs	r3, #45	; 0x2d
 8003360:	4276      	negs	r6, r6
 8003362:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003366:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800336a:	2301      	movs	r3, #1
 800336c:	e2c7      	b.n	80038fe <_svfprintf_r+0x772>
 800336e:	b10b      	cbz	r3, 8003374 <_svfprintf_r+0x1e8>
 8003370:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003374:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <_svfprintf_r+0x46c>)
 8003376:	9315      	str	r3, [sp, #84]	; 0x54
 8003378:	06ab      	lsls	r3, r5, #26
 800337a:	f140 8336 	bpl.w	80039ea <_svfprintf_r+0x85e>
 800337e:	3707      	adds	r7, #7
 8003380:	f027 0707 	bic.w	r7, r7, #7
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	9308      	str	r3, [sp, #32]
 800338a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800338e:	07e8      	lsls	r0, r5, #31
 8003390:	d50b      	bpl.n	80033aa <_svfprintf_r+0x21e>
 8003392:	ea56 0307 	orrs.w	r3, r6, r7
 8003396:	d008      	beq.n	80033aa <_svfprintf_r+0x21e>
 8003398:	2330      	movs	r3, #48	; 0x30
 800339a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800339e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80033a2:	f045 0502 	orr.w	r5, r5, #2
 80033a6:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 80033aa:	2302      	movs	r3, #2
 80033ac:	e2a4      	b.n	80038f8 <_svfprintf_r+0x76c>
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	d1bf      	bne.n	8003332 <_svfprintf_r+0x1a6>
 80033b2:	2301      	movs	r3, #1
 80033b4:	2220      	movs	r2, #32
 80033b6:	e7bc      	b.n	8003332 <_svfprintf_r+0x1a6>
 80033b8:	f045 0501 	orr.w	r5, r5, #1
 80033bc:	e7b9      	b.n	8003332 <_svfprintf_r+0x1a6>
 80033be:	683e      	ldr	r6, [r7, #0]
 80033c0:	1d39      	adds	r1, r7, #4
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	960c      	str	r6, [sp, #48]	; 0x30
 80033c6:	dab6      	bge.n	8003336 <_svfprintf_r+0x1aa>
 80033c8:	460f      	mov	r7, r1
 80033ca:	4276      	negs	r6, r6
 80033cc:	960c      	str	r6, [sp, #48]	; 0x30
 80033ce:	f045 0504 	orr.w	r5, r5, #4
 80033d2:	e7ae      	b.n	8003332 <_svfprintf_r+0x1a6>
 80033d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033d6:	1c4e      	adds	r6, r1, #1
 80033d8:	7809      	ldrb	r1, [r1, #0]
 80033da:	292a      	cmp	r1, #42	; 0x2a
 80033dc:	9106      	str	r1, [sp, #24]
 80033de:	d010      	beq.n	8003402 <_svfprintf_r+0x276>
 80033e0:	f04f 0b00 	mov.w	fp, #0
 80033e4:	9609      	str	r6, [sp, #36]	; 0x24
 80033e6:	9906      	ldr	r1, [sp, #24]
 80033e8:	3930      	subs	r1, #48	; 0x30
 80033ea:	2909      	cmp	r1, #9
 80033ec:	f63f af33 	bhi.w	8003256 <_svfprintf_r+0xca>
 80033f0:	fb00 1b0b 	mla	fp, r0, fp, r1
 80033f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033f6:	460e      	mov	r6, r1
 80033f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80033fc:	9106      	str	r1, [sp, #24]
 80033fe:	9609      	str	r6, [sp, #36]	; 0x24
 8003400:	e7f1      	b.n	80033e6 <_svfprintf_r+0x25a>
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	9609      	str	r6, [sp, #36]	; 0x24
 8003406:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800340a:	3704      	adds	r7, #4
 800340c:	e791      	b.n	8003332 <_svfprintf_r+0x1a6>
 800340e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003412:	e78e      	b.n	8003332 <_svfprintf_r+0x1a6>
 8003414:	2100      	movs	r1, #0
 8003416:	910c      	str	r1, [sp, #48]	; 0x30
 8003418:	9906      	ldr	r1, [sp, #24]
 800341a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800341c:	3930      	subs	r1, #48	; 0x30
 800341e:	fb00 1106 	mla	r1, r0, r6, r1
 8003422:	910c      	str	r1, [sp, #48]	; 0x30
 8003424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003426:	460e      	mov	r6, r1
 8003428:	f816 1b01 	ldrb.w	r1, [r6], #1
 800342c:	9106      	str	r1, [sp, #24]
 800342e:	9906      	ldr	r1, [sp, #24]
 8003430:	9609      	str	r6, [sp, #36]	; 0x24
 8003432:	3930      	subs	r1, #48	; 0x30
 8003434:	2909      	cmp	r1, #9
 8003436:	d9ef      	bls.n	8003418 <_svfprintf_r+0x28c>
 8003438:	e70d      	b.n	8003256 <_svfprintf_r+0xca>
 800343a:	f045 0508 	orr.w	r5, r5, #8
 800343e:	e778      	b.n	8003332 <_svfprintf_r+0x1a6>
 8003440:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003444:	e775      	b.n	8003332 <_svfprintf_r+0x1a6>
 8003446:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003448:	7809      	ldrb	r1, [r1, #0]
 800344a:	296c      	cmp	r1, #108	; 0x6c
 800344c:	d105      	bne.n	800345a <_svfprintf_r+0x2ce>
 800344e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003450:	3101      	adds	r1, #1
 8003452:	9109      	str	r1, [sp, #36]	; 0x24
 8003454:	f045 0520 	orr.w	r5, r5, #32
 8003458:	e76b      	b.n	8003332 <_svfprintf_r+0x1a6>
 800345a:	f045 0510 	orr.w	r5, r5, #16
 800345e:	e768      	b.n	8003332 <_svfprintf_r+0x1a6>
 8003460:	2600      	movs	r6, #0
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	9308      	str	r3, [sp, #32]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800346c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8003470:	f04f 0b01 	mov.w	fp, #1
 8003474:	4637      	mov	r7, r6
 8003476:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800347a:	e11c      	b.n	80036b6 <_svfprintf_r+0x52a>
 800347c:	b10b      	cbz	r3, 8003482 <_svfprintf_r+0x2f6>
 800347e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003482:	f045 0510 	orr.w	r5, r5, #16
 8003486:	e75b      	b.n	8003340 <_svfprintf_r+0x1b4>
 8003488:	f015 0f10 	tst.w	r5, #16
 800348c:	f107 0304 	add.w	r3, r7, #4
 8003490:	d003      	beq.n	800349a <_svfprintf_r+0x30e>
 8003492:	683e      	ldr	r6, [r7, #0]
 8003494:	9308      	str	r3, [sp, #32]
 8003496:	17f7      	asrs	r7, r6, #31
 8003498:	e75d      	b.n	8003356 <_svfprintf_r+0x1ca>
 800349a:	683e      	ldr	r6, [r7, #0]
 800349c:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034a0:	9308      	str	r3, [sp, #32]
 80034a2:	bf18      	it	ne
 80034a4:	b236      	sxthne	r6, r6
 80034a6:	e7f6      	b.n	8003496 <_svfprintf_r+0x30a>
 80034a8:	b10b      	cbz	r3, 80034ae <_svfprintf_r+0x322>
 80034aa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80034ae:	3707      	adds	r7, #7
 80034b0:	f027 0707 	bic.w	r7, r7, #7
 80034b4:	f107 0308 	add.w	r3, r7, #8
 80034b8:	9308      	str	r3, [sp, #32]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034c0:	930d      	str	r3, [sp, #52]	; 0x34
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80034c6:	930e      	str	r3, [sp, #56]	; 0x38
 80034c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ca:	4638      	mov	r0, r7
 80034cc:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80034d0:	4631      	mov	r1, r6
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <_svfprintf_r+0x470>)
 80034d4:	f7fd fa96 	bl	8000a04 <__aeabi_dcmpun>
 80034d8:	2800      	cmp	r0, #0
 80034da:	f040 85dc 	bne.w	8004096 <_svfprintf_r+0xf0a>
 80034de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034e2:	4b46      	ldr	r3, [pc, #280]	; (80035fc <_svfprintf_r+0x470>)
 80034e4:	4638      	mov	r0, r7
 80034e6:	4631      	mov	r1, r6
 80034e8:	f7fd fa6e 	bl	80009c8 <__aeabi_dcmple>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	f040 85d2 	bne.w	8004096 <_svfprintf_r+0xf0a>
 80034f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80034f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034fa:	f7fd fa5b 	bl	80009b4 <__aeabi_dcmplt>
 80034fe:	b110      	cbz	r0, 8003506 <_svfprintf_r+0x37a>
 8003500:	232d      	movs	r3, #45	; 0x2d
 8003502:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003506:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <_svfprintf_r+0x474>)
 8003508:	4a3e      	ldr	r2, [pc, #248]	; (8003604 <_svfprintf_r+0x478>)
 800350a:	9906      	ldr	r1, [sp, #24]
 800350c:	f04f 0b03 	mov.w	fp, #3
 8003510:	2947      	cmp	r1, #71	; 0x47
 8003512:	bfcc      	ite	gt
 8003514:	4690      	movgt	r8, r2
 8003516:	4698      	movle	r8, r3
 8003518:	2600      	movs	r6, #0
 800351a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800351e:	4637      	mov	r7, r6
 8003520:	e0c9      	b.n	80036b6 <_svfprintf_r+0x52a>
 8003522:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8003526:	d026      	beq.n	8003576 <_svfprintf_r+0x3ea>
 8003528:	9b06      	ldr	r3, [sp, #24]
 800352a:	f023 0320 	bic.w	r3, r3, #32
 800352e:	2b47      	cmp	r3, #71	; 0x47
 8003530:	d104      	bne.n	800353c <_svfprintf_r+0x3b0>
 8003532:	f1bb 0f00 	cmp.w	fp, #0
 8003536:	bf08      	it	eq
 8003538:	f04f 0b01 	moveq.w	fp, #1
 800353c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8003540:	9317      	str	r3, [sp, #92]	; 0x5c
 8003542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003544:	1e1f      	subs	r7, r3, #0
 8003546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003548:	bfa8      	it	ge
 800354a:	9710      	strge	r7, [sp, #64]	; 0x40
 800354c:	930f      	str	r3, [sp, #60]	; 0x3c
 800354e:	bfbd      	ittte	lt
 8003550:	463b      	movlt	r3, r7
 8003552:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003556:	9310      	strlt	r3, [sp, #64]	; 0x40
 8003558:	2300      	movge	r3, #0
 800355a:	bfb8      	it	lt
 800355c:	232d      	movlt	r3, #45	; 0x2d
 800355e:	9316      	str	r3, [sp, #88]	; 0x58
 8003560:	9b06      	ldr	r3, [sp, #24]
 8003562:	f023 0720 	bic.w	r7, r3, #32
 8003566:	2f46      	cmp	r7, #70	; 0x46
 8003568:	d008      	beq.n	800357c <_svfprintf_r+0x3f0>
 800356a:	2f45      	cmp	r7, #69	; 0x45
 800356c:	d142      	bne.n	80035f4 <_svfprintf_r+0x468>
 800356e:	f10b 0601 	add.w	r6, fp, #1
 8003572:	2302      	movs	r3, #2
 8003574:	e004      	b.n	8003580 <_svfprintf_r+0x3f4>
 8003576:	f04f 0b06 	mov.w	fp, #6
 800357a:	e7df      	b.n	800353c <_svfprintf_r+0x3b0>
 800357c:	465e      	mov	r6, fp
 800357e:	2303      	movs	r3, #3
 8003580:	aa1f      	add	r2, sp, #124	; 0x7c
 8003582:	9204      	str	r2, [sp, #16]
 8003584:	aa1c      	add	r2, sp, #112	; 0x70
 8003586:	9203      	str	r2, [sp, #12]
 8003588:	aa1b      	add	r2, sp, #108	; 0x6c
 800358a:	9202      	str	r2, [sp, #8]
 800358c:	e88d 0048 	stmia.w	sp, {r3, r6}
 8003590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003594:	4650      	mov	r0, sl
 8003596:	f000 fe57 	bl	8004248 <_dtoa_r>
 800359a:	2f47      	cmp	r7, #71	; 0x47
 800359c:	4680      	mov	r8, r0
 800359e:	d102      	bne.n	80035a6 <_svfprintf_r+0x41a>
 80035a0:	07e8      	lsls	r0, r5, #31
 80035a2:	f140 8585 	bpl.w	80040b0 <_svfprintf_r+0xf24>
 80035a6:	eb08 0306 	add.w	r3, r8, r6
 80035aa:	2f46      	cmp	r7, #70	; 0x46
 80035ac:	9307      	str	r3, [sp, #28]
 80035ae:	d111      	bne.n	80035d4 <_svfprintf_r+0x448>
 80035b0:	f898 3000 	ldrb.w	r3, [r8]
 80035b4:	2b30      	cmp	r3, #48	; 0x30
 80035b6:	d109      	bne.n	80035cc <_svfprintf_r+0x440>
 80035b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80035be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80035c0:	f7fd f9ee 	bl	80009a0 <__aeabi_dcmpeq>
 80035c4:	b910      	cbnz	r0, 80035cc <_svfprintf_r+0x440>
 80035c6:	f1c6 0601 	rsb	r6, r6, #1
 80035ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80035cc:	9a07      	ldr	r2, [sp, #28]
 80035ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80035d0:	441a      	add	r2, r3
 80035d2:	9207      	str	r2, [sp, #28]
 80035d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80035da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80035dc:	f7fd f9e0 	bl	80009a0 <__aeabi_dcmpeq>
 80035e0:	b990      	cbnz	r0, 8003608 <_svfprintf_r+0x47c>
 80035e2:	2230      	movs	r2, #48	; 0x30
 80035e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80035e6:	9907      	ldr	r1, [sp, #28]
 80035e8:	4299      	cmp	r1, r3
 80035ea:	d90f      	bls.n	800360c <_svfprintf_r+0x480>
 80035ec:	1c59      	adds	r1, r3, #1
 80035ee:	911f      	str	r1, [sp, #124]	; 0x7c
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e7f7      	b.n	80035e4 <_svfprintf_r+0x458>
 80035f4:	465e      	mov	r6, fp
 80035f6:	e7bc      	b.n	8003572 <_svfprintf_r+0x3e6>
 80035f8:	08006d23 	.word	0x08006d23
 80035fc:	7fefffff 	.word	0x7fefffff
 8003600:	08006d13 	.word	0x08006d13
 8003604:	08006d17 	.word	0x08006d17
 8003608:	9b07      	ldr	r3, [sp, #28]
 800360a:	931f      	str	r3, [sp, #124]	; 0x7c
 800360c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800360e:	2f47      	cmp	r7, #71	; 0x47
 8003610:	eba3 0308 	sub.w	r3, r3, r8
 8003614:	9307      	str	r3, [sp, #28]
 8003616:	f040 8100 	bne.w	800381a <_svfprintf_r+0x68e>
 800361a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800361c:	1cd9      	adds	r1, r3, #3
 800361e:	db02      	blt.n	8003626 <_svfprintf_r+0x49a>
 8003620:	459b      	cmp	fp, r3
 8003622:	f280 8126 	bge.w	8003872 <_svfprintf_r+0x6e6>
 8003626:	9b06      	ldr	r3, [sp, #24]
 8003628:	3b02      	subs	r3, #2
 800362a:	9306      	str	r3, [sp, #24]
 800362c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800362e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8003632:	1e53      	subs	r3, r2, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	bfa8      	it	ge
 8003638:	222b      	movge	r2, #43	; 0x2b
 800363a:	931b      	str	r3, [sp, #108]	; 0x6c
 800363c:	bfbc      	itt	lt
 800363e:	f1c2 0301 	rsblt	r3, r2, #1
 8003642:	222d      	movlt	r2, #45	; 0x2d
 8003644:	2b09      	cmp	r3, #9
 8003646:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 800364a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800364e:	f340 8100 	ble.w	8003852 <_svfprintf_r+0x6c6>
 8003652:	260a      	movs	r6, #10
 8003654:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8003658:	fb93 f0f6 	sdiv	r0, r3, r6
 800365c:	fb06 3310 	mls	r3, r6, r0, r3
 8003660:	2809      	cmp	r0, #9
 8003662:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003666:	f802 3c01 	strb.w	r3, [r2, #-1]
 800366a:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 800366e:	4603      	mov	r3, r0
 8003670:	f300 80e8 	bgt.w	8003844 <_svfprintf_r+0x6b8>
 8003674:	3330      	adds	r3, #48	; 0x30
 8003676:	f801 3c01 	strb.w	r3, [r1, #-1]
 800367a:	3a02      	subs	r2, #2
 800367c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8003680:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8003684:	4282      	cmp	r2, r0
 8003686:	4619      	mov	r1, r3
 8003688:	f0c0 80de 	bcc.w	8003848 <_svfprintf_r+0x6bc>
 800368c:	9a07      	ldr	r2, [sp, #28]
 800368e:	ab1d      	add	r3, sp, #116	; 0x74
 8003690:	1acb      	subs	r3, r1, r3
 8003692:	2a01      	cmp	r2, #1
 8003694:	9314      	str	r3, [sp, #80]	; 0x50
 8003696:	eb03 0b02 	add.w	fp, r3, r2
 800369a:	dc02      	bgt.n	80036a2 <_svfprintf_r+0x516>
 800369c:	f015 0701 	ands.w	r7, r5, #1
 80036a0:	d002      	beq.n	80036a8 <_svfprintf_r+0x51c>
 80036a2:	2700      	movs	r7, #0
 80036a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036a6:	449b      	add	fp, r3
 80036a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80036aa:	b113      	cbz	r3, 80036b2 <_svfprintf_r+0x526>
 80036ac:	232d      	movs	r3, #45	; 0x2d
 80036ae:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80036b2:	2600      	movs	r6, #0
 80036b4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80036b6:	455e      	cmp	r6, fp
 80036b8:	4633      	mov	r3, r6
 80036ba:	bfb8      	it	lt
 80036bc:	465b      	movlt	r3, fp
 80036be:	930f      	str	r3, [sp, #60]	; 0x3c
 80036c0:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80036c4:	b113      	cbz	r3, 80036cc <_svfprintf_r+0x540>
 80036c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036c8:	3301      	adds	r3, #1
 80036ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80036cc:	f015 0302 	ands.w	r3, r5, #2
 80036d0:	9316      	str	r3, [sp, #88]	; 0x58
 80036d2:	bf1e      	ittt	ne
 80036d4:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 80036d6:	3302      	addne	r3, #2
 80036d8:	930f      	strne	r3, [sp, #60]	; 0x3c
 80036da:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80036de:	9317      	str	r3, [sp, #92]	; 0x5c
 80036e0:	d118      	bne.n	8003714 <_svfprintf_r+0x588>
 80036e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	9310      	str	r3, [sp, #64]	; 0x40
 80036ec:	dd12      	ble.n	8003714 <_svfprintf_r+0x588>
 80036ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	4bab      	ldr	r3, [pc, #684]	; (80039a0 <_svfprintf_r+0x814>)
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	f300 81d9 	bgt.w	8003aac <_svfprintf_r+0x920>
 80036fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80036fe:	6063      	str	r3, [r4, #4]
 8003700:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003702:	4413      	add	r3, r2
 8003704:	9323      	str	r3, [sp, #140]	; 0x8c
 8003706:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003708:	3301      	adds	r3, #1
 800370a:	2b07      	cmp	r3, #7
 800370c:	9322      	str	r3, [sp, #136]	; 0x88
 800370e:	f300 81e6 	bgt.w	8003ade <_svfprintf_r+0x952>
 8003712:	3408      	adds	r4, #8
 8003714:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8003718:	b173      	cbz	r3, 8003738 <_svfprintf_r+0x5ac>
 800371a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	2301      	movs	r3, #1
 8003722:	6063      	str	r3, [r4, #4]
 8003724:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003726:	3301      	adds	r3, #1
 8003728:	9323      	str	r3, [sp, #140]	; 0x8c
 800372a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800372c:	3301      	adds	r3, #1
 800372e:	2b07      	cmp	r3, #7
 8003730:	9322      	str	r3, [sp, #136]	; 0x88
 8003732:	f300 81de 	bgt.w	8003af2 <_svfprintf_r+0x966>
 8003736:	3408      	adds	r4, #8
 8003738:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800373a:	b16b      	cbz	r3, 8003758 <_svfprintf_r+0x5cc>
 800373c:	ab1a      	add	r3, sp, #104	; 0x68
 800373e:	6023      	str	r3, [r4, #0]
 8003740:	2302      	movs	r3, #2
 8003742:	6063      	str	r3, [r4, #4]
 8003744:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003746:	3302      	adds	r3, #2
 8003748:	9323      	str	r3, [sp, #140]	; 0x8c
 800374a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800374c:	3301      	adds	r3, #1
 800374e:	2b07      	cmp	r3, #7
 8003750:	9322      	str	r3, [sp, #136]	; 0x88
 8003752:	f300 81d8 	bgt.w	8003b06 <_svfprintf_r+0x97a>
 8003756:	3408      	adds	r4, #8
 8003758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d118      	bne.n	8003790 <_svfprintf_r+0x604>
 800375e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003760:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	9310      	str	r3, [sp, #64]	; 0x40
 8003768:	dd12      	ble.n	8003790 <_svfprintf_r+0x604>
 800376a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800376c:	2b10      	cmp	r3, #16
 800376e:	4b8d      	ldr	r3, [pc, #564]	; (80039a4 <_svfprintf_r+0x818>)
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	f300 81d2 	bgt.w	8003b1a <_svfprintf_r+0x98e>
 8003776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003778:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800377e:	4413      	add	r3, r2
 8003780:	9323      	str	r3, [sp, #140]	; 0x8c
 8003782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003784:	3301      	adds	r3, #1
 8003786:	2b07      	cmp	r3, #7
 8003788:	9322      	str	r3, [sp, #136]	; 0x88
 800378a:	f300 81df 	bgt.w	8003b4c <_svfprintf_r+0x9c0>
 800378e:	3408      	adds	r4, #8
 8003790:	eba6 060b 	sub.w	r6, r6, fp
 8003794:	2e00      	cmp	r6, #0
 8003796:	dd0f      	ble.n	80037b8 <_svfprintf_r+0x62c>
 8003798:	4b82      	ldr	r3, [pc, #520]	; (80039a4 <_svfprintf_r+0x818>)
 800379a:	2e10      	cmp	r6, #16
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	f300 81df 	bgt.w	8003b60 <_svfprintf_r+0x9d4>
 80037a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037a4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80037a6:	3301      	adds	r3, #1
 80037a8:	6066      	str	r6, [r4, #4]
 80037aa:	2b07      	cmp	r3, #7
 80037ac:	4406      	add	r6, r0
 80037ae:	9623      	str	r6, [sp, #140]	; 0x8c
 80037b0:	9322      	str	r3, [sp, #136]	; 0x88
 80037b2:	f300 81ec 	bgt.w	8003b8e <_svfprintf_r+0xa02>
 80037b6:	3408      	adds	r4, #8
 80037b8:	05eb      	lsls	r3, r5, #23
 80037ba:	f100 81f2 	bmi.w	8003ba2 <_svfprintf_r+0xa16>
 80037be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037c0:	e884 0900 	stmia.w	r4, {r8, fp}
 80037c4:	445b      	add	r3, fp
 80037c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80037c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037ca:	3301      	adds	r3, #1
 80037cc:	2b07      	cmp	r3, #7
 80037ce:	9322      	str	r3, [sp, #136]	; 0x88
 80037d0:	f340 8419 	ble.w	8004006 <_svfprintf_r+0xe7a>
 80037d4:	aa21      	add	r2, sp, #132	; 0x84
 80037d6:	4649      	mov	r1, r9
 80037d8:	4650      	mov	r0, sl
 80037da:	f002 f833 	bl	8005844 <__ssprint_r>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f040 8431 	bne.w	8004046 <_svfprintf_r+0xeba>
 80037e4:	ac2e      	add	r4, sp, #184	; 0xb8
 80037e6:	076b      	lsls	r3, r5, #29
 80037e8:	f100 8410 	bmi.w	800400c <_svfprintf_r+0xe80>
 80037ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80037f2:	428a      	cmp	r2, r1
 80037f4:	bfac      	ite	ge
 80037f6:	189b      	addge	r3, r3, r2
 80037f8:	185b      	addlt	r3, r3, r1
 80037fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80037fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037fe:	b13b      	cbz	r3, 8003810 <_svfprintf_r+0x684>
 8003800:	aa21      	add	r2, sp, #132	; 0x84
 8003802:	4649      	mov	r1, r9
 8003804:	4650      	mov	r0, sl
 8003806:	f002 f81d 	bl	8005844 <__ssprint_r>
 800380a:	2800      	cmp	r0, #0
 800380c:	f040 841b 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003810:	2300      	movs	r3, #0
 8003812:	9f08      	ldr	r7, [sp, #32]
 8003814:	9322      	str	r3, [sp, #136]	; 0x88
 8003816:	ac2e      	add	r4, sp, #184	; 0xb8
 8003818:	e4f2      	b.n	8003200 <_svfprintf_r+0x74>
 800381a:	9b06      	ldr	r3, [sp, #24]
 800381c:	2b65      	cmp	r3, #101	; 0x65
 800381e:	f77f af05 	ble.w	800362c <_svfprintf_r+0x4a0>
 8003822:	9b06      	ldr	r3, [sp, #24]
 8003824:	2b66      	cmp	r3, #102	; 0x66
 8003826:	d124      	bne.n	8003872 <_svfprintf_r+0x6e6>
 8003828:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800382a:	2b00      	cmp	r3, #0
 800382c:	dd19      	ble.n	8003862 <_svfprintf_r+0x6d6>
 800382e:	f1bb 0f00 	cmp.w	fp, #0
 8003832:	d101      	bne.n	8003838 <_svfprintf_r+0x6ac>
 8003834:	07ea      	lsls	r2, r5, #31
 8003836:	d502      	bpl.n	800383e <_svfprintf_r+0x6b2>
 8003838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800383a:	4413      	add	r3, r2
 800383c:	445b      	add	r3, fp
 800383e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8003840:	469b      	mov	fp, r3
 8003842:	e731      	b.n	80036a8 <_svfprintf_r+0x51c>
 8003844:	460a      	mov	r2, r1
 8003846:	e707      	b.n	8003658 <_svfprintf_r+0x4cc>
 8003848:	f812 1b01 	ldrb.w	r1, [r2], #1
 800384c:	f803 1b01 	strb.w	r1, [r3], #1
 8003850:	e718      	b.n	8003684 <_svfprintf_r+0x4f8>
 8003852:	2230      	movs	r2, #48	; 0x30
 8003854:	4413      	add	r3, r2
 8003856:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800385a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800385e:	a91e      	add	r1, sp, #120	; 0x78
 8003860:	e714      	b.n	800368c <_svfprintf_r+0x500>
 8003862:	f1bb 0f00 	cmp.w	fp, #0
 8003866:	d101      	bne.n	800386c <_svfprintf_r+0x6e0>
 8003868:	07eb      	lsls	r3, r5, #31
 800386a:	d515      	bpl.n	8003898 <_svfprintf_r+0x70c>
 800386c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800386e:	3301      	adds	r3, #1
 8003870:	e7e4      	b.n	800383c <_svfprintf_r+0x6b0>
 8003872:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003874:	9b07      	ldr	r3, [sp, #28]
 8003876:	429a      	cmp	r2, r3
 8003878:	db06      	blt.n	8003888 <_svfprintf_r+0x6fc>
 800387a:	07ef      	lsls	r7, r5, #31
 800387c:	d50e      	bpl.n	800389c <_svfprintf_r+0x710>
 800387e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003880:	4413      	add	r3, r2
 8003882:	2267      	movs	r2, #103	; 0x67
 8003884:	9206      	str	r2, [sp, #24]
 8003886:	e7da      	b.n	800383e <_svfprintf_r+0x6b2>
 8003888:	9b07      	ldr	r3, [sp, #28]
 800388a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800388c:	2a00      	cmp	r2, #0
 800388e:	440b      	add	r3, r1
 8003890:	dcf7      	bgt.n	8003882 <_svfprintf_r+0x6f6>
 8003892:	f1c2 0201 	rsb	r2, r2, #1
 8003896:	e7f3      	b.n	8003880 <_svfprintf_r+0x6f4>
 8003898:	2301      	movs	r3, #1
 800389a:	e7d0      	b.n	800383e <_svfprintf_r+0x6b2>
 800389c:	4613      	mov	r3, r2
 800389e:	e7f0      	b.n	8003882 <_svfprintf_r+0x6f6>
 80038a0:	b10b      	cbz	r3, 80038a6 <_svfprintf_r+0x71a>
 80038a2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80038a6:	f015 0f20 	tst.w	r5, #32
 80038aa:	f107 0304 	add.w	r3, r7, #4
 80038ae:	d008      	beq.n	80038c2 <_svfprintf_r+0x736>
 80038b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	17ce      	asrs	r6, r1, #31
 80038b6:	4608      	mov	r0, r1
 80038b8:	4631      	mov	r1, r6
 80038ba:	e9c2 0100 	strd	r0, r1, [r2]
 80038be:	461f      	mov	r7, r3
 80038c0:	e49e      	b.n	8003200 <_svfprintf_r+0x74>
 80038c2:	06ee      	lsls	r6, r5, #27
 80038c4:	d503      	bpl.n	80038ce <_svfprintf_r+0x742>
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038ca:	6011      	str	r1, [r2, #0]
 80038cc:	e7f7      	b.n	80038be <_svfprintf_r+0x732>
 80038ce:	0668      	lsls	r0, r5, #25
 80038d0:	d5f9      	bpl.n	80038c6 <_svfprintf_r+0x73a>
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80038d8:	8011      	strh	r1, [r2, #0]
 80038da:	e7f0      	b.n	80038be <_svfprintf_r+0x732>
 80038dc:	f045 0510 	orr.w	r5, r5, #16
 80038e0:	f015 0320 	ands.w	r3, r5, #32
 80038e4:	d022      	beq.n	800392c <_svfprintf_r+0x7a0>
 80038e6:	3707      	adds	r7, #7
 80038e8:	f027 0707 	bic.w	r7, r7, #7
 80038ec:	f107 0308 	add.w	r3, r7, #8
 80038f0:	9308      	str	r3, [sp, #32]
 80038f2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80038f6:	2300      	movs	r3, #0
 80038f8:	2200      	movs	r2, #0
 80038fa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80038fe:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8003902:	f000 83db 	beq.w	80040bc <_svfprintf_r+0xf30>
 8003906:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800390a:	920f      	str	r2, [sp, #60]	; 0x3c
 800390c:	ea56 0207 	orrs.w	r2, r6, r7
 8003910:	f040 83d9 	bne.w	80040c6 <_svfprintf_r+0xf3a>
 8003914:	f1bb 0f00 	cmp.w	fp, #0
 8003918:	f000 80aa 	beq.w	8003a70 <_svfprintf_r+0x8e4>
 800391c:	2b01      	cmp	r3, #1
 800391e:	d076      	beq.n	8003a0e <_svfprintf_r+0x882>
 8003920:	2b02      	cmp	r3, #2
 8003922:	f000 8091 	beq.w	8003a48 <_svfprintf_r+0x8bc>
 8003926:	2600      	movs	r6, #0
 8003928:	2700      	movs	r7, #0
 800392a:	e3d2      	b.n	80040d2 <_svfprintf_r+0xf46>
 800392c:	1d3a      	adds	r2, r7, #4
 800392e:	f015 0110 	ands.w	r1, r5, #16
 8003932:	9208      	str	r2, [sp, #32]
 8003934:	d002      	beq.n	800393c <_svfprintf_r+0x7b0>
 8003936:	683e      	ldr	r6, [r7, #0]
 8003938:	2700      	movs	r7, #0
 800393a:	e7dd      	b.n	80038f8 <_svfprintf_r+0x76c>
 800393c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003940:	d0f9      	beq.n	8003936 <_svfprintf_r+0x7aa>
 8003942:	883e      	ldrh	r6, [r7, #0]
 8003944:	2700      	movs	r7, #0
 8003946:	e7d6      	b.n	80038f6 <_svfprintf_r+0x76a>
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	9308      	str	r3, [sp, #32]
 800394c:	2330      	movs	r3, #48	; 0x30
 800394e:	2278      	movs	r2, #120	; 0x78
 8003950:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <_svfprintf_r+0x81c>)
 8003956:	683e      	ldr	r6, [r7, #0]
 8003958:	9315      	str	r3, [sp, #84]	; 0x54
 800395a:	2700      	movs	r7, #0
 800395c:	f045 0502 	orr.w	r5, r5, #2
 8003960:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8003964:	2302      	movs	r3, #2
 8003966:	9206      	str	r2, [sp, #24]
 8003968:	e7c6      	b.n	80038f8 <_svfprintf_r+0x76c>
 800396a:	2600      	movs	r6, #0
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8003972:	9308      	str	r3, [sp, #32]
 8003974:	f8d7 8000 	ldr.w	r8, [r7]
 8003978:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800397c:	d00a      	beq.n	8003994 <_svfprintf_r+0x808>
 800397e:	465a      	mov	r2, fp
 8003980:	4631      	mov	r1, r6
 8003982:	4640      	mov	r0, r8
 8003984:	f001 fc56 	bl	8005234 <memchr>
 8003988:	2800      	cmp	r0, #0
 800398a:	f000 808d 	beq.w	8003aa8 <_svfprintf_r+0x91c>
 800398e:	eba0 0b08 	sub.w	fp, r0, r8
 8003992:	e5c4      	b.n	800351e <_svfprintf_r+0x392>
 8003994:	4640      	mov	r0, r8
 8003996:	f7fc fbdb 	bl	8000150 <strlen>
 800399a:	4683      	mov	fp, r0
 800399c:	e5bf      	b.n	800351e <_svfprintf_r+0x392>
 800399e:	bf00      	nop
 80039a0:	08006d47 	.word	0x08006d47
 80039a4:	08006d57 	.word	0x08006d57
 80039a8:	08006d34 	.word	0x08006d34
 80039ac:	f045 0510 	orr.w	r5, r5, #16
 80039b0:	06a9      	lsls	r1, r5, #26
 80039b2:	d509      	bpl.n	80039c8 <_svfprintf_r+0x83c>
 80039b4:	3707      	adds	r7, #7
 80039b6:	f027 0707 	bic.w	r7, r7, #7
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	9308      	str	r3, [sp, #32]
 80039c0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80039c4:	2301      	movs	r3, #1
 80039c6:	e797      	b.n	80038f8 <_svfprintf_r+0x76c>
 80039c8:	1d3b      	adds	r3, r7, #4
 80039ca:	f015 0f10 	tst.w	r5, #16
 80039ce:	9308      	str	r3, [sp, #32]
 80039d0:	d001      	beq.n	80039d6 <_svfprintf_r+0x84a>
 80039d2:	683e      	ldr	r6, [r7, #0]
 80039d4:	e002      	b.n	80039dc <_svfprintf_r+0x850>
 80039d6:	066a      	lsls	r2, r5, #25
 80039d8:	d5fb      	bpl.n	80039d2 <_svfprintf_r+0x846>
 80039da:	883e      	ldrh	r6, [r7, #0]
 80039dc:	2700      	movs	r7, #0
 80039de:	e7f1      	b.n	80039c4 <_svfprintf_r+0x838>
 80039e0:	b10b      	cbz	r3, 80039e6 <_svfprintf_r+0x85a>
 80039e2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80039e6:	4ba3      	ldr	r3, [pc, #652]	; (8003c74 <_svfprintf_r+0xae8>)
 80039e8:	e4c5      	b.n	8003376 <_svfprintf_r+0x1ea>
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	f015 0f10 	tst.w	r5, #16
 80039f0:	9308      	str	r3, [sp, #32]
 80039f2:	d001      	beq.n	80039f8 <_svfprintf_r+0x86c>
 80039f4:	683e      	ldr	r6, [r7, #0]
 80039f6:	e002      	b.n	80039fe <_svfprintf_r+0x872>
 80039f8:	066e      	lsls	r6, r5, #25
 80039fa:	d5fb      	bpl.n	80039f4 <_svfprintf_r+0x868>
 80039fc:	883e      	ldrh	r6, [r7, #0]
 80039fe:	2700      	movs	r7, #0
 8003a00:	e4c5      	b.n	800338e <_svfprintf_r+0x202>
 8003a02:	4643      	mov	r3, r8
 8003a04:	e366      	b.n	80040d4 <_svfprintf_r+0xf48>
 8003a06:	2f00      	cmp	r7, #0
 8003a08:	bf08      	it	eq
 8003a0a:	2e0a      	cmpeq	r6, #10
 8003a0c:	d205      	bcs.n	8003a1a <_svfprintf_r+0x88e>
 8003a0e:	3630      	adds	r6, #48	; 0x30
 8003a10:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8003a14:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003a18:	e377      	b.n	800410a <_svfprintf_r+0xf7e>
 8003a1a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4639      	mov	r1, r7
 8003a22:	220a      	movs	r2, #10
 8003a24:	2300      	movs	r3, #0
 8003a26:	f7fd fa89 	bl	8000f3c <__aeabi_uldivmod>
 8003a2a:	3230      	adds	r2, #48	; 0x30
 8003a2c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003a30:	2300      	movs	r3, #0
 8003a32:	4630      	mov	r0, r6
 8003a34:	4639      	mov	r1, r7
 8003a36:	220a      	movs	r2, #10
 8003a38:	f7fd fa80 	bl	8000f3c <__aeabi_uldivmod>
 8003a3c:	4606      	mov	r6, r0
 8003a3e:	460f      	mov	r7, r1
 8003a40:	ea56 0307 	orrs.w	r3, r6, r7
 8003a44:	d1eb      	bne.n	8003a1e <_svfprintf_r+0x892>
 8003a46:	e360      	b.n	800410a <_svfprintf_r+0xf7e>
 8003a48:	2600      	movs	r6, #0
 8003a4a:	2700      	movs	r7, #0
 8003a4c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8003a50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a52:	f006 030f 	and.w	r3, r6, #15
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	093a      	lsrs	r2, r7, #4
 8003a5a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003a5e:	0933      	lsrs	r3, r6, #4
 8003a60:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003a64:	461e      	mov	r6, r3
 8003a66:	4617      	mov	r7, r2
 8003a68:	ea56 0307 	orrs.w	r3, r6, r7
 8003a6c:	d1f0      	bne.n	8003a50 <_svfprintf_r+0x8c4>
 8003a6e:	e34c      	b.n	800410a <_svfprintf_r+0xf7e>
 8003a70:	b93b      	cbnz	r3, 8003a82 <_svfprintf_r+0x8f6>
 8003a72:	07ea      	lsls	r2, r5, #31
 8003a74:	d505      	bpl.n	8003a82 <_svfprintf_r+0x8f6>
 8003a76:	2330      	movs	r3, #48	; 0x30
 8003a78:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8003a7c:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003a80:	e343      	b.n	800410a <_svfprintf_r+0xf7e>
 8003a82:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8003a86:	e340      	b.n	800410a <_svfprintf_r+0xf7e>
 8003a88:	b10b      	cbz	r3, 8003a8e <_svfprintf_r+0x902>
 8003a8a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003a8e:	9b06      	ldr	r3, [sp, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 82f7 	beq.w	8004084 <_svfprintf_r+0xef8>
 8003a96:	2600      	movs	r6, #0
 8003a98:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003a9c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8003aa0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8003aa4:	9708      	str	r7, [sp, #32]
 8003aa6:	e4e3      	b.n	8003470 <_svfprintf_r+0x2e4>
 8003aa8:	4606      	mov	r6, r0
 8003aaa:	e538      	b.n	800351e <_svfprintf_r+0x392>
 8003aac:	2310      	movs	r3, #16
 8003aae:	6063      	str	r3, [r4, #4]
 8003ab0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	9323      	str	r3, [sp, #140]	; 0x8c
 8003ab6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ab8:	3301      	adds	r3, #1
 8003aba:	2b07      	cmp	r3, #7
 8003abc:	9322      	str	r3, [sp, #136]	; 0x88
 8003abe:	dc04      	bgt.n	8003aca <_svfprintf_r+0x93e>
 8003ac0:	3408      	adds	r4, #8
 8003ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ac4:	3b10      	subs	r3, #16
 8003ac6:	9310      	str	r3, [sp, #64]	; 0x40
 8003ac8:	e611      	b.n	80036ee <_svfprintf_r+0x562>
 8003aca:	aa21      	add	r2, sp, #132	; 0x84
 8003acc:	4649      	mov	r1, r9
 8003ace:	4650      	mov	r0, sl
 8003ad0:	f001 feb8 	bl	8005844 <__ssprint_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f040 82b6 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003ada:	ac2e      	add	r4, sp, #184	; 0xb8
 8003adc:	e7f1      	b.n	8003ac2 <_svfprintf_r+0x936>
 8003ade:	aa21      	add	r2, sp, #132	; 0x84
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	4650      	mov	r0, sl
 8003ae4:	f001 feae 	bl	8005844 <__ssprint_r>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f040 82ac 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003aee:	ac2e      	add	r4, sp, #184	; 0xb8
 8003af0:	e610      	b.n	8003714 <_svfprintf_r+0x588>
 8003af2:	aa21      	add	r2, sp, #132	; 0x84
 8003af4:	4649      	mov	r1, r9
 8003af6:	4650      	mov	r0, sl
 8003af8:	f001 fea4 	bl	8005844 <__ssprint_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 82a2 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003b02:	ac2e      	add	r4, sp, #184	; 0xb8
 8003b04:	e618      	b.n	8003738 <_svfprintf_r+0x5ac>
 8003b06:	aa21      	add	r2, sp, #132	; 0x84
 8003b08:	4649      	mov	r1, r9
 8003b0a:	4650      	mov	r0, sl
 8003b0c:	f001 fe9a 	bl	8005844 <__ssprint_r>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f040 8298 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003b16:	ac2e      	add	r4, sp, #184	; 0xb8
 8003b18:	e61e      	b.n	8003758 <_svfprintf_r+0x5cc>
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	6063      	str	r3, [r4, #4]
 8003b1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b20:	3310      	adds	r3, #16
 8003b22:	9323      	str	r3, [sp, #140]	; 0x8c
 8003b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b26:	3301      	adds	r3, #1
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	9322      	str	r3, [sp, #136]	; 0x88
 8003b2c:	dc04      	bgt.n	8003b38 <_svfprintf_r+0x9ac>
 8003b2e:	3408      	adds	r4, #8
 8003b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b32:	3b10      	subs	r3, #16
 8003b34:	9310      	str	r3, [sp, #64]	; 0x40
 8003b36:	e618      	b.n	800376a <_svfprintf_r+0x5de>
 8003b38:	aa21      	add	r2, sp, #132	; 0x84
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4650      	mov	r0, sl
 8003b3e:	f001 fe81 	bl	8005844 <__ssprint_r>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	f040 827f 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003b48:	ac2e      	add	r4, sp, #184	; 0xb8
 8003b4a:	e7f1      	b.n	8003b30 <_svfprintf_r+0x9a4>
 8003b4c:	aa21      	add	r2, sp, #132	; 0x84
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4650      	mov	r0, sl
 8003b52:	f001 fe77 	bl	8005844 <__ssprint_r>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	f040 8275 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003b5c:	ac2e      	add	r4, sp, #184	; 0xb8
 8003b5e:	e617      	b.n	8003790 <_svfprintf_r+0x604>
 8003b60:	2310      	movs	r3, #16
 8003b62:	6063      	str	r3, [r4, #4]
 8003b64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b66:	3310      	adds	r3, #16
 8003b68:	9323      	str	r3, [sp, #140]	; 0x8c
 8003b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	2b07      	cmp	r3, #7
 8003b70:	9322      	str	r3, [sp, #136]	; 0x88
 8003b72:	dc02      	bgt.n	8003b7a <_svfprintf_r+0x9ee>
 8003b74:	3408      	adds	r4, #8
 8003b76:	3e10      	subs	r6, #16
 8003b78:	e60e      	b.n	8003798 <_svfprintf_r+0x60c>
 8003b7a:	aa21      	add	r2, sp, #132	; 0x84
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4650      	mov	r0, sl
 8003b80:	f001 fe60 	bl	8005844 <__ssprint_r>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	f040 825e 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003b8a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003b8c:	e7f3      	b.n	8003b76 <_svfprintf_r+0x9ea>
 8003b8e:	aa21      	add	r2, sp, #132	; 0x84
 8003b90:	4649      	mov	r1, r9
 8003b92:	4650      	mov	r0, sl
 8003b94:	f001 fe56 	bl	8005844 <__ssprint_r>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	f040 8254 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003b9e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ba0:	e60a      	b.n	80037b8 <_svfprintf_r+0x62c>
 8003ba2:	9b06      	ldr	r3, [sp, #24]
 8003ba4:	2b65      	cmp	r3, #101	; 0x65
 8003ba6:	f340 81a9 	ble.w	8003efc <_svfprintf_r+0xd70>
 8003baa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003bae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003bb0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003bb2:	f7fc fef5 	bl	80009a0 <__aeabi_dcmpeq>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d062      	beq.n	8003c80 <_svfprintf_r+0xaf4>
 8003bba:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <_svfprintf_r+0xaec>)
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	6063      	str	r3, [r4, #4]
 8003bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	9323      	str	r3, [sp, #140]	; 0x8c
 8003bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bca:	3301      	adds	r3, #1
 8003bcc:	2b07      	cmp	r3, #7
 8003bce:	9322      	str	r3, [sp, #136]	; 0x88
 8003bd0:	dc25      	bgt.n	8003c1e <_svfprintf_r+0xa92>
 8003bd2:	3408      	adds	r4, #8
 8003bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bd6:	9a07      	ldr	r2, [sp, #28]
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	db02      	blt.n	8003be2 <_svfprintf_r+0xa56>
 8003bdc:	07ee      	lsls	r6, r5, #31
 8003bde:	f57f ae02 	bpl.w	80037e6 <_svfprintf_r+0x65a>
 8003be2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003be6:	6023      	str	r3, [r4, #0]
 8003be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bea:	6063      	str	r3, [r4, #4]
 8003bec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bee:	4413      	add	r3, r2
 8003bf0:	9323      	str	r3, [sp, #140]	; 0x8c
 8003bf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	2b07      	cmp	r3, #7
 8003bf8:	9322      	str	r3, [sp, #136]	; 0x88
 8003bfa:	dc1a      	bgt.n	8003c32 <_svfprintf_r+0xaa6>
 8003bfc:	3408      	adds	r4, #8
 8003bfe:	9b07      	ldr	r3, [sp, #28]
 8003c00:	1e5e      	subs	r6, r3, #1
 8003c02:	2e00      	cmp	r6, #0
 8003c04:	f77f adef 	ble.w	80037e6 <_svfprintf_r+0x65a>
 8003c08:	f04f 0810 	mov.w	r8, #16
 8003c0c:	4f1b      	ldr	r7, [pc, #108]	; (8003c7c <_svfprintf_r+0xaf0>)
 8003c0e:	2e10      	cmp	r6, #16
 8003c10:	6027      	str	r7, [r4, #0]
 8003c12:	dc18      	bgt.n	8003c46 <_svfprintf_r+0xaba>
 8003c14:	6066      	str	r6, [r4, #4]
 8003c16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c18:	441e      	add	r6, r3
 8003c1a:	9623      	str	r6, [sp, #140]	; 0x8c
 8003c1c:	e5d4      	b.n	80037c8 <_svfprintf_r+0x63c>
 8003c1e:	aa21      	add	r2, sp, #132	; 0x84
 8003c20:	4649      	mov	r1, r9
 8003c22:	4650      	mov	r0, sl
 8003c24:	f001 fe0e 	bl	8005844 <__ssprint_r>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	f040 820c 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003c2e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003c30:	e7d0      	b.n	8003bd4 <_svfprintf_r+0xa48>
 8003c32:	aa21      	add	r2, sp, #132	; 0x84
 8003c34:	4649      	mov	r1, r9
 8003c36:	4650      	mov	r0, sl
 8003c38:	f001 fe04 	bl	8005844 <__ssprint_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	f040 8202 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003c42:	ac2e      	add	r4, sp, #184	; 0xb8
 8003c44:	e7db      	b.n	8003bfe <_svfprintf_r+0xa72>
 8003c46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c48:	f8c4 8004 	str.w	r8, [r4, #4]
 8003c4c:	3310      	adds	r3, #16
 8003c4e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003c50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c52:	3301      	adds	r3, #1
 8003c54:	2b07      	cmp	r3, #7
 8003c56:	9322      	str	r3, [sp, #136]	; 0x88
 8003c58:	dc02      	bgt.n	8003c60 <_svfprintf_r+0xad4>
 8003c5a:	3408      	adds	r4, #8
 8003c5c:	3e10      	subs	r6, #16
 8003c5e:	e7d6      	b.n	8003c0e <_svfprintf_r+0xa82>
 8003c60:	aa21      	add	r2, sp, #132	; 0x84
 8003c62:	4649      	mov	r1, r9
 8003c64:	4650      	mov	r0, sl
 8003c66:	f001 fded 	bl	8005844 <__ssprint_r>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	f040 81eb 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003c70:	ac2e      	add	r4, sp, #184	; 0xb8
 8003c72:	e7f3      	b.n	8003c5c <_svfprintf_r+0xad0>
 8003c74:	08006d34 	.word	0x08006d34
 8003c78:	08006d45 	.word	0x08006d45
 8003c7c:	08006d57 	.word	0x08006d57
 8003c80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	dc7a      	bgt.n	8003d7c <_svfprintf_r+0xbf0>
 8003c86:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <_svfprintf_r+0xd68>)
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c90:	3301      	adds	r3, #1
 8003c92:	9323      	str	r3, [sp, #140]	; 0x8c
 8003c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c96:	3301      	adds	r3, #1
 8003c98:	2b07      	cmp	r3, #7
 8003c9a:	9322      	str	r3, [sp, #136]	; 0x88
 8003c9c:	dc44      	bgt.n	8003d28 <_svfprintf_r+0xb9c>
 8003c9e:	3408      	adds	r4, #8
 8003ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ca2:	b923      	cbnz	r3, 8003cae <_svfprintf_r+0xb22>
 8003ca4:	9b07      	ldr	r3, [sp, #28]
 8003ca6:	b913      	cbnz	r3, 8003cae <_svfprintf_r+0xb22>
 8003ca8:	07e8      	lsls	r0, r5, #31
 8003caa:	f57f ad9c 	bpl.w	80037e6 <_svfprintf_r+0x65a>
 8003cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cb6:	6063      	str	r3, [r4, #4]
 8003cb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cba:	4413      	add	r3, r2
 8003cbc:	9323      	str	r3, [sp, #140]	; 0x8c
 8003cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	2b07      	cmp	r3, #7
 8003cc4:	9322      	str	r3, [sp, #136]	; 0x88
 8003cc6:	dc39      	bgt.n	8003d3c <_svfprintf_r+0xbb0>
 8003cc8:	f104 0308 	add.w	r3, r4, #8
 8003ccc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	da19      	bge.n	8003d06 <_svfprintf_r+0xb7a>
 8003cd2:	2410      	movs	r4, #16
 8003cd4:	4f88      	ldr	r7, [pc, #544]	; (8003ef8 <_svfprintf_r+0xd6c>)
 8003cd6:	4276      	negs	r6, r6
 8003cd8:	2e10      	cmp	r6, #16
 8003cda:	601f      	str	r7, [r3, #0]
 8003cdc:	dc38      	bgt.n	8003d50 <_svfprintf_r+0xbc4>
 8003cde:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003ce0:	605e      	str	r6, [r3, #4]
 8003ce2:	4416      	add	r6, r2
 8003ce4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003ce6:	9623      	str	r6, [sp, #140]	; 0x8c
 8003ce8:	3201      	adds	r2, #1
 8003cea:	2a07      	cmp	r2, #7
 8003cec:	f103 0308 	add.w	r3, r3, #8
 8003cf0:	9222      	str	r2, [sp, #136]	; 0x88
 8003cf2:	dd08      	ble.n	8003d06 <_svfprintf_r+0xb7a>
 8003cf4:	aa21      	add	r2, sp, #132	; 0x84
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	4650      	mov	r0, sl
 8003cfa:	f001 fda3 	bl	8005844 <__ssprint_r>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	f040 81a1 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003d04:	ab2e      	add	r3, sp, #184	; 0xb8
 8003d06:	9a07      	ldr	r2, [sp, #28]
 8003d08:	9907      	ldr	r1, [sp, #28]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003d0e:	f8c3 8000 	str.w	r8, [r3]
 8003d12:	440a      	add	r2, r1
 8003d14:	9223      	str	r2, [sp, #140]	; 0x8c
 8003d16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d18:	3201      	adds	r2, #1
 8003d1a:	2a07      	cmp	r2, #7
 8003d1c:	9222      	str	r2, [sp, #136]	; 0x88
 8003d1e:	f73f ad59 	bgt.w	80037d4 <_svfprintf_r+0x648>
 8003d22:	f103 0408 	add.w	r4, r3, #8
 8003d26:	e55e      	b.n	80037e6 <_svfprintf_r+0x65a>
 8003d28:	aa21      	add	r2, sp, #132	; 0x84
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	f001 fd89 	bl	8005844 <__ssprint_r>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	f040 8187 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003d38:	ac2e      	add	r4, sp, #184	; 0xb8
 8003d3a:	e7b1      	b.n	8003ca0 <_svfprintf_r+0xb14>
 8003d3c:	aa21      	add	r2, sp, #132	; 0x84
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4650      	mov	r0, sl
 8003d42:	f001 fd7f 	bl	8005844 <__ssprint_r>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	f040 817d 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003d4c:	ab2e      	add	r3, sp, #184	; 0xb8
 8003d4e:	e7bd      	b.n	8003ccc <_svfprintf_r+0xb40>
 8003d50:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003d52:	605c      	str	r4, [r3, #4]
 8003d54:	3210      	adds	r2, #16
 8003d56:	9223      	str	r2, [sp, #140]	; 0x8c
 8003d58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d5a:	3201      	adds	r2, #1
 8003d5c:	2a07      	cmp	r2, #7
 8003d5e:	9222      	str	r2, [sp, #136]	; 0x88
 8003d60:	dc02      	bgt.n	8003d68 <_svfprintf_r+0xbdc>
 8003d62:	3308      	adds	r3, #8
 8003d64:	3e10      	subs	r6, #16
 8003d66:	e7b7      	b.n	8003cd8 <_svfprintf_r+0xb4c>
 8003d68:	aa21      	add	r2, sp, #132	; 0x84
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	f001 fd69 	bl	8005844 <__ssprint_r>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f040 8167 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003d78:	ab2e      	add	r3, sp, #184	; 0xb8
 8003d7a:	e7f3      	b.n	8003d64 <_svfprintf_r+0xbd8>
 8003d7c:	9b07      	ldr	r3, [sp, #28]
 8003d7e:	42bb      	cmp	r3, r7
 8003d80:	bfa8      	it	ge
 8003d82:	463b      	movge	r3, r7
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	461e      	mov	r6, r3
 8003d88:	dd0b      	ble.n	8003da2 <_svfprintf_r+0xc16>
 8003d8a:	6063      	str	r3, [r4, #4]
 8003d8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d8e:	f8c4 8000 	str.w	r8, [r4]
 8003d92:	4433      	add	r3, r6
 8003d94:	9323      	str	r3, [sp, #140]	; 0x8c
 8003d96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d98:	3301      	adds	r3, #1
 8003d9a:	2b07      	cmp	r3, #7
 8003d9c:	9322      	str	r3, [sp, #136]	; 0x88
 8003d9e:	dc5f      	bgt.n	8003e60 <_svfprintf_r+0xcd4>
 8003da0:	3408      	adds	r4, #8
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	bfb4      	ite	lt
 8003da6:	463e      	movlt	r6, r7
 8003da8:	1bbe      	subge	r6, r7, r6
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	dd0f      	ble.n	8003dce <_svfprintf_r+0xc42>
 8003dae:	f8df b148 	ldr.w	fp, [pc, #328]	; 8003ef8 <_svfprintf_r+0xd6c>
 8003db2:	2e10      	cmp	r6, #16
 8003db4:	f8c4 b000 	str.w	fp, [r4]
 8003db8:	dc5c      	bgt.n	8003e74 <_svfprintf_r+0xce8>
 8003dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003dbc:	6066      	str	r6, [r4, #4]
 8003dbe:	441e      	add	r6, r3
 8003dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dc2:	9623      	str	r6, [sp, #140]	; 0x8c
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	2b07      	cmp	r3, #7
 8003dc8:	9322      	str	r3, [sp, #136]	; 0x88
 8003dca:	dc6a      	bgt.n	8003ea2 <_svfprintf_r+0xd16>
 8003dcc:	3408      	adds	r4, #8
 8003dce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dd0:	9a07      	ldr	r2, [sp, #28]
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	db01      	blt.n	8003dda <_svfprintf_r+0xc4e>
 8003dd6:	07e9      	lsls	r1, r5, #31
 8003dd8:	d50d      	bpl.n	8003df6 <_svfprintf_r+0xc6a>
 8003dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de2:	6063      	str	r3, [r4, #4]
 8003de4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003de6:	4413      	add	r3, r2
 8003de8:	9323      	str	r3, [sp, #140]	; 0x8c
 8003dea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dec:	3301      	adds	r3, #1
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	9322      	str	r3, [sp, #136]	; 0x88
 8003df2:	dc60      	bgt.n	8003eb6 <_svfprintf_r+0xd2a>
 8003df4:	3408      	adds	r4, #8
 8003df6:	9b07      	ldr	r3, [sp, #28]
 8003df8:	9a07      	ldr	r2, [sp, #28]
 8003dfa:	1bde      	subs	r6, r3, r7
 8003dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	429e      	cmp	r6, r3
 8003e02:	bfa8      	it	ge
 8003e04:	461e      	movge	r6, r3
 8003e06:	2e00      	cmp	r6, #0
 8003e08:	dd0b      	ble.n	8003e22 <_svfprintf_r+0xc96>
 8003e0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e0c:	4447      	add	r7, r8
 8003e0e:	4433      	add	r3, r6
 8003e10:	9323      	str	r3, [sp, #140]	; 0x8c
 8003e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e14:	6027      	str	r7, [r4, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	2b07      	cmp	r3, #7
 8003e1a:	6066      	str	r6, [r4, #4]
 8003e1c:	9322      	str	r3, [sp, #136]	; 0x88
 8003e1e:	dc54      	bgt.n	8003eca <_svfprintf_r+0xd3e>
 8003e20:	3408      	adds	r4, #8
 8003e22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e24:	9a07      	ldr	r2, [sp, #28]
 8003e26:	2e00      	cmp	r6, #0
 8003e28:	eba2 0303 	sub.w	r3, r2, r3
 8003e2c:	bfb4      	ite	lt
 8003e2e:	461e      	movlt	r6, r3
 8003e30:	1b9e      	subge	r6, r3, r6
 8003e32:	2e00      	cmp	r6, #0
 8003e34:	f77f acd7 	ble.w	80037e6 <_svfprintf_r+0x65a>
 8003e38:	f04f 0810 	mov.w	r8, #16
 8003e3c:	4f2e      	ldr	r7, [pc, #184]	; (8003ef8 <_svfprintf_r+0xd6c>)
 8003e3e:	2e10      	cmp	r6, #16
 8003e40:	6027      	str	r7, [r4, #0]
 8003e42:	f77f aee7 	ble.w	8003c14 <_svfprintf_r+0xa88>
 8003e46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e48:	f8c4 8004 	str.w	r8, [r4, #4]
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003e50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e52:	3301      	adds	r3, #1
 8003e54:	2b07      	cmp	r3, #7
 8003e56:	9322      	str	r3, [sp, #136]	; 0x88
 8003e58:	dc41      	bgt.n	8003ede <_svfprintf_r+0xd52>
 8003e5a:	3408      	adds	r4, #8
 8003e5c:	3e10      	subs	r6, #16
 8003e5e:	e7ee      	b.n	8003e3e <_svfprintf_r+0xcb2>
 8003e60:	aa21      	add	r2, sp, #132	; 0x84
 8003e62:	4649      	mov	r1, r9
 8003e64:	4650      	mov	r0, sl
 8003e66:	f001 fced 	bl	8005844 <__ssprint_r>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	f040 80eb 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003e70:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e72:	e796      	b.n	8003da2 <_svfprintf_r+0xc16>
 8003e74:	2310      	movs	r3, #16
 8003e76:	6063      	str	r3, [r4, #4]
 8003e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e7a:	3310      	adds	r3, #16
 8003e7c:	9323      	str	r3, [sp, #140]	; 0x8c
 8003e7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e80:	3301      	adds	r3, #1
 8003e82:	2b07      	cmp	r3, #7
 8003e84:	9322      	str	r3, [sp, #136]	; 0x88
 8003e86:	dc02      	bgt.n	8003e8e <_svfprintf_r+0xd02>
 8003e88:	3408      	adds	r4, #8
 8003e8a:	3e10      	subs	r6, #16
 8003e8c:	e791      	b.n	8003db2 <_svfprintf_r+0xc26>
 8003e8e:	aa21      	add	r2, sp, #132	; 0x84
 8003e90:	4649      	mov	r1, r9
 8003e92:	4650      	mov	r0, sl
 8003e94:	f001 fcd6 	bl	8005844 <__ssprint_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f040 80d4 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003e9e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ea0:	e7f3      	b.n	8003e8a <_svfprintf_r+0xcfe>
 8003ea2:	aa21      	add	r2, sp, #132	; 0x84
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	f001 fccc 	bl	8005844 <__ssprint_r>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	f040 80ca 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003eb2:	ac2e      	add	r4, sp, #184	; 0xb8
 8003eb4:	e78b      	b.n	8003dce <_svfprintf_r+0xc42>
 8003eb6:	aa21      	add	r2, sp, #132	; 0x84
 8003eb8:	4649      	mov	r1, r9
 8003eba:	4650      	mov	r0, sl
 8003ebc:	f001 fcc2 	bl	8005844 <__ssprint_r>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f040 80c0 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003ec6:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ec8:	e795      	b.n	8003df6 <_svfprintf_r+0xc6a>
 8003eca:	aa21      	add	r2, sp, #132	; 0x84
 8003ecc:	4649      	mov	r1, r9
 8003ece:	4650      	mov	r0, sl
 8003ed0:	f001 fcb8 	bl	8005844 <__ssprint_r>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	f040 80b6 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003eda:	ac2e      	add	r4, sp, #184	; 0xb8
 8003edc:	e7a1      	b.n	8003e22 <_svfprintf_r+0xc96>
 8003ede:	aa21      	add	r2, sp, #132	; 0x84
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	4650      	mov	r0, sl
 8003ee4:	f001 fcae 	bl	8005844 <__ssprint_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	f040 80ac 	bne.w	8004046 <_svfprintf_r+0xeba>
 8003eee:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ef0:	e7b4      	b.n	8003e5c <_svfprintf_r+0xcd0>
 8003ef2:	bf00      	nop
 8003ef4:	08006d45 	.word	0x08006d45
 8003ef8:	08006d57 	.word	0x08006d57
 8003efc:	9b07      	ldr	r3, [sp, #28]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	dc01      	bgt.n	8003f06 <_svfprintf_r+0xd7a>
 8003f02:	07ea      	lsls	r2, r5, #31
 8003f04:	d576      	bpl.n	8003ff4 <_svfprintf_r+0xe68>
 8003f06:	2301      	movs	r3, #1
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f0c:	f8c4 8000 	str.w	r8, [r4]
 8003f10:	3301      	adds	r3, #1
 8003f12:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f16:	3301      	adds	r3, #1
 8003f18:	2b07      	cmp	r3, #7
 8003f1a:	9322      	str	r3, [sp, #136]	; 0x88
 8003f1c:	dc36      	bgt.n	8003f8c <_svfprintf_r+0xe00>
 8003f1e:	3408      	adds	r4, #8
 8003f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f28:	6063      	str	r3, [r4, #4]
 8003f2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f2c:	4413      	add	r3, r2
 8003f2e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f32:	3301      	adds	r3, #1
 8003f34:	2b07      	cmp	r3, #7
 8003f36:	9322      	str	r3, [sp, #136]	; 0x88
 8003f38:	dc31      	bgt.n	8003f9e <_svfprintf_r+0xe12>
 8003f3a:	3408      	adds	r4, #8
 8003f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003f44:	f7fc fd2c 	bl	80009a0 <__aeabi_dcmpeq>
 8003f48:	9b07      	ldr	r3, [sp, #28]
 8003f4a:	1e5e      	subs	r6, r3, #1
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d12f      	bne.n	8003fb0 <_svfprintf_r+0xe24>
 8003f50:	f108 0301 	add.w	r3, r8, #1
 8003f54:	e884 0048 	stmia.w	r4, {r3, r6}
 8003f58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f5a:	9a07      	ldr	r2, [sp, #28]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f64:	3301      	adds	r3, #1
 8003f66:	2b07      	cmp	r3, #7
 8003f68:	9322      	str	r3, [sp, #136]	; 0x88
 8003f6a:	dd4a      	ble.n	8004002 <_svfprintf_r+0xe76>
 8003f6c:	aa21      	add	r2, sp, #132	; 0x84
 8003f6e:	4649      	mov	r1, r9
 8003f70:	4650      	mov	r0, sl
 8003f72:	f001 fc67 	bl	8005844 <__ssprint_r>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d165      	bne.n	8004046 <_svfprintf_r+0xeba>
 8003f7a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003f7c:	ab1d      	add	r3, sp, #116	; 0x74
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003f84:	6063      	str	r3, [r4, #4]
 8003f86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f88:	4413      	add	r3, r2
 8003f8a:	e41c      	b.n	80037c6 <_svfprintf_r+0x63a>
 8003f8c:	aa21      	add	r2, sp, #132	; 0x84
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4650      	mov	r0, sl
 8003f92:	f001 fc57 	bl	8005844 <__ssprint_r>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d155      	bne.n	8004046 <_svfprintf_r+0xeba>
 8003f9a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003f9c:	e7c0      	b.n	8003f20 <_svfprintf_r+0xd94>
 8003f9e:	aa21      	add	r2, sp, #132	; 0x84
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	f001 fc4e 	bl	8005844 <__ssprint_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d14c      	bne.n	8004046 <_svfprintf_r+0xeba>
 8003fac:	ac2e      	add	r4, sp, #184	; 0xb8
 8003fae:	e7c5      	b.n	8003f3c <_svfprintf_r+0xdb0>
 8003fb0:	2e00      	cmp	r6, #0
 8003fb2:	dde3      	ble.n	8003f7c <_svfprintf_r+0xdf0>
 8003fb4:	f04f 0810 	mov.w	r8, #16
 8003fb8:	4f58      	ldr	r7, [pc, #352]	; (800411c <_svfprintf_r+0xf90>)
 8003fba:	2e10      	cmp	r6, #16
 8003fbc:	6027      	str	r7, [r4, #0]
 8003fbe:	dc04      	bgt.n	8003fca <_svfprintf_r+0xe3e>
 8003fc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fc2:	6066      	str	r6, [r4, #4]
 8003fc4:	441e      	add	r6, r3
 8003fc6:	9623      	str	r6, [sp, #140]	; 0x8c
 8003fc8:	e7cb      	b.n	8003f62 <_svfprintf_r+0xdd6>
 8003fca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fcc:	f8c4 8004 	str.w	r8, [r4, #4]
 8003fd0:	3310      	adds	r3, #16
 8003fd2:	9323      	str	r3, [sp, #140]	; 0x8c
 8003fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	2b07      	cmp	r3, #7
 8003fda:	9322      	str	r3, [sp, #136]	; 0x88
 8003fdc:	dc02      	bgt.n	8003fe4 <_svfprintf_r+0xe58>
 8003fde:	3408      	adds	r4, #8
 8003fe0:	3e10      	subs	r6, #16
 8003fe2:	e7ea      	b.n	8003fba <_svfprintf_r+0xe2e>
 8003fe4:	aa21      	add	r2, sp, #132	; 0x84
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	4650      	mov	r0, sl
 8003fea:	f001 fc2b 	bl	8005844 <__ssprint_r>
 8003fee:	bb50      	cbnz	r0, 8004046 <_svfprintf_r+0xeba>
 8003ff0:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ff2:	e7f5      	b.n	8003fe0 <_svfprintf_r+0xe54>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ffa:	f8c4 8000 	str.w	r8, [r4]
 8003ffe:	3301      	adds	r3, #1
 8004000:	e7ae      	b.n	8003f60 <_svfprintf_r+0xdd4>
 8004002:	3408      	adds	r4, #8
 8004004:	e7ba      	b.n	8003f7c <_svfprintf_r+0xdf0>
 8004006:	3408      	adds	r4, #8
 8004008:	f7ff bbed 	b.w	80037e6 <_svfprintf_r+0x65a>
 800400c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800400e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004010:	1a9d      	subs	r5, r3, r2
 8004012:	2d00      	cmp	r5, #0
 8004014:	f77f abea 	ble.w	80037ec <_svfprintf_r+0x660>
 8004018:	2610      	movs	r6, #16
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <_svfprintf_r+0xf94>)
 800401c:	2d10      	cmp	r5, #16
 800401e:	6023      	str	r3, [r4, #0]
 8004020:	dc1b      	bgt.n	800405a <_svfprintf_r+0xece>
 8004022:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004024:	6065      	str	r5, [r4, #4]
 8004026:	441d      	add	r5, r3
 8004028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800402a:	9523      	str	r5, [sp, #140]	; 0x8c
 800402c:	3301      	adds	r3, #1
 800402e:	2b07      	cmp	r3, #7
 8004030:	9322      	str	r3, [sp, #136]	; 0x88
 8004032:	f77f abdb 	ble.w	80037ec <_svfprintf_r+0x660>
 8004036:	aa21      	add	r2, sp, #132	; 0x84
 8004038:	4649      	mov	r1, r9
 800403a:	4650      	mov	r0, sl
 800403c:	f001 fc02 	bl	8005844 <__ssprint_r>
 8004040:	2800      	cmp	r0, #0
 8004042:	f43f abd3 	beq.w	80037ec <_svfprintf_r+0x660>
 8004046:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800404a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004050:	bf18      	it	ne
 8004052:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8004056:	f7ff b8bd 	b.w	80031d4 <_svfprintf_r+0x48>
 800405a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800405c:	6066      	str	r6, [r4, #4]
 800405e:	3310      	adds	r3, #16
 8004060:	9323      	str	r3, [sp, #140]	; 0x8c
 8004062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004064:	3301      	adds	r3, #1
 8004066:	2b07      	cmp	r3, #7
 8004068:	9322      	str	r3, [sp, #136]	; 0x88
 800406a:	dc02      	bgt.n	8004072 <_svfprintf_r+0xee6>
 800406c:	3408      	adds	r4, #8
 800406e:	3d10      	subs	r5, #16
 8004070:	e7d3      	b.n	800401a <_svfprintf_r+0xe8e>
 8004072:	aa21      	add	r2, sp, #132	; 0x84
 8004074:	4649      	mov	r1, r9
 8004076:	4650      	mov	r0, sl
 8004078:	f001 fbe4 	bl	8005844 <__ssprint_r>
 800407c:	2800      	cmp	r0, #0
 800407e:	d1e2      	bne.n	8004046 <_svfprintf_r+0xeba>
 8004080:	ac2e      	add	r4, sp, #184	; 0xb8
 8004082:	e7f4      	b.n	800406e <_svfprintf_r+0xee2>
 8004084:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0dd      	beq.n	8004046 <_svfprintf_r+0xeba>
 800408a:	aa21      	add	r2, sp, #132	; 0x84
 800408c:	4649      	mov	r1, r9
 800408e:	4650      	mov	r0, sl
 8004090:	f001 fbd8 	bl	8005844 <__ssprint_r>
 8004094:	e7d7      	b.n	8004046 <_svfprintf_r+0xeba>
 8004096:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800409a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800409c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800409e:	f7fc fcb1 	bl	8000a04 <__aeabi_dcmpun>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	f43f aa3d 	beq.w	8003522 <_svfprintf_r+0x396>
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <_svfprintf_r+0xf98>)
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <_svfprintf_r+0xf9c>)
 80040ac:	f7ff ba2d 	b.w	800350a <_svfprintf_r+0x37e>
 80040b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040b2:	eba3 0308 	sub.w	r3, r3, r8
 80040b6:	9307      	str	r3, [sp, #28]
 80040b8:	f7ff baaf 	b.w	800361a <_svfprintf_r+0x48e>
 80040bc:	ea56 0207 	orrs.w	r2, r6, r7
 80040c0:	950f      	str	r5, [sp, #60]	; 0x3c
 80040c2:	f43f ac2b 	beq.w	800391c <_svfprintf_r+0x790>
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f43f ac9d 	beq.w	8003a06 <_svfprintf_r+0x87a>
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	f43f acbd 	beq.w	8003a4c <_svfprintf_r+0x8c0>
 80040d2:	ab2e      	add	r3, sp, #184	; 0xb8
 80040d4:	08f1      	lsrs	r1, r6, #3
 80040d6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80040da:	08f8      	lsrs	r0, r7, #3
 80040dc:	f006 0207 	and.w	r2, r6, #7
 80040e0:	4607      	mov	r7, r0
 80040e2:	460e      	mov	r6, r1
 80040e4:	3230      	adds	r2, #48	; 0x30
 80040e6:	ea56 0107 	orrs.w	r1, r6, r7
 80040ea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80040ee:	f803 2c01 	strb.w	r2, [r3, #-1]
 80040f2:	f47f ac86 	bne.w	8003a02 <_svfprintf_r+0x876>
 80040f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80040f8:	07c9      	lsls	r1, r1, #31
 80040fa:	d506      	bpl.n	800410a <_svfprintf_r+0xf7e>
 80040fc:	2a30      	cmp	r2, #48	; 0x30
 80040fe:	d004      	beq.n	800410a <_svfprintf_r+0xf7e>
 8004100:	2230      	movs	r2, #48	; 0x30
 8004102:	f808 2c01 	strb.w	r2, [r8, #-1]
 8004106:	f1a3 0802 	sub.w	r8, r3, #2
 800410a:	ab2e      	add	r3, sp, #184	; 0xb8
 800410c:	465e      	mov	r6, fp
 800410e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004110:	eba3 0b08 	sub.w	fp, r3, r8
 8004114:	2700      	movs	r7, #0
 8004116:	f7ff bace 	b.w	80036b6 <_svfprintf_r+0x52a>
 800411a:	bf00      	nop
 800411c:	08006d57 	.word	0x08006d57
 8004120:	08006d47 	.word	0x08006d47
 8004124:	08006d1b 	.word	0x08006d1b
 8004128:	08006d1f 	.word	0x08006d1f

0800412c <quorem>:
 800412c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	6903      	ldr	r3, [r0, #16]
 8004132:	690c      	ldr	r4, [r1, #16]
 8004134:	4680      	mov	r8, r0
 8004136:	429c      	cmp	r4, r3
 8004138:	f300 8082 	bgt.w	8004240 <quorem+0x114>
 800413c:	3c01      	subs	r4, #1
 800413e:	f101 0714 	add.w	r7, r1, #20
 8004142:	f100 0614 	add.w	r6, r0, #20
 8004146:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800414a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800414e:	3501      	adds	r5, #1
 8004150:	fbb0 f5f5 	udiv	r5, r0, r5
 8004154:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004158:	eb06 030e 	add.w	r3, r6, lr
 800415c:	eb07 090e 	add.w	r9, r7, lr
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	b38d      	cbz	r5, 80041c8 <quorem+0x9c>
 8004164:	f04f 0a00 	mov.w	sl, #0
 8004168:	4638      	mov	r0, r7
 800416a:	46b4      	mov	ip, r6
 800416c:	46d3      	mov	fp, sl
 800416e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004172:	b293      	uxth	r3, r2
 8004174:	fb05 a303 	mla	r3, r5, r3, sl
 8004178:	0c12      	lsrs	r2, r2, #16
 800417a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800417e:	fb05 a202 	mla	r2, r5, r2, sl
 8004182:	b29b      	uxth	r3, r3
 8004184:	ebab 0303 	sub.w	r3, fp, r3
 8004188:	f8bc b000 	ldrh.w	fp, [ip]
 800418c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004190:	445b      	add	r3, fp
 8004192:	fa1f fb82 	uxth.w	fp, r2
 8004196:	f8dc 2000 	ldr.w	r2, [ip]
 800419a:	4581      	cmp	r9, r0
 800419c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80041a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041aa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80041ae:	f84c 3b04 	str.w	r3, [ip], #4
 80041b2:	d2dc      	bcs.n	800416e <quorem+0x42>
 80041b4:	f856 300e 	ldr.w	r3, [r6, lr]
 80041b8:	b933      	cbnz	r3, 80041c8 <quorem+0x9c>
 80041ba:	9b01      	ldr	r3, [sp, #4]
 80041bc:	3b04      	subs	r3, #4
 80041be:	429e      	cmp	r6, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	d331      	bcc.n	8004228 <quorem+0xfc>
 80041c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80041c8:	4640      	mov	r0, r8
 80041ca:	f001 fa62 	bl	8005692 <__mcmp>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	db26      	blt.n	8004220 <quorem+0xf4>
 80041d2:	4630      	mov	r0, r6
 80041d4:	f04f 0e00 	mov.w	lr, #0
 80041d8:	3501      	adds	r5, #1
 80041da:	f857 1b04 	ldr.w	r1, [r7], #4
 80041de:	f8d0 c000 	ldr.w	ip, [r0]
 80041e2:	b28b      	uxth	r3, r1
 80041e4:	ebae 0303 	sub.w	r3, lr, r3
 80041e8:	fa1f f28c 	uxth.w	r2, ip
 80041ec:	4413      	add	r3, r2
 80041ee:	0c0a      	lsrs	r2, r1, #16
 80041f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80041f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041fe:	45b9      	cmp	r9, r7
 8004200:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004204:	f840 3b04 	str.w	r3, [r0], #4
 8004208:	d2e7      	bcs.n	80041da <quorem+0xae>
 800420a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800420e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004212:	b92a      	cbnz	r2, 8004220 <quorem+0xf4>
 8004214:	3b04      	subs	r3, #4
 8004216:	429e      	cmp	r6, r3
 8004218:	461a      	mov	r2, r3
 800421a:	d30b      	bcc.n	8004234 <quorem+0x108>
 800421c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004220:	4628      	mov	r0, r5
 8004222:	b003      	add	sp, #12
 8004224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	3b04      	subs	r3, #4
 800422c:	2a00      	cmp	r2, #0
 800422e:	d1c9      	bne.n	80041c4 <quorem+0x98>
 8004230:	3c01      	subs	r4, #1
 8004232:	e7c4      	b.n	80041be <quorem+0x92>
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	3b04      	subs	r3, #4
 8004238:	2a00      	cmp	r2, #0
 800423a:	d1ef      	bne.n	800421c <quorem+0xf0>
 800423c:	3c01      	subs	r4, #1
 800423e:	e7ea      	b.n	8004216 <quorem+0xea>
 8004240:	2000      	movs	r0, #0
 8004242:	e7ee      	b.n	8004222 <quorem+0xf6>
 8004244:	0000      	movs	r0, r0
	...

08004248 <_dtoa_r>:
 8004248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800424e:	b095      	sub	sp, #84	; 0x54
 8004250:	4604      	mov	r4, r0
 8004252:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004258:	b93e      	cbnz	r6, 800426a <_dtoa_r+0x22>
 800425a:	2010      	movs	r0, #16
 800425c:	f000 fdd6 	bl	8004e0c <malloc>
 8004260:	6260      	str	r0, [r4, #36]	; 0x24
 8004262:	6046      	str	r6, [r0, #4]
 8004264:	6086      	str	r6, [r0, #8]
 8004266:	6006      	str	r6, [r0, #0]
 8004268:	60c6      	str	r6, [r0, #12]
 800426a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800426c:	6819      	ldr	r1, [r3, #0]
 800426e:	b151      	cbz	r1, 8004286 <_dtoa_r+0x3e>
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	2301      	movs	r3, #1
 8004274:	4093      	lsls	r3, r2
 8004276:	604a      	str	r2, [r1, #4]
 8004278:	608b      	str	r3, [r1, #8]
 800427a:	4620      	mov	r0, r4
 800427c:	f001 f834 	bl	80052e8 <_Bfree>
 8004280:	2200      	movs	r2, #0
 8004282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfb7      	itett	lt
 800428c:	2301      	movlt	r3, #1
 800428e:	2300      	movge	r3, #0
 8004290:	602b      	strlt	r3, [r5, #0]
 8004292:	9b03      	ldrlt	r3, [sp, #12]
 8004294:	bfae      	itee	ge
 8004296:	602b      	strge	r3, [r5, #0]
 8004298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800429c:	9303      	strlt	r3, [sp, #12]
 800429e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80042a2:	4bab      	ldr	r3, [pc, #684]	; (8004550 <_dtoa_r+0x308>)
 80042a4:	ea33 0309 	bics.w	r3, r3, r9
 80042a8:	d11b      	bne.n	80042e2 <_dtoa_r+0x9a>
 80042aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80042ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	9b02      	ldr	r3, [sp, #8]
 80042b4:	b923      	cbnz	r3, 80042c0 <_dtoa_r+0x78>
 80042b6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f000 8583 	beq.w	8004dc6 <_dtoa_r+0xb7e>
 80042c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042c2:	b953      	cbnz	r3, 80042da <_dtoa_r+0x92>
 80042c4:	4ba3      	ldr	r3, [pc, #652]	; (8004554 <_dtoa_r+0x30c>)
 80042c6:	e021      	b.n	800430c <_dtoa_r+0xc4>
 80042c8:	4ba3      	ldr	r3, [pc, #652]	; (8004558 <_dtoa_r+0x310>)
 80042ca:	9306      	str	r3, [sp, #24]
 80042cc:	3308      	adds	r3, #8
 80042ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	9806      	ldr	r0, [sp, #24]
 80042d4:	b015      	add	sp, #84	; 0x54
 80042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042da:	4b9e      	ldr	r3, [pc, #632]	; (8004554 <_dtoa_r+0x30c>)
 80042dc:	9306      	str	r3, [sp, #24]
 80042de:	3303      	adds	r3, #3
 80042e0:	e7f5      	b.n	80042ce <_dtoa_r+0x86>
 80042e2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2300      	movs	r3, #0
 80042ea:	4630      	mov	r0, r6
 80042ec:	4639      	mov	r1, r7
 80042ee:	f7fc fb57 	bl	80009a0 <__aeabi_dcmpeq>
 80042f2:	4680      	mov	r8, r0
 80042f4:	b160      	cbz	r0, 8004310 <_dtoa_r+0xc8>
 80042f6:	2301      	movs	r3, #1
 80042f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 855e 	beq.w	8004dc0 <_dtoa_r+0xb78>
 8004304:	4b95      	ldr	r3, [pc, #596]	; (800455c <_dtoa_r+0x314>)
 8004306:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	3b01      	subs	r3, #1
 800430c:	9306      	str	r3, [sp, #24]
 800430e:	e7e0      	b.n	80042d2 <_dtoa_r+0x8a>
 8004310:	ab12      	add	r3, sp, #72	; 0x48
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	ab13      	add	r3, sp, #76	; 0x4c
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4632      	mov	r2, r6
 800431a:	463b      	mov	r3, r7
 800431c:	4620      	mov	r0, r4
 800431e:	f001 fa31 	bl	8005784 <__d2b>
 8004322:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004326:	4682      	mov	sl, r0
 8004328:	2d00      	cmp	r5, #0
 800432a:	d07d      	beq.n	8004428 <_dtoa_r+0x1e0>
 800432c:	4630      	mov	r0, r6
 800432e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004332:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004336:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800433a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800433e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004342:	2200      	movs	r2, #0
 8004344:	4b86      	ldr	r3, [pc, #536]	; (8004560 <_dtoa_r+0x318>)
 8004346:	f7fb ff0f 	bl	8000168 <__aeabi_dsub>
 800434a:	a37b      	add	r3, pc, #492	; (adr r3, 8004538 <_dtoa_r+0x2f0>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f7fc f8be 	bl	80004d0 <__aeabi_dmul>
 8004354:	a37a      	add	r3, pc, #488	; (adr r3, 8004540 <_dtoa_r+0x2f8>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f7fb ff07 	bl	800016c <__adddf3>
 800435e:	4606      	mov	r6, r0
 8004360:	4628      	mov	r0, r5
 8004362:	460f      	mov	r7, r1
 8004364:	f7fc f84e 	bl	8000404 <__aeabi_i2d>
 8004368:	a377      	add	r3, pc, #476	; (adr r3, 8004548 <_dtoa_r+0x300>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc f8af 	bl	80004d0 <__aeabi_dmul>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4630      	mov	r0, r6
 8004378:	4639      	mov	r1, r7
 800437a:	f7fb fef7 	bl	800016c <__adddf3>
 800437e:	4606      	mov	r6, r0
 8004380:	460f      	mov	r7, r1
 8004382:	f7fc fb55 	bl	8000a30 <__aeabi_d2iz>
 8004386:	2200      	movs	r2, #0
 8004388:	4683      	mov	fp, r0
 800438a:	2300      	movs	r3, #0
 800438c:	4630      	mov	r0, r6
 800438e:	4639      	mov	r1, r7
 8004390:	f7fc fb10 	bl	80009b4 <__aeabi_dcmplt>
 8004394:	b158      	cbz	r0, 80043ae <_dtoa_r+0x166>
 8004396:	4658      	mov	r0, fp
 8004398:	f7fc f834 	bl	8000404 <__aeabi_i2d>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4630      	mov	r0, r6
 80043a2:	4639      	mov	r1, r7
 80043a4:	f7fc fafc 	bl	80009a0 <__aeabi_dcmpeq>
 80043a8:	b908      	cbnz	r0, 80043ae <_dtoa_r+0x166>
 80043aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80043ae:	f1bb 0f16 	cmp.w	fp, #22
 80043b2:	d858      	bhi.n	8004466 <_dtoa_r+0x21e>
 80043b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043b8:	496a      	ldr	r1, [pc, #424]	; (8004564 <_dtoa_r+0x31c>)
 80043ba:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80043be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c2:	f7fc fb15 	bl	80009f0 <__aeabi_dcmpgt>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d04f      	beq.n	800446a <_dtoa_r+0x222>
 80043ca:	2300      	movs	r3, #0
 80043cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80043d0:	930d      	str	r3, [sp, #52]	; 0x34
 80043d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043d4:	1b5d      	subs	r5, r3, r5
 80043d6:	1e6b      	subs	r3, r5, #1
 80043d8:	9307      	str	r3, [sp, #28]
 80043da:	bf43      	ittte	mi
 80043dc:	2300      	movmi	r3, #0
 80043de:	f1c5 0801 	rsbmi	r8, r5, #1
 80043e2:	9307      	strmi	r3, [sp, #28]
 80043e4:	f04f 0800 	movpl.w	r8, #0
 80043e8:	f1bb 0f00 	cmp.w	fp, #0
 80043ec:	db3f      	blt.n	800446e <_dtoa_r+0x226>
 80043ee:	9b07      	ldr	r3, [sp, #28]
 80043f0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80043f4:	445b      	add	r3, fp
 80043f6:	9307      	str	r3, [sp, #28]
 80043f8:	2300      	movs	r3, #0
 80043fa:	9308      	str	r3, [sp, #32]
 80043fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043fe:	2b09      	cmp	r3, #9
 8004400:	f200 80b4 	bhi.w	800456c <_dtoa_r+0x324>
 8004404:	2b05      	cmp	r3, #5
 8004406:	bfc4      	itt	gt
 8004408:	3b04      	subgt	r3, #4
 800440a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800440c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800440e:	bfc8      	it	gt
 8004410:	2600      	movgt	r6, #0
 8004412:	f1a3 0302 	sub.w	r3, r3, #2
 8004416:	bfd8      	it	le
 8004418:	2601      	movle	r6, #1
 800441a:	2b03      	cmp	r3, #3
 800441c:	f200 80b2 	bhi.w	8004584 <_dtoa_r+0x33c>
 8004420:	e8df f003 	tbb	[pc, r3]
 8004424:	782d8684 	.word	0x782d8684
 8004428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800442a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800442c:	441d      	add	r5, r3
 800442e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004432:	2b20      	cmp	r3, #32
 8004434:	dd11      	ble.n	800445a <_dtoa_r+0x212>
 8004436:	9a02      	ldr	r2, [sp, #8]
 8004438:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800443c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004440:	fa22 f000 	lsr.w	r0, r2, r0
 8004444:	fa09 f303 	lsl.w	r3, r9, r3
 8004448:	4318      	orrs	r0, r3
 800444a:	f7fb ffcb 	bl	80003e4 <__aeabi_ui2d>
 800444e:	2301      	movs	r3, #1
 8004450:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004454:	3d01      	subs	r5, #1
 8004456:	9310      	str	r3, [sp, #64]	; 0x40
 8004458:	e773      	b.n	8004342 <_dtoa_r+0xfa>
 800445a:	f1c3 0020 	rsb	r0, r3, #32
 800445e:	9b02      	ldr	r3, [sp, #8]
 8004460:	fa03 f000 	lsl.w	r0, r3, r0
 8004464:	e7f1      	b.n	800444a <_dtoa_r+0x202>
 8004466:	2301      	movs	r3, #1
 8004468:	e7b2      	b.n	80043d0 <_dtoa_r+0x188>
 800446a:	900d      	str	r0, [sp, #52]	; 0x34
 800446c:	e7b1      	b.n	80043d2 <_dtoa_r+0x18a>
 800446e:	f1cb 0300 	rsb	r3, fp, #0
 8004472:	9308      	str	r3, [sp, #32]
 8004474:	2300      	movs	r3, #0
 8004476:	eba8 080b 	sub.w	r8, r8, fp
 800447a:	930c      	str	r3, [sp, #48]	; 0x30
 800447c:	e7be      	b.n	80043fc <_dtoa_r+0x1b4>
 800447e:	2301      	movs	r3, #1
 8004480:	9309      	str	r3, [sp, #36]	; 0x24
 8004482:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004484:	2b00      	cmp	r3, #0
 8004486:	f340 8080 	ble.w	800458a <_dtoa_r+0x342>
 800448a:	4699      	mov	r9, r3
 800448c:	9304      	str	r3, [sp, #16]
 800448e:	2200      	movs	r2, #0
 8004490:	2104      	movs	r1, #4
 8004492:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004494:	606a      	str	r2, [r5, #4]
 8004496:	f101 0214 	add.w	r2, r1, #20
 800449a:	429a      	cmp	r2, r3
 800449c:	d97a      	bls.n	8004594 <_dtoa_r+0x34c>
 800449e:	6869      	ldr	r1, [r5, #4]
 80044a0:	4620      	mov	r0, r4
 80044a2:	f000 feed 	bl	8005280 <_Balloc>
 80044a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a8:	6028      	str	r0, [r5, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b9 0f0e 	cmp.w	r9, #14
 80044b0:	9306      	str	r3, [sp, #24]
 80044b2:	f200 80f0 	bhi.w	8004696 <_dtoa_r+0x44e>
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	f000 80ed 	beq.w	8004696 <_dtoa_r+0x44e>
 80044bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044c0:	f1bb 0f00 	cmp.w	fp, #0
 80044c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80044c8:	dd79      	ble.n	80045be <_dtoa_r+0x376>
 80044ca:	4a26      	ldr	r2, [pc, #152]	; (8004564 <_dtoa_r+0x31c>)
 80044cc:	f00b 030f 	and.w	r3, fp, #15
 80044d0:	ea4f 162b 	mov.w	r6, fp, asr #4
 80044d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044d8:	06f0      	lsls	r0, r6, #27
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80044e2:	d55c      	bpl.n	800459e <_dtoa_r+0x356>
 80044e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80044e8:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <_dtoa_r+0x320>)
 80044ea:	2503      	movs	r5, #3
 80044ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044f0:	f7fc f918 	bl	8000724 <__aeabi_ddiv>
 80044f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044f8:	f006 060f 	and.w	r6, r6, #15
 80044fc:	4f1a      	ldr	r7, [pc, #104]	; (8004568 <_dtoa_r+0x320>)
 80044fe:	2e00      	cmp	r6, #0
 8004500:	d14f      	bne.n	80045a2 <_dtoa_r+0x35a>
 8004502:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800450a:	f7fc f90b 	bl	8000724 <__aeabi_ddiv>
 800450e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004512:	e06e      	b.n	80045f2 <_dtoa_r+0x3aa>
 8004514:	2301      	movs	r3, #1
 8004516:	9309      	str	r3, [sp, #36]	; 0x24
 8004518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800451a:	445b      	add	r3, fp
 800451c:	f103 0901 	add.w	r9, r3, #1
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	464b      	mov	r3, r9
 8004524:	2b01      	cmp	r3, #1
 8004526:	bfb8      	it	lt
 8004528:	2301      	movlt	r3, #1
 800452a:	e7b0      	b.n	800448e <_dtoa_r+0x246>
 800452c:	2300      	movs	r3, #0
 800452e:	e7a7      	b.n	8004480 <_dtoa_r+0x238>
 8004530:	2300      	movs	r3, #0
 8004532:	e7f0      	b.n	8004516 <_dtoa_r+0x2ce>
 8004534:	f3af 8000 	nop.w
 8004538:	636f4361 	.word	0x636f4361
 800453c:	3fd287a7 	.word	0x3fd287a7
 8004540:	8b60c8b3 	.word	0x8b60c8b3
 8004544:	3fc68a28 	.word	0x3fc68a28
 8004548:	509f79fb 	.word	0x509f79fb
 800454c:	3fd34413 	.word	0x3fd34413
 8004550:	7ff00000 	.word	0x7ff00000
 8004554:	08006d70 	.word	0x08006d70
 8004558:	08006d67 	.word	0x08006d67
 800455c:	08006d46 	.word	0x08006d46
 8004560:	3ff80000 	.word	0x3ff80000
 8004564:	08006da0 	.word	0x08006da0
 8004568:	08006d78 	.word	0x08006d78
 800456c:	2601      	movs	r6, #1
 800456e:	2300      	movs	r3, #0
 8004570:	9609      	str	r6, [sp, #36]	; 0x24
 8004572:	931e      	str	r3, [sp, #120]	; 0x78
 8004574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004578:	2200      	movs	r2, #0
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	4699      	mov	r9, r3
 800457e:	2312      	movs	r3, #18
 8004580:	921f      	str	r2, [sp, #124]	; 0x7c
 8004582:	e784      	b.n	800448e <_dtoa_r+0x246>
 8004584:	2301      	movs	r3, #1
 8004586:	9309      	str	r3, [sp, #36]	; 0x24
 8004588:	e7f4      	b.n	8004574 <_dtoa_r+0x32c>
 800458a:	2301      	movs	r3, #1
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	4699      	mov	r9, r3
 8004590:	461a      	mov	r2, r3
 8004592:	e7f5      	b.n	8004580 <_dtoa_r+0x338>
 8004594:	686a      	ldr	r2, [r5, #4]
 8004596:	0049      	lsls	r1, r1, #1
 8004598:	3201      	adds	r2, #1
 800459a:	606a      	str	r2, [r5, #4]
 800459c:	e77b      	b.n	8004496 <_dtoa_r+0x24e>
 800459e:	2502      	movs	r5, #2
 80045a0:	e7ac      	b.n	80044fc <_dtoa_r+0x2b4>
 80045a2:	07f1      	lsls	r1, r6, #31
 80045a4:	d508      	bpl.n	80045b8 <_dtoa_r+0x370>
 80045a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ae:	f7fb ff8f 	bl	80004d0 <__aeabi_dmul>
 80045b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045b6:	3501      	adds	r5, #1
 80045b8:	1076      	asrs	r6, r6, #1
 80045ba:	3708      	adds	r7, #8
 80045bc:	e79f      	b.n	80044fe <_dtoa_r+0x2b6>
 80045be:	f000 80a5 	beq.w	800470c <_dtoa_r+0x4c4>
 80045c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045c6:	f1cb 0600 	rsb	r6, fp, #0
 80045ca:	4ba2      	ldr	r3, [pc, #648]	; (8004854 <_dtoa_r+0x60c>)
 80045cc:	f006 020f 	and.w	r2, r6, #15
 80045d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb ff7a 	bl	80004d0 <__aeabi_dmul>
 80045dc:	2502      	movs	r5, #2
 80045de:	2300      	movs	r3, #0
 80045e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045e4:	4f9c      	ldr	r7, [pc, #624]	; (8004858 <_dtoa_r+0x610>)
 80045e6:	1136      	asrs	r6, r6, #4
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	f040 8084 	bne.w	80046f6 <_dtoa_r+0x4ae>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d18d      	bne.n	800450e <_dtoa_r+0x2c6>
 80045f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 808b 	beq.w	8004710 <_dtoa_r+0x4c8>
 80045fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004602:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004606:	2200      	movs	r2, #0
 8004608:	4b94      	ldr	r3, [pc, #592]	; (800485c <_dtoa_r+0x614>)
 800460a:	f7fc f9d3 	bl	80009b4 <__aeabi_dcmplt>
 800460e:	2800      	cmp	r0, #0
 8004610:	d07e      	beq.n	8004710 <_dtoa_r+0x4c8>
 8004612:	f1b9 0f00 	cmp.w	r9, #0
 8004616:	d07b      	beq.n	8004710 <_dtoa_r+0x4c8>
 8004618:	9b04      	ldr	r3, [sp, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	dd37      	ble.n	800468e <_dtoa_r+0x446>
 800461e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004622:	2200      	movs	r2, #0
 8004624:	4b8e      	ldr	r3, [pc, #568]	; (8004860 <_dtoa_r+0x618>)
 8004626:	f7fb ff53 	bl	80004d0 <__aeabi_dmul>
 800462a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800462e:	9e04      	ldr	r6, [sp, #16]
 8004630:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004634:	3501      	adds	r5, #1
 8004636:	4628      	mov	r0, r5
 8004638:	f7fb fee4 	bl	8000404 <__aeabi_i2d>
 800463c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004640:	f7fb ff46 	bl	80004d0 <__aeabi_dmul>
 8004644:	4b87      	ldr	r3, [pc, #540]	; (8004864 <_dtoa_r+0x61c>)
 8004646:	2200      	movs	r2, #0
 8004648:	f7fb fd90 	bl	800016c <__adddf3>
 800464c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004652:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8004656:	950b      	str	r5, [sp, #44]	; 0x2c
 8004658:	2e00      	cmp	r6, #0
 800465a:	d15c      	bne.n	8004716 <_dtoa_r+0x4ce>
 800465c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004660:	2200      	movs	r2, #0
 8004662:	4b81      	ldr	r3, [pc, #516]	; (8004868 <_dtoa_r+0x620>)
 8004664:	f7fb fd80 	bl	8000168 <__aeabi_dsub>
 8004668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800466a:	462b      	mov	r3, r5
 800466c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004670:	f7fc f9be 	bl	80009f0 <__aeabi_dcmpgt>
 8004674:	2800      	cmp	r0, #0
 8004676:	f040 82f7 	bne.w	8004c68 <_dtoa_r+0xa20>
 800467a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800467e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004680:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004684:	f7fc f996 	bl	80009b4 <__aeabi_dcmplt>
 8004688:	2800      	cmp	r0, #0
 800468a:	f040 82eb 	bne.w	8004c64 <_dtoa_r+0xa1c>
 800468e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004692:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004696:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004698:	2b00      	cmp	r3, #0
 800469a:	f2c0 8150 	blt.w	800493e <_dtoa_r+0x6f6>
 800469e:	f1bb 0f0e 	cmp.w	fp, #14
 80046a2:	f300 814c 	bgt.w	800493e <_dtoa_r+0x6f6>
 80046a6:	4b6b      	ldr	r3, [pc, #428]	; (8004854 <_dtoa_r+0x60c>)
 80046a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f280 80da 	bge.w	8004870 <_dtoa_r+0x628>
 80046bc:	f1b9 0f00 	cmp.w	r9, #0
 80046c0:	f300 80d6 	bgt.w	8004870 <_dtoa_r+0x628>
 80046c4:	f040 82cd 	bne.w	8004c62 <_dtoa_r+0xa1a>
 80046c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046cc:	2200      	movs	r2, #0
 80046ce:	4b66      	ldr	r3, [pc, #408]	; (8004868 <_dtoa_r+0x620>)
 80046d0:	f7fb fefe 	bl	80004d0 <__aeabi_dmul>
 80046d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046d8:	f7fc f980 	bl	80009dc <__aeabi_dcmpge>
 80046dc:	464e      	mov	r6, r9
 80046de:	464f      	mov	r7, r9
 80046e0:	2800      	cmp	r0, #0
 80046e2:	f040 82a4 	bne.w	8004c2e <_dtoa_r+0x9e6>
 80046e6:	9b06      	ldr	r3, [sp, #24]
 80046e8:	9a06      	ldr	r2, [sp, #24]
 80046ea:	1c5d      	adds	r5, r3, #1
 80046ec:	2331      	movs	r3, #49	; 0x31
 80046ee:	f10b 0b01 	add.w	fp, fp, #1
 80046f2:	7013      	strb	r3, [r2, #0]
 80046f4:	e29f      	b.n	8004c36 <_dtoa_r+0x9ee>
 80046f6:	07f2      	lsls	r2, r6, #31
 80046f8:	d505      	bpl.n	8004706 <_dtoa_r+0x4be>
 80046fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046fe:	f7fb fee7 	bl	80004d0 <__aeabi_dmul>
 8004702:	2301      	movs	r3, #1
 8004704:	3501      	adds	r5, #1
 8004706:	1076      	asrs	r6, r6, #1
 8004708:	3708      	adds	r7, #8
 800470a:	e76d      	b.n	80045e8 <_dtoa_r+0x3a0>
 800470c:	2502      	movs	r5, #2
 800470e:	e770      	b.n	80045f2 <_dtoa_r+0x3aa>
 8004710:	465f      	mov	r7, fp
 8004712:	464e      	mov	r6, r9
 8004714:	e78f      	b.n	8004636 <_dtoa_r+0x3ee>
 8004716:	9a06      	ldr	r2, [sp, #24]
 8004718:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <_dtoa_r+0x60c>)
 800471a:	4432      	add	r2, r6
 800471c:	9211      	str	r2, [sp, #68]	; 0x44
 800471e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004720:	1e71      	subs	r1, r6, #1
 8004722:	2a00      	cmp	r2, #0
 8004724:	d048      	beq.n	80047b8 <_dtoa_r+0x570>
 8004726:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	2000      	movs	r0, #0
 8004730:	494e      	ldr	r1, [pc, #312]	; (800486c <_dtoa_r+0x624>)
 8004732:	f7fb fff7 	bl	8000724 <__aeabi_ddiv>
 8004736:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800473a:	f7fb fd15 	bl	8000168 <__aeabi_dsub>
 800473e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004742:	9d06      	ldr	r5, [sp, #24]
 8004744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004748:	f7fc f972 	bl	8000a30 <__aeabi_d2iz>
 800474c:	4606      	mov	r6, r0
 800474e:	f7fb fe59 	bl	8000404 <__aeabi_i2d>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800475a:	f7fb fd05 	bl	8000168 <__aeabi_dsub>
 800475e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004762:	3630      	adds	r6, #48	; 0x30
 8004764:	f805 6b01 	strb.w	r6, [r5], #1
 8004768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800476c:	f7fc f922 	bl	80009b4 <__aeabi_dcmplt>
 8004770:	2800      	cmp	r0, #0
 8004772:	d164      	bne.n	800483e <_dtoa_r+0x5f6>
 8004774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004778:	2000      	movs	r0, #0
 800477a:	4938      	ldr	r1, [pc, #224]	; (800485c <_dtoa_r+0x614>)
 800477c:	f7fb fcf4 	bl	8000168 <__aeabi_dsub>
 8004780:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004784:	f7fc f916 	bl	80009b4 <__aeabi_dcmplt>
 8004788:	2800      	cmp	r0, #0
 800478a:	f040 80b9 	bne.w	8004900 <_dtoa_r+0x6b8>
 800478e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004790:	429d      	cmp	r5, r3
 8004792:	f43f af7c 	beq.w	800468e <_dtoa_r+0x446>
 8004796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800479a:	2200      	movs	r2, #0
 800479c:	4b30      	ldr	r3, [pc, #192]	; (8004860 <_dtoa_r+0x618>)
 800479e:	f7fb fe97 	bl	80004d0 <__aeabi_dmul>
 80047a2:	2200      	movs	r2, #0
 80047a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <_dtoa_r+0x618>)
 80047ae:	f7fb fe8f 	bl	80004d0 <__aeabi_dmul>
 80047b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047b6:	e7c5      	b.n	8004744 <_dtoa_r+0x4fc>
 80047b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80047bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80047c4:	f7fb fe84 	bl	80004d0 <__aeabi_dmul>
 80047c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047cc:	9d06      	ldr	r5, [sp, #24]
 80047ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047d2:	f7fc f92d 	bl	8000a30 <__aeabi_d2iz>
 80047d6:	4606      	mov	r6, r0
 80047d8:	f7fb fe14 	bl	8000404 <__aeabi_i2d>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047e4:	f7fb fcc0 	bl	8000168 <__aeabi_dsub>
 80047e8:	3630      	adds	r6, #48	; 0x30
 80047ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047ec:	f805 6b01 	strb.w	r6, [r5], #1
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	d124      	bne.n	8004846 <_dtoa_r+0x5fe>
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <_dtoa_r+0x624>)
 80047fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004802:	f7fb fcb3 	bl	800016c <__adddf3>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800480e:	f7fc f8ef 	bl	80009f0 <__aeabi_dcmpgt>
 8004812:	2800      	cmp	r0, #0
 8004814:	d174      	bne.n	8004900 <_dtoa_r+0x6b8>
 8004816:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800481a:	2000      	movs	r0, #0
 800481c:	4913      	ldr	r1, [pc, #76]	; (800486c <_dtoa_r+0x624>)
 800481e:	f7fb fca3 	bl	8000168 <__aeabi_dsub>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800482a:	f7fc f8c3 	bl	80009b4 <__aeabi_dcmplt>
 800482e:	2800      	cmp	r0, #0
 8004830:	f43f af2d 	beq.w	800468e <_dtoa_r+0x446>
 8004834:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004838:	1e6a      	subs	r2, r5, #1
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d001      	beq.n	8004842 <_dtoa_r+0x5fa>
 800483e:	46bb      	mov	fp, r7
 8004840:	e04d      	b.n	80048de <_dtoa_r+0x696>
 8004842:	4615      	mov	r5, r2
 8004844:	e7f6      	b.n	8004834 <_dtoa_r+0x5ec>
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <_dtoa_r+0x618>)
 8004848:	f7fb fe42 	bl	80004d0 <__aeabi_dmul>
 800484c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004850:	e7bd      	b.n	80047ce <_dtoa_r+0x586>
 8004852:	bf00      	nop
 8004854:	08006da0 	.word	0x08006da0
 8004858:	08006d78 	.word	0x08006d78
 800485c:	3ff00000 	.word	0x3ff00000
 8004860:	40240000 	.word	0x40240000
 8004864:	401c0000 	.word	0x401c0000
 8004868:	40140000 	.word	0x40140000
 800486c:	3fe00000 	.word	0x3fe00000
 8004870:	9d06      	ldr	r5, [sp, #24]
 8004872:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800487a:	4630      	mov	r0, r6
 800487c:	4639      	mov	r1, r7
 800487e:	f7fb ff51 	bl	8000724 <__aeabi_ddiv>
 8004882:	f7fc f8d5 	bl	8000a30 <__aeabi_d2iz>
 8004886:	4680      	mov	r8, r0
 8004888:	f7fb fdbc 	bl	8000404 <__aeabi_i2d>
 800488c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004890:	f7fb fe1e 	bl	80004d0 <__aeabi_dmul>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4630      	mov	r0, r6
 800489a:	4639      	mov	r1, r7
 800489c:	f7fb fc64 	bl	8000168 <__aeabi_dsub>
 80048a0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80048a4:	f805 6b01 	strb.w	r6, [r5], #1
 80048a8:	9e06      	ldr	r6, [sp, #24]
 80048aa:	4602      	mov	r2, r0
 80048ac:	1bae      	subs	r6, r5, r6
 80048ae:	45b1      	cmp	r9, r6
 80048b0:	460b      	mov	r3, r1
 80048b2:	d137      	bne.n	8004924 <_dtoa_r+0x6dc>
 80048b4:	f7fb fc5a 	bl	800016c <__adddf3>
 80048b8:	4606      	mov	r6, r0
 80048ba:	460f      	mov	r7, r1
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048c4:	f7fc f876 	bl	80009b4 <__aeabi_dcmplt>
 80048c8:	b9c8      	cbnz	r0, 80048fe <_dtoa_r+0x6b6>
 80048ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048ce:	4632      	mov	r2, r6
 80048d0:	463b      	mov	r3, r7
 80048d2:	f7fc f865 	bl	80009a0 <__aeabi_dcmpeq>
 80048d6:	b110      	cbz	r0, 80048de <_dtoa_r+0x696>
 80048d8:	f018 0f01 	tst.w	r8, #1
 80048dc:	d10f      	bne.n	80048fe <_dtoa_r+0x6b6>
 80048de:	4651      	mov	r1, sl
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 fd01 	bl	80052e8 <_Bfree>
 80048e6:	2300      	movs	r3, #0
 80048e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048ea:	702b      	strb	r3, [r5, #0]
 80048ec:	f10b 0301 	add.w	r3, fp, #1
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f43f acec 	beq.w	80042d2 <_dtoa_r+0x8a>
 80048fa:	601d      	str	r5, [r3, #0]
 80048fc:	e4e9      	b.n	80042d2 <_dtoa_r+0x8a>
 80048fe:	465f      	mov	r7, fp
 8004900:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004904:	1e6b      	subs	r3, r5, #1
 8004906:	2a39      	cmp	r2, #57	; 0x39
 8004908:	d106      	bne.n	8004918 <_dtoa_r+0x6d0>
 800490a:	9a06      	ldr	r2, [sp, #24]
 800490c:	429a      	cmp	r2, r3
 800490e:	d107      	bne.n	8004920 <_dtoa_r+0x6d8>
 8004910:	2330      	movs	r3, #48	; 0x30
 8004912:	7013      	strb	r3, [r2, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	3701      	adds	r7, #1
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	3201      	adds	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e78e      	b.n	800483e <_dtoa_r+0x5f6>
 8004920:	461d      	mov	r5, r3
 8004922:	e7ed      	b.n	8004900 <_dtoa_r+0x6b8>
 8004924:	2200      	movs	r2, #0
 8004926:	4bb5      	ldr	r3, [pc, #724]	; (8004bfc <_dtoa_r+0x9b4>)
 8004928:	f7fb fdd2 	bl	80004d0 <__aeabi_dmul>
 800492c:	2200      	movs	r2, #0
 800492e:	2300      	movs	r3, #0
 8004930:	4606      	mov	r6, r0
 8004932:	460f      	mov	r7, r1
 8004934:	f7fc f834 	bl	80009a0 <__aeabi_dcmpeq>
 8004938:	2800      	cmp	r0, #0
 800493a:	d09c      	beq.n	8004876 <_dtoa_r+0x62e>
 800493c:	e7cf      	b.n	80048de <_dtoa_r+0x696>
 800493e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004940:	2a00      	cmp	r2, #0
 8004942:	f000 8129 	beq.w	8004b98 <_dtoa_r+0x950>
 8004946:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004948:	2a01      	cmp	r2, #1
 800494a:	f300 810e 	bgt.w	8004b6a <_dtoa_r+0x922>
 800494e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004950:	2a00      	cmp	r2, #0
 8004952:	f000 8106 	beq.w	8004b62 <_dtoa_r+0x91a>
 8004956:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800495a:	4645      	mov	r5, r8
 800495c:	9e08      	ldr	r6, [sp, #32]
 800495e:	9a07      	ldr	r2, [sp, #28]
 8004960:	2101      	movs	r1, #1
 8004962:	441a      	add	r2, r3
 8004964:	4620      	mov	r0, r4
 8004966:	4498      	add	r8, r3
 8004968:	9207      	str	r2, [sp, #28]
 800496a:	f000 fd5d 	bl	8005428 <__i2b>
 800496e:	4607      	mov	r7, r0
 8004970:	2d00      	cmp	r5, #0
 8004972:	dd0b      	ble.n	800498c <_dtoa_r+0x744>
 8004974:	9b07      	ldr	r3, [sp, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	dd08      	ble.n	800498c <_dtoa_r+0x744>
 800497a:	42ab      	cmp	r3, r5
 800497c:	bfa8      	it	ge
 800497e:	462b      	movge	r3, r5
 8004980:	9a07      	ldr	r2, [sp, #28]
 8004982:	eba8 0803 	sub.w	r8, r8, r3
 8004986:	1aed      	subs	r5, r5, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	9307      	str	r3, [sp, #28]
 800498c:	9b08      	ldr	r3, [sp, #32]
 800498e:	b1fb      	cbz	r3, 80049d0 <_dtoa_r+0x788>
 8004990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8104 	beq.w	8004ba0 <_dtoa_r+0x958>
 8004998:	2e00      	cmp	r6, #0
 800499a:	dd11      	ble.n	80049c0 <_dtoa_r+0x778>
 800499c:	4639      	mov	r1, r7
 800499e:	4632      	mov	r2, r6
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fdd7 	bl	8005554 <__pow5mult>
 80049a6:	4652      	mov	r2, sl
 80049a8:	4601      	mov	r1, r0
 80049aa:	4607      	mov	r7, r0
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 fd44 	bl	800543a <__multiply>
 80049b2:	4651      	mov	r1, sl
 80049b4:	900a      	str	r0, [sp, #40]	; 0x28
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 fc96 	bl	80052e8 <_Bfree>
 80049bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049be:	469a      	mov	sl, r3
 80049c0:	9b08      	ldr	r3, [sp, #32]
 80049c2:	1b9a      	subs	r2, r3, r6
 80049c4:	d004      	beq.n	80049d0 <_dtoa_r+0x788>
 80049c6:	4651      	mov	r1, sl
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fdc3 	bl	8005554 <__pow5mult>
 80049ce:	4682      	mov	sl, r0
 80049d0:	2101      	movs	r1, #1
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 fd28 	bl	8005428 <__i2b>
 80049d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049da:	4606      	mov	r6, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f340 80e1 	ble.w	8004ba4 <_dtoa_r+0x95c>
 80049e2:	461a      	mov	r2, r3
 80049e4:	4601      	mov	r1, r0
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 fdb4 	bl	8005554 <__pow5mult>
 80049ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049ee:	4606      	mov	r6, r0
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	f340 80da 	ble.w	8004baa <_dtoa_r+0x962>
 80049f6:	2300      	movs	r3, #0
 80049f8:	9308      	str	r3, [sp, #32]
 80049fa:	6933      	ldr	r3, [r6, #16]
 80049fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a00:	6918      	ldr	r0, [r3, #16]
 8004a02:	f000 fcc3 	bl	800538c <__hi0bits>
 8004a06:	f1c0 0020 	rsb	r0, r0, #32
 8004a0a:	9b07      	ldr	r3, [sp, #28]
 8004a0c:	4418      	add	r0, r3
 8004a0e:	f010 001f 	ands.w	r0, r0, #31
 8004a12:	f000 80f0 	beq.w	8004bf6 <_dtoa_r+0x9ae>
 8004a16:	f1c0 0320 	rsb	r3, r0, #32
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	f340 80e2 	ble.w	8004be4 <_dtoa_r+0x99c>
 8004a20:	9b07      	ldr	r3, [sp, #28]
 8004a22:	f1c0 001c 	rsb	r0, r0, #28
 8004a26:	4480      	add	r8, r0
 8004a28:	4405      	add	r5, r0
 8004a2a:	4403      	add	r3, r0
 8004a2c:	9307      	str	r3, [sp, #28]
 8004a2e:	f1b8 0f00 	cmp.w	r8, #0
 8004a32:	dd05      	ble.n	8004a40 <_dtoa_r+0x7f8>
 8004a34:	4651      	mov	r1, sl
 8004a36:	4642      	mov	r2, r8
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 fdd9 	bl	80055f0 <__lshift>
 8004a3e:	4682      	mov	sl, r0
 8004a40:	9b07      	ldr	r3, [sp, #28]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dd05      	ble.n	8004a52 <_dtoa_r+0x80a>
 8004a46:	4631      	mov	r1, r6
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 fdd0 	bl	80055f0 <__lshift>
 8004a50:	4606      	mov	r6, r0
 8004a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80d3 	beq.w	8004c00 <_dtoa_r+0x9b8>
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	f000 fe18 	bl	8005692 <__mcmp>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	f280 80cc 	bge.w	8004c00 <_dtoa_r+0x9b8>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	220a      	movs	r2, #10
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f000 fc51 	bl	8005316 <__multadd>
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004a7a:	4682      	mov	sl, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 81a9 	beq.w	8004dd4 <_dtoa_r+0xb8c>
 8004a82:	2300      	movs	r3, #0
 8004a84:	4639      	mov	r1, r7
 8004a86:	220a      	movs	r2, #10
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 fc44 	bl	8005316 <__multadd>
 8004a8e:	9b04      	ldr	r3, [sp, #16]
 8004a90:	4607      	mov	r7, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dc03      	bgt.n	8004a9e <_dtoa_r+0x856>
 8004a96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	f300 80b9 	bgt.w	8004c10 <_dtoa_r+0x9c8>
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	dd05      	ble.n	8004aae <_dtoa_r+0x866>
 8004aa2:	4639      	mov	r1, r7
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 fda2 	bl	80055f0 <__lshift>
 8004aac:	4607      	mov	r7, r0
 8004aae:	9b08      	ldr	r3, [sp, #32]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8110 	beq.w	8004cd6 <_dtoa_r+0xa8e>
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 fbe1 	bl	8005280 <_Balloc>
 8004abe:	4605      	mov	r5, r0
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	f107 010c 	add.w	r1, r7, #12
 8004ac6:	3202      	adds	r2, #2
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	300c      	adds	r0, #12
 8004acc:	f000 fbc0 	bl	8005250 <memcpy>
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f000 fd8b 	bl	80055f0 <__lshift>
 8004ada:	9707      	str	r7, [sp, #28]
 8004adc:	4607      	mov	r7, r0
 8004ade:	9b02      	ldr	r3, [sp, #8]
 8004ae0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	9308      	str	r3, [sp, #32]
 8004aea:	4631      	mov	r1, r6
 8004aec:	4650      	mov	r0, sl
 8004aee:	f7ff fb1d 	bl	800412c <quorem>
 8004af2:	9907      	ldr	r1, [sp, #28]
 8004af4:	4605      	mov	r5, r0
 8004af6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004afa:	4650      	mov	r0, sl
 8004afc:	f000 fdc9 	bl	8005692 <__mcmp>
 8004b00:	463a      	mov	r2, r7
 8004b02:	9002      	str	r0, [sp, #8]
 8004b04:	4631      	mov	r1, r6
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 fddd 	bl	80056c6 <__mdiff>
 8004b0c:	68c3      	ldr	r3, [r0, #12]
 8004b0e:	4602      	mov	r2, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 80e2 	bne.w	8004cda <_dtoa_r+0xa92>
 8004b16:	4601      	mov	r1, r0
 8004b18:	9009      	str	r0, [sp, #36]	; 0x24
 8004b1a:	4650      	mov	r0, sl
 8004b1c:	f000 fdb9 	bl	8005692 <__mcmp>
 8004b20:	4603      	mov	r3, r0
 8004b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b24:	4611      	mov	r1, r2
 8004b26:	4620      	mov	r0, r4
 8004b28:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2a:	f000 fbdd 	bl	80052e8 <_Bfree>
 8004b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f040 80d4 	bne.w	8004cde <_dtoa_r+0xa96>
 8004b36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	f040 80d0 	bne.w	8004cde <_dtoa_r+0xa96>
 8004b3e:	9a08      	ldr	r2, [sp, #32]
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	f040 80cc 	bne.w	8004cde <_dtoa_r+0xa96>
 8004b46:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004b4a:	f000 80e8 	beq.w	8004d1e <_dtoa_r+0xad6>
 8004b4e:	9b02      	ldr	r3, [sp, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	dd01      	ble.n	8004b58 <_dtoa_r+0x910>
 8004b54:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004b58:	f108 0501 	add.w	r5, r8, #1
 8004b5c:	f888 9000 	strb.w	r9, [r8]
 8004b60:	e06b      	b.n	8004c3a <_dtoa_r+0x9f2>
 8004b62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b64:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b68:	e6f7      	b.n	800495a <_dtoa_r+0x712>
 8004b6a:	9b08      	ldr	r3, [sp, #32]
 8004b6c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8004b70:	42b3      	cmp	r3, r6
 8004b72:	bfb7      	itett	lt
 8004b74:	9b08      	ldrlt	r3, [sp, #32]
 8004b76:	1b9e      	subge	r6, r3, r6
 8004b78:	1af2      	sublt	r2, r6, r3
 8004b7a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004b7c:	bfbf      	itttt	lt
 8004b7e:	9608      	strlt	r6, [sp, #32]
 8004b80:	189b      	addlt	r3, r3, r2
 8004b82:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004b84:	2600      	movlt	r6, #0
 8004b86:	f1b9 0f00 	cmp.w	r9, #0
 8004b8a:	bfb9      	ittee	lt
 8004b8c:	eba8 0509 	sublt.w	r5, r8, r9
 8004b90:	2300      	movlt	r3, #0
 8004b92:	4645      	movge	r5, r8
 8004b94:	464b      	movge	r3, r9
 8004b96:	e6e2      	b.n	800495e <_dtoa_r+0x716>
 8004b98:	9e08      	ldr	r6, [sp, #32]
 8004b9a:	4645      	mov	r5, r8
 8004b9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b9e:	e6e7      	b.n	8004970 <_dtoa_r+0x728>
 8004ba0:	9a08      	ldr	r2, [sp, #32]
 8004ba2:	e710      	b.n	80049c6 <_dtoa_r+0x77e>
 8004ba4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	dc18      	bgt.n	8004bdc <_dtoa_r+0x994>
 8004baa:	9b02      	ldr	r3, [sp, #8]
 8004bac:	b9b3      	cbnz	r3, 8004bdc <_dtoa_r+0x994>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb4:	b9a3      	cbnz	r3, 8004be0 <_dtoa_r+0x998>
 8004bb6:	9b03      	ldr	r3, [sp, #12]
 8004bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bbc:	0d1b      	lsrs	r3, r3, #20
 8004bbe:	051b      	lsls	r3, r3, #20
 8004bc0:	b12b      	cbz	r3, 8004bce <_dtoa_r+0x986>
 8004bc2:	9b07      	ldr	r3, [sp, #28]
 8004bc4:	f108 0801 	add.w	r8, r8, #1
 8004bc8:	3301      	adds	r3, #1
 8004bca:	9307      	str	r3, [sp, #28]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	9308      	str	r3, [sp, #32]
 8004bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f47f af11 	bne.w	80049fa <_dtoa_r+0x7b2>
 8004bd8:	2001      	movs	r0, #1
 8004bda:	e716      	b.n	8004a0a <_dtoa_r+0x7c2>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e7f6      	b.n	8004bce <_dtoa_r+0x986>
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	e7f4      	b.n	8004bce <_dtoa_r+0x986>
 8004be4:	f43f af23 	beq.w	8004a2e <_dtoa_r+0x7e6>
 8004be8:	9a07      	ldr	r2, [sp, #28]
 8004bea:	331c      	adds	r3, #28
 8004bec:	441a      	add	r2, r3
 8004bee:	4498      	add	r8, r3
 8004bf0:	441d      	add	r5, r3
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	e71a      	b.n	8004a2c <_dtoa_r+0x7e4>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	e7f6      	b.n	8004be8 <_dtoa_r+0x9a0>
 8004bfa:	bf00      	nop
 8004bfc:	40240000 	.word	0x40240000
 8004c00:	f1b9 0f00 	cmp.w	r9, #0
 8004c04:	dc33      	bgt.n	8004c6e <_dtoa_r+0xa26>
 8004c06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	dd30      	ble.n	8004c6e <_dtoa_r+0xa26>
 8004c0c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004c10:	9b04      	ldr	r3, [sp, #16]
 8004c12:	b963      	cbnz	r3, 8004c2e <_dtoa_r+0x9e6>
 8004c14:	4631      	mov	r1, r6
 8004c16:	2205      	movs	r2, #5
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 fb7c 	bl	8005316 <__multadd>
 8004c1e:	4601      	mov	r1, r0
 8004c20:	4606      	mov	r6, r0
 8004c22:	4650      	mov	r0, sl
 8004c24:	f000 fd35 	bl	8005692 <__mcmp>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f73f ad5c 	bgt.w	80046e6 <_dtoa_r+0x49e>
 8004c2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c30:	9d06      	ldr	r5, [sp, #24]
 8004c32:	ea6f 0b03 	mvn.w	fp, r3
 8004c36:	2300      	movs	r3, #0
 8004c38:	9307      	str	r3, [sp, #28]
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f000 fb53 	bl	80052e8 <_Bfree>
 8004c42:	2f00      	cmp	r7, #0
 8004c44:	f43f ae4b 	beq.w	80048de <_dtoa_r+0x696>
 8004c48:	9b07      	ldr	r3, [sp, #28]
 8004c4a:	b12b      	cbz	r3, 8004c58 <_dtoa_r+0xa10>
 8004c4c:	42bb      	cmp	r3, r7
 8004c4e:	d003      	beq.n	8004c58 <_dtoa_r+0xa10>
 8004c50:	4619      	mov	r1, r3
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 fb48 	bl	80052e8 <_Bfree>
 8004c58:	4639      	mov	r1, r7
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f000 fb44 	bl	80052e8 <_Bfree>
 8004c60:	e63d      	b.n	80048de <_dtoa_r+0x696>
 8004c62:	2600      	movs	r6, #0
 8004c64:	4637      	mov	r7, r6
 8004c66:	e7e2      	b.n	8004c2e <_dtoa_r+0x9e6>
 8004c68:	46bb      	mov	fp, r7
 8004c6a:	4637      	mov	r7, r6
 8004c6c:	e53b      	b.n	80046e6 <_dtoa_r+0x49e>
 8004c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c70:	f8cd 9010 	str.w	r9, [sp, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f47f af12 	bne.w	8004a9e <_dtoa_r+0x856>
 8004c7a:	9d06      	ldr	r5, [sp, #24]
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4650      	mov	r0, sl
 8004c80:	f7ff fa54 	bl	800412c <quorem>
 8004c84:	9b06      	ldr	r3, [sp, #24]
 8004c86:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c8a:	f805 9b01 	strb.w	r9, [r5], #1
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	1aeb      	subs	r3, r5, r3
 8004c92:	429a      	cmp	r2, r3
 8004c94:	f300 8081 	bgt.w	8004d9a <_dtoa_r+0xb52>
 8004c98:	9b06      	ldr	r3, [sp, #24]
 8004c9a:	2a01      	cmp	r2, #1
 8004c9c:	bfac      	ite	ge
 8004c9e:	189b      	addge	r3, r3, r2
 8004ca0:	3301      	addlt	r3, #1
 8004ca2:	4698      	mov	r8, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9307      	str	r3, [sp, #28]
 8004ca8:	4651      	mov	r1, sl
 8004caa:	2201      	movs	r2, #1
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 fc9f 	bl	80055f0 <__lshift>
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4682      	mov	sl, r0
 8004cb6:	f000 fcec 	bl	8005692 <__mcmp>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	dc34      	bgt.n	8004d28 <_dtoa_r+0xae0>
 8004cbe:	d102      	bne.n	8004cc6 <_dtoa_r+0xa7e>
 8004cc0:	f019 0f01 	tst.w	r9, #1
 8004cc4:	d130      	bne.n	8004d28 <_dtoa_r+0xae0>
 8004cc6:	4645      	mov	r5, r8
 8004cc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ccc:	1e6a      	subs	r2, r5, #1
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	d1b3      	bne.n	8004c3a <_dtoa_r+0x9f2>
 8004cd2:	4615      	mov	r5, r2
 8004cd4:	e7f8      	b.n	8004cc8 <_dtoa_r+0xa80>
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	e6ff      	b.n	8004ada <_dtoa_r+0x892>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e722      	b.n	8004b24 <_dtoa_r+0x8dc>
 8004cde:	9a02      	ldr	r2, [sp, #8]
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	db04      	blt.n	8004cee <_dtoa_r+0xaa6>
 8004ce4:	d128      	bne.n	8004d38 <_dtoa_r+0xaf0>
 8004ce6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004ce8:	bb32      	cbnz	r2, 8004d38 <_dtoa_r+0xaf0>
 8004cea:	9a08      	ldr	r2, [sp, #32]
 8004cec:	bb22      	cbnz	r2, 8004d38 <_dtoa_r+0xaf0>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f77f af32 	ble.w	8004b58 <_dtoa_r+0x910>
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 fc79 	bl	80055f0 <__lshift>
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4682      	mov	sl, r0
 8004d02:	f000 fcc6 	bl	8005692 <__mcmp>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	dc05      	bgt.n	8004d16 <_dtoa_r+0xace>
 8004d0a:	f47f af25 	bne.w	8004b58 <_dtoa_r+0x910>
 8004d0e:	f019 0f01 	tst.w	r9, #1
 8004d12:	f43f af21 	beq.w	8004b58 <_dtoa_r+0x910>
 8004d16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d1a:	f47f af1b 	bne.w	8004b54 <_dtoa_r+0x90c>
 8004d1e:	2339      	movs	r3, #57	; 0x39
 8004d20:	f108 0801 	add.w	r8, r8, #1
 8004d24:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004d28:	4645      	mov	r5, r8
 8004d2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d2e:	1e6a      	subs	r2, r5, #1
 8004d30:	2b39      	cmp	r3, #57	; 0x39
 8004d32:	d03a      	beq.n	8004daa <_dtoa_r+0xb62>
 8004d34:	3301      	adds	r3, #1
 8004d36:	e03f      	b.n	8004db8 <_dtoa_r+0xb70>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f108 0501 	add.w	r5, r8, #1
 8004d3e:	dd05      	ble.n	8004d4c <_dtoa_r+0xb04>
 8004d40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d44:	d0eb      	beq.n	8004d1e <_dtoa_r+0xad6>
 8004d46:	f109 0901 	add.w	r9, r9, #1
 8004d4a:	e707      	b.n	8004b5c <_dtoa_r+0x914>
 8004d4c:	9b06      	ldr	r3, [sp, #24]
 8004d4e:	9a04      	ldr	r2, [sp, #16]
 8004d50:	1aeb      	subs	r3, r5, r3
 8004d52:	4293      	cmp	r3, r2
 8004d54:	46a8      	mov	r8, r5
 8004d56:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004d5a:	d0a5      	beq.n	8004ca8 <_dtoa_r+0xa60>
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	2300      	movs	r3, #0
 8004d60:	220a      	movs	r2, #10
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fad7 	bl	8005316 <__multadd>
 8004d68:	9b07      	ldr	r3, [sp, #28]
 8004d6a:	4682      	mov	sl, r0
 8004d6c:	42bb      	cmp	r3, r7
 8004d6e:	f04f 020a 	mov.w	r2, #10
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	9907      	ldr	r1, [sp, #28]
 8004d78:	4620      	mov	r0, r4
 8004d7a:	d104      	bne.n	8004d86 <_dtoa_r+0xb3e>
 8004d7c:	f000 facb 	bl	8005316 <__multadd>
 8004d80:	9007      	str	r0, [sp, #28]
 8004d82:	4607      	mov	r7, r0
 8004d84:	e6b1      	b.n	8004aea <_dtoa_r+0x8a2>
 8004d86:	f000 fac6 	bl	8005316 <__multadd>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9007      	str	r0, [sp, #28]
 8004d8e:	220a      	movs	r2, #10
 8004d90:	4639      	mov	r1, r7
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 fabf 	bl	8005316 <__multadd>
 8004d98:	e7f3      	b.n	8004d82 <_dtoa_r+0xb3a>
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	220a      	movs	r2, #10
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 fab8 	bl	8005316 <__multadd>
 8004da6:	4682      	mov	sl, r0
 8004da8:	e768      	b.n	8004c7c <_dtoa_r+0xa34>
 8004daa:	9b06      	ldr	r3, [sp, #24]
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d105      	bne.n	8004dbc <_dtoa_r+0xb74>
 8004db0:	2331      	movs	r3, #49	; 0x31
 8004db2:	9a06      	ldr	r2, [sp, #24]
 8004db4:	f10b 0b01 	add.w	fp, fp, #1
 8004db8:	7013      	strb	r3, [r2, #0]
 8004dba:	e73e      	b.n	8004c3a <_dtoa_r+0x9f2>
 8004dbc:	4615      	mov	r5, r2
 8004dbe:	e7b4      	b.n	8004d2a <_dtoa_r+0xae2>
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <_dtoa_r+0xba0>)
 8004dc2:	f7ff baa3 	b.w	800430c <_dtoa_r+0xc4>
 8004dc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f47f aa7d 	bne.w	80042c8 <_dtoa_r+0x80>
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <_dtoa_r+0xba4>)
 8004dd0:	f7ff ba9c 	b.w	800430c <_dtoa_r+0xc4>
 8004dd4:	9b04      	ldr	r3, [sp, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f73f af4f 	bgt.w	8004c7a <_dtoa_r+0xa32>
 8004ddc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	f77f af4b 	ble.w	8004c7a <_dtoa_r+0xa32>
 8004de4:	e714      	b.n	8004c10 <_dtoa_r+0x9c8>
 8004de6:	bf00      	nop
 8004de8:	08006d45 	.word	0x08006d45
 8004dec:	08006d67 	.word	0x08006d67

08004df0 <_localeconv_r>:
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <_localeconv_r+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6a18      	ldr	r0, [r3, #32]
 8004df6:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <_localeconv_r+0x18>)
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	bf08      	it	eq
 8004dfc:	4618      	moveq	r0, r3
 8004dfe:	30f0      	adds	r0, #240	; 0xf0
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c
 8004e08:	20000510 	.word	0x20000510

08004e0c <malloc>:
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <malloc+0xc>)
 8004e0e:	4601      	mov	r1, r0
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	f000 b803 	b.w	8004e1c <_malloc_r>
 8004e16:	bf00      	nop
 8004e18:	2000000c 	.word	0x2000000c

08004e1c <_malloc_r>:
 8004e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	f101 040b 	add.w	r4, r1, #11
 8004e24:	2c16      	cmp	r4, #22
 8004e26:	4681      	mov	r9, r0
 8004e28:	d907      	bls.n	8004e3a <_malloc_r+0x1e>
 8004e2a:	f034 0407 	bics.w	r4, r4, #7
 8004e2e:	d505      	bpl.n	8004e3c <_malloc_r+0x20>
 8004e30:	230c      	movs	r3, #12
 8004e32:	f8c9 3000 	str.w	r3, [r9]
 8004e36:	2600      	movs	r6, #0
 8004e38:	e131      	b.n	800509e <_malloc_r+0x282>
 8004e3a:	2410      	movs	r4, #16
 8004e3c:	428c      	cmp	r4, r1
 8004e3e:	d3f7      	bcc.n	8004e30 <_malloc_r+0x14>
 8004e40:	4648      	mov	r0, r9
 8004e42:	f000 fa11 	bl	8005268 <__malloc_lock>
 8004e46:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004e4a:	4d9b      	ldr	r5, [pc, #620]	; (80050b8 <_malloc_r+0x29c>)
 8004e4c:	d236      	bcs.n	8004ebc <_malloc_r+0xa0>
 8004e4e:	f104 0208 	add.w	r2, r4, #8
 8004e52:	442a      	add	r2, r5
 8004e54:	6856      	ldr	r6, [r2, #4]
 8004e56:	f1a2 0108 	sub.w	r1, r2, #8
 8004e5a:	428e      	cmp	r6, r1
 8004e5c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004e60:	d102      	bne.n	8004e68 <_malloc_r+0x4c>
 8004e62:	68d6      	ldr	r6, [r2, #12]
 8004e64:	42b2      	cmp	r2, r6
 8004e66:	d010      	beq.n	8004e8a <_malloc_r+0x6e>
 8004e68:	6873      	ldr	r3, [r6, #4]
 8004e6a:	68f2      	ldr	r2, [r6, #12]
 8004e6c:	68b1      	ldr	r1, [r6, #8]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60ca      	str	r2, [r1, #12]
 8004e74:	4433      	add	r3, r6
 8004e76:	6091      	str	r1, [r2, #8]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	4648      	mov	r0, r9
 8004e82:	f000 f9f7 	bl	8005274 <__malloc_unlock>
 8004e86:	3608      	adds	r6, #8
 8004e88:	e109      	b.n	800509e <_malloc_r+0x282>
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	4a8b      	ldr	r2, [pc, #556]	; (80050bc <_malloc_r+0x2a0>)
 8004e8e:	692e      	ldr	r6, [r5, #16]
 8004e90:	4611      	mov	r1, r2
 8004e92:	4296      	cmp	r6, r2
 8004e94:	d06d      	beq.n	8004f72 <_malloc_r+0x156>
 8004e96:	6870      	ldr	r0, [r6, #4]
 8004e98:	f020 0003 	bic.w	r0, r0, #3
 8004e9c:	1b07      	subs	r7, r0, r4
 8004e9e:	2f0f      	cmp	r7, #15
 8004ea0:	dd47      	ble.n	8004f32 <_malloc_r+0x116>
 8004ea2:	1933      	adds	r3, r6, r4
 8004ea4:	f044 0401 	orr.w	r4, r4, #1
 8004ea8:	6074      	str	r4, [r6, #4]
 8004eaa:	616b      	str	r3, [r5, #20]
 8004eac:	612b      	str	r3, [r5, #16]
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	609a      	str	r2, [r3, #8]
 8004eb2:	f047 0201 	orr.w	r2, r7, #1
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	5037      	str	r7, [r6, r0]
 8004eba:	e7e1      	b.n	8004e80 <_malloc_r+0x64>
 8004ebc:	0a63      	lsrs	r3, r4, #9
 8004ebe:	d02a      	beq.n	8004f16 <_malloc_r+0xfa>
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d812      	bhi.n	8004eea <_malloc_r+0xce>
 8004ec4:	09a3      	lsrs	r3, r4, #6
 8004ec6:	3338      	adds	r3, #56	; 0x38
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004ece:	6856      	ldr	r6, [r2, #4]
 8004ed0:	f1a2 0008 	sub.w	r0, r2, #8
 8004ed4:	4286      	cmp	r6, r0
 8004ed6:	d006      	beq.n	8004ee6 <_malloc_r+0xca>
 8004ed8:	6872      	ldr	r2, [r6, #4]
 8004eda:	f022 0203 	bic.w	r2, r2, #3
 8004ede:	1b11      	subs	r1, r2, r4
 8004ee0:	290f      	cmp	r1, #15
 8004ee2:	dd1c      	ble.n	8004f1e <_malloc_r+0x102>
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	e7d0      	b.n	8004e8c <_malloc_r+0x70>
 8004eea:	2b14      	cmp	r3, #20
 8004eec:	d801      	bhi.n	8004ef2 <_malloc_r+0xd6>
 8004eee:	335b      	adds	r3, #91	; 0x5b
 8004ef0:	e7ea      	b.n	8004ec8 <_malloc_r+0xac>
 8004ef2:	2b54      	cmp	r3, #84	; 0x54
 8004ef4:	d802      	bhi.n	8004efc <_malloc_r+0xe0>
 8004ef6:	0b23      	lsrs	r3, r4, #12
 8004ef8:	336e      	adds	r3, #110	; 0x6e
 8004efa:	e7e5      	b.n	8004ec8 <_malloc_r+0xac>
 8004efc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004f00:	d802      	bhi.n	8004f08 <_malloc_r+0xec>
 8004f02:	0be3      	lsrs	r3, r4, #15
 8004f04:	3377      	adds	r3, #119	; 0x77
 8004f06:	e7df      	b.n	8004ec8 <_malloc_r+0xac>
 8004f08:	f240 5254 	movw	r2, #1364	; 0x554
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d804      	bhi.n	8004f1a <_malloc_r+0xfe>
 8004f10:	0ca3      	lsrs	r3, r4, #18
 8004f12:	337c      	adds	r3, #124	; 0x7c
 8004f14:	e7d8      	b.n	8004ec8 <_malloc_r+0xac>
 8004f16:	233f      	movs	r3, #63	; 0x3f
 8004f18:	e7d6      	b.n	8004ec8 <_malloc_r+0xac>
 8004f1a:	237e      	movs	r3, #126	; 0x7e
 8004f1c:	e7d4      	b.n	8004ec8 <_malloc_r+0xac>
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	68f1      	ldr	r1, [r6, #12]
 8004f22:	db04      	blt.n	8004f2e <_malloc_r+0x112>
 8004f24:	68b3      	ldr	r3, [r6, #8]
 8004f26:	60d9      	str	r1, [r3, #12]
 8004f28:	608b      	str	r3, [r1, #8]
 8004f2a:	18b3      	adds	r3, r6, r2
 8004f2c:	e7a4      	b.n	8004e78 <_malloc_r+0x5c>
 8004f2e:	460e      	mov	r6, r1
 8004f30:	e7d0      	b.n	8004ed4 <_malloc_r+0xb8>
 8004f32:	2f00      	cmp	r7, #0
 8004f34:	616a      	str	r2, [r5, #20]
 8004f36:	612a      	str	r2, [r5, #16]
 8004f38:	db05      	blt.n	8004f46 <_malloc_r+0x12a>
 8004f3a:	4430      	add	r0, r6
 8004f3c:	6843      	ldr	r3, [r0, #4]
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6043      	str	r3, [r0, #4]
 8004f44:	e79c      	b.n	8004e80 <_malloc_r+0x64>
 8004f46:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004f4a:	d244      	bcs.n	8004fd6 <_malloc_r+0x1ba>
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	08c0      	lsrs	r0, r0, #3
 8004f50:	1087      	asrs	r7, r0, #2
 8004f52:	fa02 f707 	lsl.w	r7, r2, r7
 8004f56:	686a      	ldr	r2, [r5, #4]
 8004f58:	3001      	adds	r0, #1
 8004f5a:	433a      	orrs	r2, r7
 8004f5c:	606a      	str	r2, [r5, #4]
 8004f5e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004f62:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004f66:	3a08      	subs	r2, #8
 8004f68:	60f2      	str	r2, [r6, #12]
 8004f6a:	60b7      	str	r7, [r6, #8]
 8004f6c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004f70:	60fe      	str	r6, [r7, #12]
 8004f72:	2001      	movs	r0, #1
 8004f74:	109a      	asrs	r2, r3, #2
 8004f76:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7a:	6868      	ldr	r0, [r5, #4]
 8004f7c:	4282      	cmp	r2, r0
 8004f7e:	f200 809f 	bhi.w	80050c0 <_malloc_r+0x2a4>
 8004f82:	4202      	tst	r2, r0
 8004f84:	d106      	bne.n	8004f94 <_malloc_r+0x178>
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	0052      	lsls	r2, r2, #1
 8004f8c:	4202      	tst	r2, r0
 8004f8e:	f103 0304 	add.w	r3, r3, #4
 8004f92:	d0fa      	beq.n	8004f8a <_malloc_r+0x16e>
 8004f94:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004f98:	46e0      	mov	r8, ip
 8004f9a:	469e      	mov	lr, r3
 8004f9c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004fa0:	4546      	cmp	r6, r8
 8004fa2:	d153      	bne.n	800504c <_malloc_r+0x230>
 8004fa4:	f10e 0e01 	add.w	lr, lr, #1
 8004fa8:	f01e 0f03 	tst.w	lr, #3
 8004fac:	f108 0808 	add.w	r8, r8, #8
 8004fb0:	d1f4      	bne.n	8004f9c <_malloc_r+0x180>
 8004fb2:	0798      	lsls	r0, r3, #30
 8004fb4:	d179      	bne.n	80050aa <_malloc_r+0x28e>
 8004fb6:	686b      	ldr	r3, [r5, #4]
 8004fb8:	ea23 0302 	bic.w	r3, r3, r2
 8004fbc:	606b      	str	r3, [r5, #4]
 8004fbe:	6868      	ldr	r0, [r5, #4]
 8004fc0:	0052      	lsls	r2, r2, #1
 8004fc2:	4282      	cmp	r2, r0
 8004fc4:	d87c      	bhi.n	80050c0 <_malloc_r+0x2a4>
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	d07a      	beq.n	80050c0 <_malloc_r+0x2a4>
 8004fca:	4673      	mov	r3, lr
 8004fcc:	4202      	tst	r2, r0
 8004fce:	d1e1      	bne.n	8004f94 <_malloc_r+0x178>
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	0052      	lsls	r2, r2, #1
 8004fd4:	e7fa      	b.n	8004fcc <_malloc_r+0x1b0>
 8004fd6:	0a42      	lsrs	r2, r0, #9
 8004fd8:	2a04      	cmp	r2, #4
 8004fda:	d815      	bhi.n	8005008 <_malloc_r+0x1ec>
 8004fdc:	0982      	lsrs	r2, r0, #6
 8004fde:	3238      	adds	r2, #56	; 0x38
 8004fe0:	1c57      	adds	r7, r2, #1
 8004fe2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004fe6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004fea:	45be      	cmp	lr, r7
 8004fec:	d126      	bne.n	800503c <_malloc_r+0x220>
 8004fee:	2001      	movs	r0, #1
 8004ff0:	1092      	asrs	r2, r2, #2
 8004ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff6:	6868      	ldr	r0, [r5, #4]
 8004ff8:	4310      	orrs	r0, r2
 8004ffa:	6068      	str	r0, [r5, #4]
 8004ffc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005000:	60b7      	str	r7, [r6, #8]
 8005002:	f8ce 6008 	str.w	r6, [lr, #8]
 8005006:	e7b3      	b.n	8004f70 <_malloc_r+0x154>
 8005008:	2a14      	cmp	r2, #20
 800500a:	d801      	bhi.n	8005010 <_malloc_r+0x1f4>
 800500c:	325b      	adds	r2, #91	; 0x5b
 800500e:	e7e7      	b.n	8004fe0 <_malloc_r+0x1c4>
 8005010:	2a54      	cmp	r2, #84	; 0x54
 8005012:	d802      	bhi.n	800501a <_malloc_r+0x1fe>
 8005014:	0b02      	lsrs	r2, r0, #12
 8005016:	326e      	adds	r2, #110	; 0x6e
 8005018:	e7e2      	b.n	8004fe0 <_malloc_r+0x1c4>
 800501a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800501e:	d802      	bhi.n	8005026 <_malloc_r+0x20a>
 8005020:	0bc2      	lsrs	r2, r0, #15
 8005022:	3277      	adds	r2, #119	; 0x77
 8005024:	e7dc      	b.n	8004fe0 <_malloc_r+0x1c4>
 8005026:	f240 5754 	movw	r7, #1364	; 0x554
 800502a:	42ba      	cmp	r2, r7
 800502c:	bf9a      	itte	ls
 800502e:	0c82      	lsrls	r2, r0, #18
 8005030:	327c      	addls	r2, #124	; 0x7c
 8005032:	227e      	movhi	r2, #126	; 0x7e
 8005034:	e7d4      	b.n	8004fe0 <_malloc_r+0x1c4>
 8005036:	68bf      	ldr	r7, [r7, #8]
 8005038:	45be      	cmp	lr, r7
 800503a:	d004      	beq.n	8005046 <_malloc_r+0x22a>
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	f022 0203 	bic.w	r2, r2, #3
 8005042:	4290      	cmp	r0, r2
 8005044:	d3f7      	bcc.n	8005036 <_malloc_r+0x21a>
 8005046:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800504a:	e7d7      	b.n	8004ffc <_malloc_r+0x1e0>
 800504c:	6870      	ldr	r0, [r6, #4]
 800504e:	68f7      	ldr	r7, [r6, #12]
 8005050:	f020 0003 	bic.w	r0, r0, #3
 8005054:	eba0 0a04 	sub.w	sl, r0, r4
 8005058:	f1ba 0f0f 	cmp.w	sl, #15
 800505c:	dd10      	ble.n	8005080 <_malloc_r+0x264>
 800505e:	68b2      	ldr	r2, [r6, #8]
 8005060:	1933      	adds	r3, r6, r4
 8005062:	f044 0401 	orr.w	r4, r4, #1
 8005066:	6074      	str	r4, [r6, #4]
 8005068:	60d7      	str	r7, [r2, #12]
 800506a:	60ba      	str	r2, [r7, #8]
 800506c:	f04a 0201 	orr.w	r2, sl, #1
 8005070:	616b      	str	r3, [r5, #20]
 8005072:	612b      	str	r3, [r5, #16]
 8005074:	60d9      	str	r1, [r3, #12]
 8005076:	6099      	str	r1, [r3, #8]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	f846 a000 	str.w	sl, [r6, r0]
 800507e:	e6ff      	b.n	8004e80 <_malloc_r+0x64>
 8005080:	f1ba 0f00 	cmp.w	sl, #0
 8005084:	db0f      	blt.n	80050a6 <_malloc_r+0x28a>
 8005086:	4430      	add	r0, r6
 8005088:	6843      	ldr	r3, [r0, #4]
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6043      	str	r3, [r0, #4]
 8005090:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005094:	4648      	mov	r0, r9
 8005096:	60df      	str	r7, [r3, #12]
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	f000 f8eb 	bl	8005274 <__malloc_unlock>
 800509e:	4630      	mov	r0, r6
 80050a0:	b003      	add	sp, #12
 80050a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a6:	463e      	mov	r6, r7
 80050a8:	e77a      	b.n	8004fa0 <_malloc_r+0x184>
 80050aa:	f85c 0908 	ldr.w	r0, [ip], #-8
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4584      	cmp	ip, r0
 80050b2:	f43f af7e 	beq.w	8004fb2 <_malloc_r+0x196>
 80050b6:	e782      	b.n	8004fbe <_malloc_r+0x1a2>
 80050b8:	20000100 	.word	0x20000100
 80050bc:	20000108 	.word	0x20000108
 80050c0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80050c4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80050c8:	f026 0603 	bic.w	r6, r6, #3
 80050cc:	42b4      	cmp	r4, r6
 80050ce:	d803      	bhi.n	80050d8 <_malloc_r+0x2bc>
 80050d0:	1b33      	subs	r3, r6, r4
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	f300 8095 	bgt.w	8005202 <_malloc_r+0x3e6>
 80050d8:	4a4f      	ldr	r2, [pc, #316]	; (8005218 <_malloc_r+0x3fc>)
 80050da:	eb0b 0306 	add.w	r3, fp, r6
 80050de:	6817      	ldr	r7, [r2, #0]
 80050e0:	4a4e      	ldr	r2, [pc, #312]	; (800521c <_malloc_r+0x400>)
 80050e2:	3710      	adds	r7, #16
 80050e4:	6811      	ldr	r1, [r2, #0]
 80050e6:	4427      	add	r7, r4
 80050e8:	3101      	adds	r1, #1
 80050ea:	d005      	beq.n	80050f8 <_malloc_r+0x2dc>
 80050ec:	494c      	ldr	r1, [pc, #304]	; (8005220 <_malloc_r+0x404>)
 80050ee:	3901      	subs	r1, #1
 80050f0:	440f      	add	r7, r1
 80050f2:	3101      	adds	r1, #1
 80050f4:	4249      	negs	r1, r1
 80050f6:	400f      	ands	r7, r1
 80050f8:	4639      	mov	r1, r7
 80050fa:	4648      	mov	r0, r9
 80050fc:	9201      	str	r2, [sp, #4]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	f000 fb90 	bl	8005824 <_sbrk_r>
 8005104:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005108:	4680      	mov	r8, r0
 800510a:	d055      	beq.n	80051b8 <_malloc_r+0x39c>
 800510c:	9b00      	ldr	r3, [sp, #0]
 800510e:	9a01      	ldr	r2, [sp, #4]
 8005110:	4283      	cmp	r3, r0
 8005112:	d901      	bls.n	8005118 <_malloc_r+0x2fc>
 8005114:	45ab      	cmp	fp, r5
 8005116:	d14f      	bne.n	80051b8 <_malloc_r+0x39c>
 8005118:	4842      	ldr	r0, [pc, #264]	; (8005224 <_malloc_r+0x408>)
 800511a:	4543      	cmp	r3, r8
 800511c:	6801      	ldr	r1, [r0, #0]
 800511e:	4682      	mov	sl, r0
 8005120:	eb07 0e01 	add.w	lr, r7, r1
 8005124:	f8c0 e000 	str.w	lr, [r0]
 8005128:	493f      	ldr	r1, [pc, #252]	; (8005228 <_malloc_r+0x40c>)
 800512a:	d113      	bne.n	8005154 <_malloc_r+0x338>
 800512c:	420b      	tst	r3, r1
 800512e:	d111      	bne.n	8005154 <_malloc_r+0x338>
 8005130:	68ab      	ldr	r3, [r5, #8]
 8005132:	443e      	add	r6, r7
 8005134:	f046 0601 	orr.w	r6, r6, #1
 8005138:	605e      	str	r6, [r3, #4]
 800513a:	4a3c      	ldr	r2, [pc, #240]	; (800522c <_malloc_r+0x410>)
 800513c:	f8da 3000 	ldr.w	r3, [sl]
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	428b      	cmp	r3, r1
 8005144:	bf88      	it	hi
 8005146:	6013      	strhi	r3, [r2, #0]
 8005148:	4a39      	ldr	r2, [pc, #228]	; (8005230 <_malloc_r+0x414>)
 800514a:	6811      	ldr	r1, [r2, #0]
 800514c:	428b      	cmp	r3, r1
 800514e:	bf88      	it	hi
 8005150:	6013      	strhi	r3, [r2, #0]
 8005152:	e031      	b.n	80051b8 <_malloc_r+0x39c>
 8005154:	6810      	ldr	r0, [r2, #0]
 8005156:	3001      	adds	r0, #1
 8005158:	bf1b      	ittet	ne
 800515a:	eba8 0303 	subne.w	r3, r8, r3
 800515e:	4473      	addne	r3, lr
 8005160:	f8c2 8000 	streq.w	r8, [r2]
 8005164:	f8ca 3000 	strne.w	r3, [sl]
 8005168:	f018 0007 	ands.w	r0, r8, #7
 800516c:	bf1c      	itt	ne
 800516e:	f1c0 0008 	rsbne	r0, r0, #8
 8005172:	4480      	addne	r8, r0
 8005174:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <_malloc_r+0x404>)
 8005176:	4447      	add	r7, r8
 8005178:	4418      	add	r0, r3
 800517a:	400f      	ands	r7, r1
 800517c:	1bc7      	subs	r7, r0, r7
 800517e:	4639      	mov	r1, r7
 8005180:	4648      	mov	r0, r9
 8005182:	f000 fb4f 	bl	8005824 <_sbrk_r>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	bf04      	itt	eq
 800518a:	4640      	moveq	r0, r8
 800518c:	2700      	moveq	r7, #0
 800518e:	f8da 3000 	ldr.w	r3, [sl]
 8005192:	eba0 0008 	sub.w	r0, r0, r8
 8005196:	443b      	add	r3, r7
 8005198:	4407      	add	r7, r0
 800519a:	f047 0701 	orr.w	r7, r7, #1
 800519e:	45ab      	cmp	fp, r5
 80051a0:	f8c5 8008 	str.w	r8, [r5, #8]
 80051a4:	f8ca 3000 	str.w	r3, [sl]
 80051a8:	f8c8 7004 	str.w	r7, [r8, #4]
 80051ac:	d0c5      	beq.n	800513a <_malloc_r+0x31e>
 80051ae:	2e0f      	cmp	r6, #15
 80051b0:	d810      	bhi.n	80051d4 <_malloc_r+0x3b8>
 80051b2:	2301      	movs	r3, #1
 80051b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80051b8:	68ab      	ldr	r3, [r5, #8]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	f022 0203 	bic.w	r2, r2, #3
 80051c0:	4294      	cmp	r4, r2
 80051c2:	eba2 0304 	sub.w	r3, r2, r4
 80051c6:	d801      	bhi.n	80051cc <_malloc_r+0x3b0>
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	dc1a      	bgt.n	8005202 <_malloc_r+0x3e6>
 80051cc:	4648      	mov	r0, r9
 80051ce:	f000 f851 	bl	8005274 <__malloc_unlock>
 80051d2:	e630      	b.n	8004e36 <_malloc_r+0x1a>
 80051d4:	2205      	movs	r2, #5
 80051d6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80051da:	3e0c      	subs	r6, #12
 80051dc:	f026 0607 	bic.w	r6, r6, #7
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	4333      	orrs	r3, r6
 80051e6:	f8cb 3004 	str.w	r3, [fp, #4]
 80051ea:	2e0f      	cmp	r6, #15
 80051ec:	eb0b 0306 	add.w	r3, fp, r6
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	d9a1      	bls.n	800513a <_malloc_r+0x31e>
 80051f6:	f10b 0108 	add.w	r1, fp, #8
 80051fa:	4648      	mov	r0, r9
 80051fc:	f000 fc20 	bl	8005a40 <_free_r>
 8005200:	e79b      	b.n	800513a <_malloc_r+0x31e>
 8005202:	68ae      	ldr	r6, [r5, #8]
 8005204:	f044 0201 	orr.w	r2, r4, #1
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	4434      	add	r4, r6
 800520e:	6072      	str	r2, [r6, #4]
 8005210:	60ac      	str	r4, [r5, #8]
 8005212:	6063      	str	r3, [r4, #4]
 8005214:	e634      	b.n	8004e80 <_malloc_r+0x64>
 8005216:	bf00      	nop
 8005218:	20000ad0 	.word	0x20000ad0
 800521c:	20000508 	.word	0x20000508
 8005220:	00000080 	.word	0x00000080
 8005224:	20000aa0 	.word	0x20000aa0
 8005228:	0000007f 	.word	0x0000007f
 800522c:	20000ac8 	.word	0x20000ac8
 8005230:	20000acc 	.word	0x20000acc

08005234 <memchr>:
 8005234:	b510      	push	{r4, lr}
 8005236:	b2c9      	uxtb	r1, r1
 8005238:	4402      	add	r2, r0
 800523a:	4290      	cmp	r0, r2
 800523c:	4603      	mov	r3, r0
 800523e:	d101      	bne.n	8005244 <memchr+0x10>
 8005240:	2000      	movs	r0, #0
 8005242:	bd10      	pop	{r4, pc}
 8005244:	781c      	ldrb	r4, [r3, #0]
 8005246:	3001      	adds	r0, #1
 8005248:	428c      	cmp	r4, r1
 800524a:	d1f6      	bne.n	800523a <memchr+0x6>
 800524c:	4618      	mov	r0, r3
 800524e:	bd10      	pop	{r4, pc}

08005250 <memcpy>:
 8005250:	b510      	push	{r4, lr}
 8005252:	1e43      	subs	r3, r0, #1
 8005254:	440a      	add	r2, r1
 8005256:	4291      	cmp	r1, r2
 8005258:	d100      	bne.n	800525c <memcpy+0xc>
 800525a:	bd10      	pop	{r4, pc}
 800525c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005264:	e7f7      	b.n	8005256 <memcpy+0x6>
	...

08005268 <__malloc_lock>:
 8005268:	4801      	ldr	r0, [pc, #4]	; (8005270 <__malloc_lock+0x8>)
 800526a:	f000 bca5 	b.w	8005bb8 <__retarget_lock_acquire_recursive>
 800526e:	bf00      	nop
 8005270:	20000b6c 	.word	0x20000b6c

08005274 <__malloc_unlock>:
 8005274:	4801      	ldr	r0, [pc, #4]	; (800527c <__malloc_unlock+0x8>)
 8005276:	f000 bca0 	b.w	8005bba <__retarget_lock_release_recursive>
 800527a:	bf00      	nop
 800527c:	20000b6c 	.word	0x20000b6c

08005280 <_Balloc>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005284:	4604      	mov	r4, r0
 8005286:	460e      	mov	r6, r1
 8005288:	b93d      	cbnz	r5, 800529a <_Balloc+0x1a>
 800528a:	2010      	movs	r0, #16
 800528c:	f7ff fdbe 	bl	8004e0c <malloc>
 8005290:	6260      	str	r0, [r4, #36]	; 0x24
 8005292:	6045      	str	r5, [r0, #4]
 8005294:	6085      	str	r5, [r0, #8]
 8005296:	6005      	str	r5, [r0, #0]
 8005298:	60c5      	str	r5, [r0, #12]
 800529a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800529c:	68eb      	ldr	r3, [r5, #12]
 800529e:	b183      	cbz	r3, 80052c2 <_Balloc+0x42>
 80052a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80052a8:	b9b8      	cbnz	r0, 80052da <_Balloc+0x5a>
 80052aa:	2101      	movs	r1, #1
 80052ac:	fa01 f506 	lsl.w	r5, r1, r6
 80052b0:	1d6a      	adds	r2, r5, #5
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	4620      	mov	r0, r4
 80052b6:	f000 fb3f 	bl	8005938 <_calloc_r>
 80052ba:	b160      	cbz	r0, 80052d6 <_Balloc+0x56>
 80052bc:	6046      	str	r6, [r0, #4]
 80052be:	6085      	str	r5, [r0, #8]
 80052c0:	e00e      	b.n	80052e0 <_Balloc+0x60>
 80052c2:	2221      	movs	r2, #33	; 0x21
 80052c4:	2104      	movs	r1, #4
 80052c6:	4620      	mov	r0, r4
 80052c8:	f000 fb36 	bl	8005938 <_calloc_r>
 80052cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ce:	60e8      	str	r0, [r5, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e4      	bne.n	80052a0 <_Balloc+0x20>
 80052d6:	2000      	movs	r0, #0
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
 80052da:	6802      	ldr	r2, [r0, #0]
 80052dc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80052e0:	2300      	movs	r3, #0
 80052e2:	6103      	str	r3, [r0, #16]
 80052e4:	60c3      	str	r3, [r0, #12]
 80052e6:	bd70      	pop	{r4, r5, r6, pc}

080052e8 <_Bfree>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80052ec:	4606      	mov	r6, r0
 80052ee:	460d      	mov	r5, r1
 80052f0:	b93c      	cbnz	r4, 8005302 <_Bfree+0x1a>
 80052f2:	2010      	movs	r0, #16
 80052f4:	f7ff fd8a 	bl	8004e0c <malloc>
 80052f8:	6270      	str	r0, [r6, #36]	; 0x24
 80052fa:	6044      	str	r4, [r0, #4]
 80052fc:	6084      	str	r4, [r0, #8]
 80052fe:	6004      	str	r4, [r0, #0]
 8005300:	60c4      	str	r4, [r0, #12]
 8005302:	b13d      	cbz	r5, 8005314 <_Bfree+0x2c>
 8005304:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005306:	686a      	ldr	r2, [r5, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800530e:	6029      	str	r1, [r5, #0]
 8005310:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005314:	bd70      	pop	{r4, r5, r6, pc}

08005316 <__multadd>:
 8005316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531a:	461f      	mov	r7, r3
 800531c:	4606      	mov	r6, r0
 800531e:	460c      	mov	r4, r1
 8005320:	2300      	movs	r3, #0
 8005322:	690d      	ldr	r5, [r1, #16]
 8005324:	f101 0e14 	add.w	lr, r1, #20
 8005328:	f8de 0000 	ldr.w	r0, [lr]
 800532c:	3301      	adds	r3, #1
 800532e:	b281      	uxth	r1, r0
 8005330:	fb02 7101 	mla	r1, r2, r1, r7
 8005334:	0c00      	lsrs	r0, r0, #16
 8005336:	0c0f      	lsrs	r7, r1, #16
 8005338:	fb02 7000 	mla	r0, r2, r0, r7
 800533c:	b289      	uxth	r1, r1
 800533e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005342:	429d      	cmp	r5, r3
 8005344:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005348:	f84e 1b04 	str.w	r1, [lr], #4
 800534c:	dcec      	bgt.n	8005328 <__multadd+0x12>
 800534e:	b1d7      	cbz	r7, 8005386 <__multadd+0x70>
 8005350:	68a3      	ldr	r3, [r4, #8]
 8005352:	429d      	cmp	r5, r3
 8005354:	db12      	blt.n	800537c <__multadd+0x66>
 8005356:	6861      	ldr	r1, [r4, #4]
 8005358:	4630      	mov	r0, r6
 800535a:	3101      	adds	r1, #1
 800535c:	f7ff ff90 	bl	8005280 <_Balloc>
 8005360:	4680      	mov	r8, r0
 8005362:	6922      	ldr	r2, [r4, #16]
 8005364:	f104 010c 	add.w	r1, r4, #12
 8005368:	3202      	adds	r2, #2
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	300c      	adds	r0, #12
 800536e:	f7ff ff6f 	bl	8005250 <memcpy>
 8005372:	4621      	mov	r1, r4
 8005374:	4630      	mov	r0, r6
 8005376:	f7ff ffb7 	bl	80052e8 <_Bfree>
 800537a:	4644      	mov	r4, r8
 800537c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005380:	3501      	adds	r5, #1
 8005382:	615f      	str	r7, [r3, #20]
 8005384:	6125      	str	r5, [r4, #16]
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800538c <__hi0bits>:
 800538c:	0c02      	lsrs	r2, r0, #16
 800538e:	0412      	lsls	r2, r2, #16
 8005390:	4603      	mov	r3, r0
 8005392:	b9b2      	cbnz	r2, 80053c2 <__hi0bits+0x36>
 8005394:	0403      	lsls	r3, r0, #16
 8005396:	2010      	movs	r0, #16
 8005398:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800539c:	bf04      	itt	eq
 800539e:	021b      	lsleq	r3, r3, #8
 80053a0:	3008      	addeq	r0, #8
 80053a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80053a6:	bf04      	itt	eq
 80053a8:	011b      	lsleq	r3, r3, #4
 80053aa:	3004      	addeq	r0, #4
 80053ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80053b0:	bf04      	itt	eq
 80053b2:	009b      	lsleq	r3, r3, #2
 80053b4:	3002      	addeq	r0, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	db06      	blt.n	80053c8 <__hi0bits+0x3c>
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	d503      	bpl.n	80053c6 <__hi0bits+0x3a>
 80053be:	3001      	adds	r0, #1
 80053c0:	4770      	bx	lr
 80053c2:	2000      	movs	r0, #0
 80053c4:	e7e8      	b.n	8005398 <__hi0bits+0xc>
 80053c6:	2020      	movs	r0, #32
 80053c8:	4770      	bx	lr

080053ca <__lo0bits>:
 80053ca:	6803      	ldr	r3, [r0, #0]
 80053cc:	4601      	mov	r1, r0
 80053ce:	f013 0207 	ands.w	r2, r3, #7
 80053d2:	d00b      	beq.n	80053ec <__lo0bits+0x22>
 80053d4:	07da      	lsls	r2, r3, #31
 80053d6:	d423      	bmi.n	8005420 <__lo0bits+0x56>
 80053d8:	0798      	lsls	r0, r3, #30
 80053da:	bf49      	itett	mi
 80053dc:	085b      	lsrmi	r3, r3, #1
 80053de:	089b      	lsrpl	r3, r3, #2
 80053e0:	2001      	movmi	r0, #1
 80053e2:	600b      	strmi	r3, [r1, #0]
 80053e4:	bf5c      	itt	pl
 80053e6:	600b      	strpl	r3, [r1, #0]
 80053e8:	2002      	movpl	r0, #2
 80053ea:	4770      	bx	lr
 80053ec:	b298      	uxth	r0, r3
 80053ee:	b9a8      	cbnz	r0, 800541c <__lo0bits+0x52>
 80053f0:	2010      	movs	r0, #16
 80053f2:	0c1b      	lsrs	r3, r3, #16
 80053f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80053f8:	bf04      	itt	eq
 80053fa:	0a1b      	lsreq	r3, r3, #8
 80053fc:	3008      	addeq	r0, #8
 80053fe:	071a      	lsls	r2, r3, #28
 8005400:	bf04      	itt	eq
 8005402:	091b      	lsreq	r3, r3, #4
 8005404:	3004      	addeq	r0, #4
 8005406:	079a      	lsls	r2, r3, #30
 8005408:	bf04      	itt	eq
 800540a:	089b      	lsreq	r3, r3, #2
 800540c:	3002      	addeq	r0, #2
 800540e:	07da      	lsls	r2, r3, #31
 8005410:	d402      	bmi.n	8005418 <__lo0bits+0x4e>
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	d006      	beq.n	8005424 <__lo0bits+0x5a>
 8005416:	3001      	adds	r0, #1
 8005418:	600b      	str	r3, [r1, #0]
 800541a:	4770      	bx	lr
 800541c:	4610      	mov	r0, r2
 800541e:	e7e9      	b.n	80053f4 <__lo0bits+0x2a>
 8005420:	2000      	movs	r0, #0
 8005422:	4770      	bx	lr
 8005424:	2020      	movs	r0, #32
 8005426:	4770      	bx	lr

08005428 <__i2b>:
 8005428:	b510      	push	{r4, lr}
 800542a:	460c      	mov	r4, r1
 800542c:	2101      	movs	r1, #1
 800542e:	f7ff ff27 	bl	8005280 <_Balloc>
 8005432:	2201      	movs	r2, #1
 8005434:	6144      	str	r4, [r0, #20]
 8005436:	6102      	str	r2, [r0, #16]
 8005438:	bd10      	pop	{r4, pc}

0800543a <__multiply>:
 800543a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543e:	4614      	mov	r4, r2
 8005440:	690a      	ldr	r2, [r1, #16]
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	4689      	mov	r9, r1
 8005446:	429a      	cmp	r2, r3
 8005448:	bfbe      	ittt	lt
 800544a:	460b      	movlt	r3, r1
 800544c:	46a1      	movlt	r9, r4
 800544e:	461c      	movlt	r4, r3
 8005450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005454:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005458:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800545c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005460:	eb07 060a 	add.w	r6, r7, sl
 8005464:	429e      	cmp	r6, r3
 8005466:	bfc8      	it	gt
 8005468:	3101      	addgt	r1, #1
 800546a:	f7ff ff09 	bl	8005280 <_Balloc>
 800546e:	f100 0514 	add.w	r5, r0, #20
 8005472:	462b      	mov	r3, r5
 8005474:	2200      	movs	r2, #0
 8005476:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800547a:	4543      	cmp	r3, r8
 800547c:	d316      	bcc.n	80054ac <__multiply+0x72>
 800547e:	f104 0214 	add.w	r2, r4, #20
 8005482:	f109 0114 	add.w	r1, r9, #20
 8005486:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800548a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	9c01      	ldr	r4, [sp, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	4294      	cmp	r4, r2
 8005496:	d80c      	bhi.n	80054b2 <__multiply+0x78>
 8005498:	2e00      	cmp	r6, #0
 800549a:	dd03      	ble.n	80054a4 <__multiply+0x6a>
 800549c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d054      	beq.n	800554e <__multiply+0x114>
 80054a4:	6106      	str	r6, [r0, #16]
 80054a6:	b003      	add	sp, #12
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	f843 2b04 	str.w	r2, [r3], #4
 80054b0:	e7e3      	b.n	800547a <__multiply+0x40>
 80054b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80054b6:	3204      	adds	r2, #4
 80054b8:	f1ba 0f00 	cmp.w	sl, #0
 80054bc:	d020      	beq.n	8005500 <__multiply+0xc6>
 80054be:	46ae      	mov	lr, r5
 80054c0:	4689      	mov	r9, r1
 80054c2:	f04f 0c00 	mov.w	ip, #0
 80054c6:	f859 4b04 	ldr.w	r4, [r9], #4
 80054ca:	f8be b000 	ldrh.w	fp, [lr]
 80054ce:	b2a3      	uxth	r3, r4
 80054d0:	fb0a b303 	mla	r3, sl, r3, fp
 80054d4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80054d8:	f8de 4000 	ldr.w	r4, [lr]
 80054dc:	4463      	add	r3, ip
 80054de:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80054e2:	fb0a c40b 	mla	r4, sl, fp, ip
 80054e6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80054f0:	454f      	cmp	r7, r9
 80054f2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80054f6:	f84e 3b04 	str.w	r3, [lr], #4
 80054fa:	d8e4      	bhi.n	80054c6 <__multiply+0x8c>
 80054fc:	f8ce c000 	str.w	ip, [lr]
 8005500:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005504:	f1b9 0f00 	cmp.w	r9, #0
 8005508:	d01f      	beq.n	800554a <__multiply+0x110>
 800550a:	46ae      	mov	lr, r5
 800550c:	468c      	mov	ip, r1
 800550e:	f04f 0a00 	mov.w	sl, #0
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	f8bc 4000 	ldrh.w	r4, [ip]
 8005518:	f8be b002 	ldrh.w	fp, [lr, #2]
 800551c:	b29b      	uxth	r3, r3
 800551e:	fb09 b404 	mla	r4, r9, r4, fp
 8005522:	44a2      	add	sl, r4
 8005524:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005528:	f84e 3b04 	str.w	r3, [lr], #4
 800552c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005530:	f8be 4000 	ldrh.w	r4, [lr]
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	fb09 4303 	mla	r3, r9, r3, r4
 800553a:	4567      	cmp	r7, ip
 800553c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005540:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005544:	d8e6      	bhi.n	8005514 <__multiply+0xda>
 8005546:	f8ce 3000 	str.w	r3, [lr]
 800554a:	3504      	adds	r5, #4
 800554c:	e7a0      	b.n	8005490 <__multiply+0x56>
 800554e:	3e01      	subs	r6, #1
 8005550:	e7a2      	b.n	8005498 <__multiply+0x5e>
	...

08005554 <__pow5mult>:
 8005554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005558:	4615      	mov	r5, r2
 800555a:	f012 0203 	ands.w	r2, r2, #3
 800555e:	4606      	mov	r6, r0
 8005560:	460f      	mov	r7, r1
 8005562:	d007      	beq.n	8005574 <__pow5mult+0x20>
 8005564:	4c21      	ldr	r4, [pc, #132]	; (80055ec <__pow5mult+0x98>)
 8005566:	3a01      	subs	r2, #1
 8005568:	2300      	movs	r3, #0
 800556a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800556e:	f7ff fed2 	bl	8005316 <__multadd>
 8005572:	4607      	mov	r7, r0
 8005574:	10ad      	asrs	r5, r5, #2
 8005576:	d035      	beq.n	80055e4 <__pow5mult+0x90>
 8005578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800557a:	b93c      	cbnz	r4, 800558c <__pow5mult+0x38>
 800557c:	2010      	movs	r0, #16
 800557e:	f7ff fc45 	bl	8004e0c <malloc>
 8005582:	6270      	str	r0, [r6, #36]	; 0x24
 8005584:	6044      	str	r4, [r0, #4]
 8005586:	6084      	str	r4, [r0, #8]
 8005588:	6004      	str	r4, [r0, #0]
 800558a:	60c4      	str	r4, [r0, #12]
 800558c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005594:	b94c      	cbnz	r4, 80055aa <__pow5mult+0x56>
 8005596:	f240 2171 	movw	r1, #625	; 0x271
 800559a:	4630      	mov	r0, r6
 800559c:	f7ff ff44 	bl	8005428 <__i2b>
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80055a8:	6003      	str	r3, [r0, #0]
 80055aa:	f04f 0800 	mov.w	r8, #0
 80055ae:	07eb      	lsls	r3, r5, #31
 80055b0:	d50a      	bpl.n	80055c8 <__pow5mult+0x74>
 80055b2:	4639      	mov	r1, r7
 80055b4:	4622      	mov	r2, r4
 80055b6:	4630      	mov	r0, r6
 80055b8:	f7ff ff3f 	bl	800543a <__multiply>
 80055bc:	4681      	mov	r9, r0
 80055be:	4639      	mov	r1, r7
 80055c0:	4630      	mov	r0, r6
 80055c2:	f7ff fe91 	bl	80052e8 <_Bfree>
 80055c6:	464f      	mov	r7, r9
 80055c8:	106d      	asrs	r5, r5, #1
 80055ca:	d00b      	beq.n	80055e4 <__pow5mult+0x90>
 80055cc:	6820      	ldr	r0, [r4, #0]
 80055ce:	b938      	cbnz	r0, 80055e0 <__pow5mult+0x8c>
 80055d0:	4622      	mov	r2, r4
 80055d2:	4621      	mov	r1, r4
 80055d4:	4630      	mov	r0, r6
 80055d6:	f7ff ff30 	bl	800543a <__multiply>
 80055da:	6020      	str	r0, [r4, #0]
 80055dc:	f8c0 8000 	str.w	r8, [r0]
 80055e0:	4604      	mov	r4, r0
 80055e2:	e7e4      	b.n	80055ae <__pow5mult+0x5a>
 80055e4:	4638      	mov	r0, r7
 80055e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ea:	bf00      	nop
 80055ec:	08006e68 	.word	0x08006e68

080055f0 <__lshift>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	460c      	mov	r4, r1
 80055f6:	4607      	mov	r7, r0
 80055f8:	4616      	mov	r6, r2
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005600:	eb0a 0903 	add.w	r9, sl, r3
 8005604:	6849      	ldr	r1, [r1, #4]
 8005606:	68a3      	ldr	r3, [r4, #8]
 8005608:	f109 0501 	add.w	r5, r9, #1
 800560c:	42ab      	cmp	r3, r5
 800560e:	db31      	blt.n	8005674 <__lshift+0x84>
 8005610:	4638      	mov	r0, r7
 8005612:	f7ff fe35 	bl	8005280 <_Balloc>
 8005616:	2200      	movs	r2, #0
 8005618:	4680      	mov	r8, r0
 800561a:	4611      	mov	r1, r2
 800561c:	f100 0314 	add.w	r3, r0, #20
 8005620:	4552      	cmp	r2, sl
 8005622:	db2a      	blt.n	800567a <__lshift+0x8a>
 8005624:	6920      	ldr	r0, [r4, #16]
 8005626:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800562a:	f104 0114 	add.w	r1, r4, #20
 800562e:	f016 021f 	ands.w	r2, r6, #31
 8005632:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005636:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800563a:	d022      	beq.n	8005682 <__lshift+0x92>
 800563c:	2000      	movs	r0, #0
 800563e:	f1c2 0c20 	rsb	ip, r2, #32
 8005642:	680e      	ldr	r6, [r1, #0]
 8005644:	4096      	lsls	r6, r2
 8005646:	4330      	orrs	r0, r6
 8005648:	f843 0b04 	str.w	r0, [r3], #4
 800564c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005650:	458e      	cmp	lr, r1
 8005652:	fa20 f00c 	lsr.w	r0, r0, ip
 8005656:	d8f4      	bhi.n	8005642 <__lshift+0x52>
 8005658:	6018      	str	r0, [r3, #0]
 800565a:	b108      	cbz	r0, 8005660 <__lshift+0x70>
 800565c:	f109 0502 	add.w	r5, r9, #2
 8005660:	3d01      	subs	r5, #1
 8005662:	4638      	mov	r0, r7
 8005664:	f8c8 5010 	str.w	r5, [r8, #16]
 8005668:	4621      	mov	r1, r4
 800566a:	f7ff fe3d 	bl	80052e8 <_Bfree>
 800566e:	4640      	mov	r0, r8
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	3101      	adds	r1, #1
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	e7c8      	b.n	800560c <__lshift+0x1c>
 800567a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800567e:	3201      	adds	r2, #1
 8005680:	e7ce      	b.n	8005620 <__lshift+0x30>
 8005682:	3b04      	subs	r3, #4
 8005684:	f851 2b04 	ldr.w	r2, [r1], #4
 8005688:	458e      	cmp	lr, r1
 800568a:	f843 2f04 	str.w	r2, [r3, #4]!
 800568e:	d8f9      	bhi.n	8005684 <__lshift+0x94>
 8005690:	e7e6      	b.n	8005660 <__lshift+0x70>

08005692 <__mcmp>:
 8005692:	6903      	ldr	r3, [r0, #16]
 8005694:	690a      	ldr	r2, [r1, #16]
 8005696:	b530      	push	{r4, r5, lr}
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	d10c      	bne.n	80056b6 <__mcmp+0x24>
 800569c:	0092      	lsls	r2, r2, #2
 800569e:	3014      	adds	r0, #20
 80056a0:	3114      	adds	r1, #20
 80056a2:	1884      	adds	r4, r0, r2
 80056a4:	4411      	add	r1, r2
 80056a6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056aa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056ae:	4295      	cmp	r5, r2
 80056b0:	d003      	beq.n	80056ba <__mcmp+0x28>
 80056b2:	d305      	bcc.n	80056c0 <__mcmp+0x2e>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4618      	mov	r0, r3
 80056b8:	bd30      	pop	{r4, r5, pc}
 80056ba:	42a0      	cmp	r0, r4
 80056bc:	d3f3      	bcc.n	80056a6 <__mcmp+0x14>
 80056be:	e7fa      	b.n	80056b6 <__mcmp+0x24>
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c4:	e7f7      	b.n	80056b6 <__mcmp+0x24>

080056c6 <__mdiff>:
 80056c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ca:	460d      	mov	r5, r1
 80056cc:	4607      	mov	r7, r0
 80056ce:	4611      	mov	r1, r2
 80056d0:	4628      	mov	r0, r5
 80056d2:	4614      	mov	r4, r2
 80056d4:	f7ff ffdd 	bl	8005692 <__mcmp>
 80056d8:	1e06      	subs	r6, r0, #0
 80056da:	d108      	bne.n	80056ee <__mdiff+0x28>
 80056dc:	4631      	mov	r1, r6
 80056de:	4638      	mov	r0, r7
 80056e0:	f7ff fdce 	bl	8005280 <_Balloc>
 80056e4:	2301      	movs	r3, #1
 80056e6:	6146      	str	r6, [r0, #20]
 80056e8:	6103      	str	r3, [r0, #16]
 80056ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ee:	bfa4      	itt	ge
 80056f0:	4623      	movge	r3, r4
 80056f2:	462c      	movge	r4, r5
 80056f4:	4638      	mov	r0, r7
 80056f6:	6861      	ldr	r1, [r4, #4]
 80056f8:	bfa6      	itte	ge
 80056fa:	461d      	movge	r5, r3
 80056fc:	2600      	movge	r6, #0
 80056fe:	2601      	movlt	r6, #1
 8005700:	f7ff fdbe 	bl	8005280 <_Balloc>
 8005704:	f04f 0c00 	mov.w	ip, #0
 8005708:	60c6      	str	r6, [r0, #12]
 800570a:	692b      	ldr	r3, [r5, #16]
 800570c:	6926      	ldr	r6, [r4, #16]
 800570e:	f104 0214 	add.w	r2, r4, #20
 8005712:	f105 0914 	add.w	r9, r5, #20
 8005716:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800571a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800571e:	f100 0114 	add.w	r1, r0, #20
 8005722:	f852 ab04 	ldr.w	sl, [r2], #4
 8005726:	f859 5b04 	ldr.w	r5, [r9], #4
 800572a:	fa1f f38a 	uxth.w	r3, sl
 800572e:	4463      	add	r3, ip
 8005730:	b2ac      	uxth	r4, r5
 8005732:	1b1b      	subs	r3, r3, r4
 8005734:	0c2c      	lsrs	r4, r5, #16
 8005736:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800573a:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800573e:	b29b      	uxth	r3, r3
 8005740:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005744:	45c8      	cmp	r8, r9
 8005746:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800574a:	4696      	mov	lr, r2
 800574c:	f841 4b04 	str.w	r4, [r1], #4
 8005750:	d8e7      	bhi.n	8005722 <__mdiff+0x5c>
 8005752:	45be      	cmp	lr, r7
 8005754:	d305      	bcc.n	8005762 <__mdiff+0x9c>
 8005756:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800575a:	b18b      	cbz	r3, 8005780 <__mdiff+0xba>
 800575c:	6106      	str	r6, [r0, #16]
 800575e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005762:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005766:	b2a2      	uxth	r2, r4
 8005768:	4462      	add	r2, ip
 800576a:	1413      	asrs	r3, r2, #16
 800576c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005770:	b292      	uxth	r2, r2
 8005772:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005776:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800577a:	f841 2b04 	str.w	r2, [r1], #4
 800577e:	e7e8      	b.n	8005752 <__mdiff+0x8c>
 8005780:	3e01      	subs	r6, #1
 8005782:	e7e8      	b.n	8005756 <__mdiff+0x90>

08005784 <__d2b>:
 8005784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005788:	461c      	mov	r4, r3
 800578a:	2101      	movs	r1, #1
 800578c:	4690      	mov	r8, r2
 800578e:	9e08      	ldr	r6, [sp, #32]
 8005790:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005792:	f7ff fd75 	bl	8005280 <_Balloc>
 8005796:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800579a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800579e:	4607      	mov	r7, r0
 80057a0:	bb34      	cbnz	r4, 80057f0 <__d2b+0x6c>
 80057a2:	9201      	str	r2, [sp, #4]
 80057a4:	f1b8 0f00 	cmp.w	r8, #0
 80057a8:	d027      	beq.n	80057fa <__d2b+0x76>
 80057aa:	a802      	add	r0, sp, #8
 80057ac:	f840 8d08 	str.w	r8, [r0, #-8]!
 80057b0:	f7ff fe0b 	bl	80053ca <__lo0bits>
 80057b4:	9900      	ldr	r1, [sp, #0]
 80057b6:	b1f0      	cbz	r0, 80057f6 <__d2b+0x72>
 80057b8:	9a01      	ldr	r2, [sp, #4]
 80057ba:	f1c0 0320 	rsb	r3, r0, #32
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	430b      	orrs	r3, r1
 80057c4:	40c2      	lsrs	r2, r0
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	9201      	str	r2, [sp, #4]
 80057ca:	9b01      	ldr	r3, [sp, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf14      	ite	ne
 80057d0:	2102      	movne	r1, #2
 80057d2:	2101      	moveq	r1, #1
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	6139      	str	r1, [r7, #16]
 80057d8:	b1c4      	cbz	r4, 800580c <__d2b+0x88>
 80057da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80057de:	4404      	add	r4, r0
 80057e0:	6034      	str	r4, [r6, #0]
 80057e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057e6:	6028      	str	r0, [r5, #0]
 80057e8:	4638      	mov	r0, r7
 80057ea:	b002      	add	sp, #8
 80057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057f4:	e7d5      	b.n	80057a2 <__d2b+0x1e>
 80057f6:	6179      	str	r1, [r7, #20]
 80057f8:	e7e7      	b.n	80057ca <__d2b+0x46>
 80057fa:	a801      	add	r0, sp, #4
 80057fc:	f7ff fde5 	bl	80053ca <__lo0bits>
 8005800:	2101      	movs	r1, #1
 8005802:	9b01      	ldr	r3, [sp, #4]
 8005804:	6139      	str	r1, [r7, #16]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	3020      	adds	r0, #32
 800580a:	e7e5      	b.n	80057d8 <__d2b+0x54>
 800580c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005810:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005814:	6030      	str	r0, [r6, #0]
 8005816:	6918      	ldr	r0, [r3, #16]
 8005818:	f7ff fdb8 	bl	800538c <__hi0bits>
 800581c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005820:	e7e1      	b.n	80057e6 <__d2b+0x62>
	...

08005824 <_sbrk_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	2300      	movs	r3, #0
 8005828:	4c05      	ldr	r4, [pc, #20]	; (8005840 <_sbrk_r+0x1c>)
 800582a:	4605      	mov	r5, r0
 800582c:	4608      	mov	r0, r1
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	f000 fb80 	bl	8005f34 <_sbrk>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_sbrk_r+0x1a>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	b103      	cbz	r3, 800583e <_sbrk_r+0x1a>
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	20000b74 	.word	0x20000b74

08005844 <__ssprint_r>:
 8005844:	6893      	ldr	r3, [r2, #8]
 8005846:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	4681      	mov	r9, r0
 800584c:	460c      	mov	r4, r1
 800584e:	4617      	mov	r7, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d060      	beq.n	8005916 <__ssprint_r+0xd2>
 8005854:	f04f 0b00 	mov.w	fp, #0
 8005858:	465e      	mov	r6, fp
 800585a:	f8d2 a000 	ldr.w	sl, [r2]
 800585e:	b356      	cbz	r6, 80058b6 <__ssprint_r+0x72>
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	429e      	cmp	r6, r3
 8005864:	d344      	bcc.n	80058f0 <__ssprint_r+0xac>
 8005866:	89a2      	ldrh	r2, [r4, #12]
 8005868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800586c:	d03e      	beq.n	80058ec <__ssprint_r+0xa8>
 800586e:	2302      	movs	r3, #2
 8005870:	6825      	ldr	r5, [r4, #0]
 8005872:	6921      	ldr	r1, [r4, #16]
 8005874:	eba5 0801 	sub.w	r8, r5, r1
 8005878:	6965      	ldr	r5, [r4, #20]
 800587a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800587e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005882:	f108 0301 	add.w	r3, r8, #1
 8005886:	4433      	add	r3, r6
 8005888:	429d      	cmp	r5, r3
 800588a:	bf38      	it	cc
 800588c:	461d      	movcc	r5, r3
 800588e:	0553      	lsls	r3, r2, #21
 8005890:	d546      	bpl.n	8005920 <__ssprint_r+0xdc>
 8005892:	4629      	mov	r1, r5
 8005894:	4648      	mov	r0, r9
 8005896:	f7ff fac1 	bl	8004e1c <_malloc_r>
 800589a:	b998      	cbnz	r0, 80058c4 <__ssprint_r+0x80>
 800589c:	230c      	movs	r3, #12
 800589e:	f8c9 3000 	str.w	r3, [r9]
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	2300      	movs	r3, #0
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	e031      	b.n	800591a <__ssprint_r+0xd6>
 80058b6:	f8da b000 	ldr.w	fp, [sl]
 80058ba:	f8da 6004 	ldr.w	r6, [sl, #4]
 80058be:	f10a 0a08 	add.w	sl, sl, #8
 80058c2:	e7cc      	b.n	800585e <__ssprint_r+0x1a>
 80058c4:	4642      	mov	r2, r8
 80058c6:	6921      	ldr	r1, [r4, #16]
 80058c8:	9001      	str	r0, [sp, #4]
 80058ca:	f7ff fcc1 	bl	8005250 <memcpy>
 80058ce:	89a2      	ldrh	r2, [r4, #12]
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80058d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058da:	81a2      	strh	r2, [r4, #12]
 80058dc:	6123      	str	r3, [r4, #16]
 80058de:	4443      	add	r3, r8
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	4633      	mov	r3, r6
 80058e4:	6165      	str	r5, [r4, #20]
 80058e6:	eba5 0508 	sub.w	r5, r5, r8
 80058ea:	60a5      	str	r5, [r4, #8]
 80058ec:	429e      	cmp	r6, r3
 80058ee:	d200      	bcs.n	80058f2 <__ssprint_r+0xae>
 80058f0:	4633      	mov	r3, r6
 80058f2:	461a      	mov	r2, r3
 80058f4:	4659      	mov	r1, fp
 80058f6:	6820      	ldr	r0, [r4, #0]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	f000 f971 	bl	8005be0 <memmove>
 80058fe:	68a2      	ldr	r2, [r4, #8]
 8005900:	9b01      	ldr	r3, [sp, #4]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	60a2      	str	r2, [r4, #8]
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	4413      	add	r3, r2
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	1b9e      	subs	r6, r3, r6
 8005910:	60be      	str	r6, [r7, #8]
 8005912:	2e00      	cmp	r6, #0
 8005914:	d1cf      	bne.n	80058b6 <__ssprint_r+0x72>
 8005916:	2000      	movs	r0, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	b003      	add	sp, #12
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	462a      	mov	r2, r5
 8005922:	4648      	mov	r0, r9
 8005924:	f000 f976 	bl	8005c14 <_realloc_r>
 8005928:	4603      	mov	r3, r0
 800592a:	2800      	cmp	r0, #0
 800592c:	d1d6      	bne.n	80058dc <__ssprint_r+0x98>
 800592e:	6921      	ldr	r1, [r4, #16]
 8005930:	4648      	mov	r0, r9
 8005932:	f000 f885 	bl	8005a40 <_free_r>
 8005936:	e7b1      	b.n	800589c <__ssprint_r+0x58>

08005938 <_calloc_r>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4351      	muls	r1, r2
 800593c:	f7ff fa6e 	bl	8004e1c <_malloc_r>
 8005940:	4604      	mov	r4, r0
 8005942:	b198      	cbz	r0, 800596c <_calloc_r+0x34>
 8005944:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005948:	f022 0203 	bic.w	r2, r2, #3
 800594c:	3a04      	subs	r2, #4
 800594e:	2a24      	cmp	r2, #36	; 0x24
 8005950:	d81b      	bhi.n	800598a <_calloc_r+0x52>
 8005952:	2a13      	cmp	r2, #19
 8005954:	d917      	bls.n	8005986 <_calloc_r+0x4e>
 8005956:	2100      	movs	r1, #0
 8005958:	2a1b      	cmp	r2, #27
 800595a:	6001      	str	r1, [r0, #0]
 800595c:	6041      	str	r1, [r0, #4]
 800595e:	d807      	bhi.n	8005970 <_calloc_r+0x38>
 8005960:	f100 0308 	add.w	r3, r0, #8
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	4620      	mov	r0, r4
 800596e:	bd10      	pop	{r4, pc}
 8005970:	2a24      	cmp	r2, #36	; 0x24
 8005972:	6081      	str	r1, [r0, #8]
 8005974:	60c1      	str	r1, [r0, #12]
 8005976:	bf11      	iteee	ne
 8005978:	f100 0310 	addne.w	r3, r0, #16
 800597c:	6101      	streq	r1, [r0, #16]
 800597e:	f100 0318 	addeq.w	r3, r0, #24
 8005982:	6141      	streq	r1, [r0, #20]
 8005984:	e7ee      	b.n	8005964 <_calloc_r+0x2c>
 8005986:	4603      	mov	r3, r0
 8005988:	e7ec      	b.n	8005964 <_calloc_r+0x2c>
 800598a:	2100      	movs	r1, #0
 800598c:	f7fd fbd2 	bl	8003134 <memset>
 8005990:	e7ec      	b.n	800596c <_calloc_r+0x34>
	...

08005994 <_malloc_trim_r>:
 8005994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005998:	4689      	mov	r9, r1
 800599a:	4f25      	ldr	r7, [pc, #148]	; (8005a30 <_malloc_trim_r+0x9c>)
 800599c:	4606      	mov	r6, r0
 800599e:	f7ff fc63 	bl	8005268 <__malloc_lock>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005a3c <_malloc_trim_r+0xa8>
 80059a8:	685d      	ldr	r5, [r3, #4]
 80059aa:	f1a8 0411 	sub.w	r4, r8, #17
 80059ae:	f025 0503 	bic.w	r5, r5, #3
 80059b2:	eba4 0409 	sub.w	r4, r4, r9
 80059b6:	442c      	add	r4, r5
 80059b8:	fbb4 f4f8 	udiv	r4, r4, r8
 80059bc:	3c01      	subs	r4, #1
 80059be:	fb08 f404 	mul.w	r4, r8, r4
 80059c2:	4544      	cmp	r4, r8
 80059c4:	da05      	bge.n	80059d2 <_malloc_trim_r+0x3e>
 80059c6:	4630      	mov	r0, r6
 80059c8:	f7ff fc54 	bl	8005274 <__malloc_unlock>
 80059cc:	2000      	movs	r0, #0
 80059ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d2:	2100      	movs	r1, #0
 80059d4:	4630      	mov	r0, r6
 80059d6:	f7ff ff25 	bl	8005824 <_sbrk_r>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	442b      	add	r3, r5
 80059de:	4298      	cmp	r0, r3
 80059e0:	d1f1      	bne.n	80059c6 <_malloc_trim_r+0x32>
 80059e2:	4261      	negs	r1, r4
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff ff1d 	bl	8005824 <_sbrk_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	d110      	bne.n	8005a10 <_malloc_trim_r+0x7c>
 80059ee:	2100      	movs	r1, #0
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7ff ff17 	bl	8005824 <_sbrk_r>
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	1a83      	subs	r3, r0, r2
 80059fa:	2b0f      	cmp	r3, #15
 80059fc:	dde3      	ble.n	80059c6 <_malloc_trim_r+0x32>
 80059fe:	490d      	ldr	r1, [pc, #52]	; (8005a34 <_malloc_trim_r+0xa0>)
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	6809      	ldr	r1, [r1, #0]
 8005a06:	6053      	str	r3, [r2, #4]
 8005a08:	1a40      	subs	r0, r0, r1
 8005a0a:	490b      	ldr	r1, [pc, #44]	; (8005a38 <_malloc_trim_r+0xa4>)
 8005a0c:	6008      	str	r0, [r1, #0]
 8005a0e:	e7da      	b.n	80059c6 <_malloc_trim_r+0x32>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <_malloc_trim_r+0xa4>)
 8005a14:	1b2d      	subs	r5, r5, r4
 8005a16:	f045 0501 	orr.w	r5, r5, #1
 8005a1a:	605d      	str	r5, [r3, #4]
 8005a1c:	6813      	ldr	r3, [r2, #0]
 8005a1e:	4630      	mov	r0, r6
 8005a20:	1b1c      	subs	r4, r3, r4
 8005a22:	6014      	str	r4, [r2, #0]
 8005a24:	f7ff fc26 	bl	8005274 <__malloc_unlock>
 8005a28:	2001      	movs	r0, #1
 8005a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000100 	.word	0x20000100
 8005a34:	20000508 	.word	0x20000508
 8005a38:	20000aa0 	.word	0x20000aa0
 8005a3c:	00000080 	.word	0x00000080

08005a40 <_free_r>:
 8005a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4604      	mov	r4, r0
 8005a46:	4688      	mov	r8, r1
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	f000 80ab 	beq.w	8005ba4 <_free_r+0x164>
 8005a4e:	f7ff fc0b 	bl	8005268 <__malloc_lock>
 8005a52:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005a56:	4d54      	ldr	r5, [pc, #336]	; (8005ba8 <_free_r+0x168>)
 8005a58:	f022 0001 	bic.w	r0, r2, #1
 8005a5c:	f1a8 0308 	sub.w	r3, r8, #8
 8005a60:	181f      	adds	r7, r3, r0
 8005a62:	68a9      	ldr	r1, [r5, #8]
 8005a64:	687e      	ldr	r6, [r7, #4]
 8005a66:	428f      	cmp	r7, r1
 8005a68:	f026 0603 	bic.w	r6, r6, #3
 8005a6c:	f002 0201 	and.w	r2, r2, #1
 8005a70:	d11b      	bne.n	8005aaa <_free_r+0x6a>
 8005a72:	4430      	add	r0, r6
 8005a74:	b93a      	cbnz	r2, 8005a86 <_free_r+0x46>
 8005a76:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	6899      	ldr	r1, [r3, #8]
 8005a7e:	4410      	add	r0, r2
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	60ca      	str	r2, [r1, #12]
 8005a84:	6091      	str	r1, [r2, #8]
 8005a86:	f040 0201 	orr.w	r2, r0, #1
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	60ab      	str	r3, [r5, #8]
 8005a8e:	4b47      	ldr	r3, [pc, #284]	; (8005bac <_free_r+0x16c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4298      	cmp	r0, r3
 8005a94:	d304      	bcc.n	8005aa0 <_free_r+0x60>
 8005a96:	4b46      	ldr	r3, [pc, #280]	; (8005bb0 <_free_r+0x170>)
 8005a98:	4620      	mov	r0, r4
 8005a9a:	6819      	ldr	r1, [r3, #0]
 8005a9c:	f7ff ff7a 	bl	8005994 <_malloc_trim_r>
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa6:	f7ff bbe5 	b.w	8005274 <__malloc_unlock>
 8005aaa:	607e      	str	r6, [r7, #4]
 8005aac:	2a00      	cmp	r2, #0
 8005aae:	d139      	bne.n	8005b24 <_free_r+0xe4>
 8005ab0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005ab4:	f105 0e08 	add.w	lr, r5, #8
 8005ab8:	1a5b      	subs	r3, r3, r1
 8005aba:	4408      	add	r0, r1
 8005abc:	6899      	ldr	r1, [r3, #8]
 8005abe:	4571      	cmp	r1, lr
 8005ac0:	d032      	beq.n	8005b28 <_free_r+0xe8>
 8005ac2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005ac6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005aca:	f8ce 1008 	str.w	r1, [lr, #8]
 8005ace:	19b9      	adds	r1, r7, r6
 8005ad0:	6849      	ldr	r1, [r1, #4]
 8005ad2:	07c9      	lsls	r1, r1, #31
 8005ad4:	d40a      	bmi.n	8005aec <_free_r+0xac>
 8005ad6:	4430      	add	r0, r6
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	bb3a      	cbnz	r2, 8005b2c <_free_r+0xec>
 8005adc:	4e35      	ldr	r6, [pc, #212]	; (8005bb4 <_free_r+0x174>)
 8005ade:	42b1      	cmp	r1, r6
 8005ae0:	d124      	bne.n	8005b2c <_free_r+0xec>
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	616b      	str	r3, [r5, #20]
 8005ae6:	612b      	str	r3, [r5, #16]
 8005ae8:	60d9      	str	r1, [r3, #12]
 8005aea:	6099      	str	r1, [r3, #8]
 8005aec:	f040 0101 	orr.w	r1, r0, #1
 8005af0:	6059      	str	r1, [r3, #4]
 8005af2:	5018      	str	r0, [r3, r0]
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	d1d3      	bne.n	8005aa0 <_free_r+0x60>
 8005af8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005afc:	d21a      	bcs.n	8005b34 <_free_r+0xf4>
 8005afe:	2201      	movs	r2, #1
 8005b00:	08c0      	lsrs	r0, r0, #3
 8005b02:	1081      	asrs	r1, r0, #2
 8005b04:	408a      	lsls	r2, r1
 8005b06:	6869      	ldr	r1, [r5, #4]
 8005b08:	3001      	adds	r0, #1
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	606a      	str	r2, [r5, #4]
 8005b0e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005b12:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005b16:	3a08      	subs	r2, #8
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	6099      	str	r1, [r3, #8]
 8005b1c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005b20:	60cb      	str	r3, [r1, #12]
 8005b22:	e7bd      	b.n	8005aa0 <_free_r+0x60>
 8005b24:	2200      	movs	r2, #0
 8005b26:	e7d2      	b.n	8005ace <_free_r+0x8e>
 8005b28:	2201      	movs	r2, #1
 8005b2a:	e7d0      	b.n	8005ace <_free_r+0x8e>
 8005b2c:	68fe      	ldr	r6, [r7, #12]
 8005b2e:	60ce      	str	r6, [r1, #12]
 8005b30:	60b1      	str	r1, [r6, #8]
 8005b32:	e7db      	b.n	8005aec <_free_r+0xac>
 8005b34:	0a42      	lsrs	r2, r0, #9
 8005b36:	2a04      	cmp	r2, #4
 8005b38:	d813      	bhi.n	8005b62 <_free_r+0x122>
 8005b3a:	0982      	lsrs	r2, r0, #6
 8005b3c:	3238      	adds	r2, #56	; 0x38
 8005b3e:	1c51      	adds	r1, r2, #1
 8005b40:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005b44:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005b48:	428e      	cmp	r6, r1
 8005b4a:	d124      	bne.n	8005b96 <_free_r+0x156>
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	1092      	asrs	r2, r2, #2
 8005b50:	fa00 f202 	lsl.w	r2, r0, r2
 8005b54:	6868      	ldr	r0, [r5, #4]
 8005b56:	4302      	orrs	r2, r0
 8005b58:	606a      	str	r2, [r5, #4]
 8005b5a:	60de      	str	r6, [r3, #12]
 8005b5c:	6099      	str	r1, [r3, #8]
 8005b5e:	60b3      	str	r3, [r6, #8]
 8005b60:	e7de      	b.n	8005b20 <_free_r+0xe0>
 8005b62:	2a14      	cmp	r2, #20
 8005b64:	d801      	bhi.n	8005b6a <_free_r+0x12a>
 8005b66:	325b      	adds	r2, #91	; 0x5b
 8005b68:	e7e9      	b.n	8005b3e <_free_r+0xfe>
 8005b6a:	2a54      	cmp	r2, #84	; 0x54
 8005b6c:	d802      	bhi.n	8005b74 <_free_r+0x134>
 8005b6e:	0b02      	lsrs	r2, r0, #12
 8005b70:	326e      	adds	r2, #110	; 0x6e
 8005b72:	e7e4      	b.n	8005b3e <_free_r+0xfe>
 8005b74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005b78:	d802      	bhi.n	8005b80 <_free_r+0x140>
 8005b7a:	0bc2      	lsrs	r2, r0, #15
 8005b7c:	3277      	adds	r2, #119	; 0x77
 8005b7e:	e7de      	b.n	8005b3e <_free_r+0xfe>
 8005b80:	f240 5154 	movw	r1, #1364	; 0x554
 8005b84:	428a      	cmp	r2, r1
 8005b86:	bf9a      	itte	ls
 8005b88:	0c82      	lsrls	r2, r0, #18
 8005b8a:	327c      	addls	r2, #124	; 0x7c
 8005b8c:	227e      	movhi	r2, #126	; 0x7e
 8005b8e:	e7d6      	b.n	8005b3e <_free_r+0xfe>
 8005b90:	6889      	ldr	r1, [r1, #8]
 8005b92:	428e      	cmp	r6, r1
 8005b94:	d004      	beq.n	8005ba0 <_free_r+0x160>
 8005b96:	684a      	ldr	r2, [r1, #4]
 8005b98:	f022 0203 	bic.w	r2, r2, #3
 8005b9c:	4290      	cmp	r0, r2
 8005b9e:	d3f7      	bcc.n	8005b90 <_free_r+0x150>
 8005ba0:	68ce      	ldr	r6, [r1, #12]
 8005ba2:	e7da      	b.n	8005b5a <_free_r+0x11a>
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba8:	20000100 	.word	0x20000100
 8005bac:	2000050c 	.word	0x2000050c
 8005bb0:	20000ad0 	.word	0x20000ad0
 8005bb4:	20000108 	.word	0x20000108

08005bb8 <__retarget_lock_acquire_recursive>:
 8005bb8:	4770      	bx	lr

08005bba <__retarget_lock_release_recursive>:
 8005bba:	4770      	bx	lr

08005bbc <__ascii_mbtowc>:
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	b901      	cbnz	r1, 8005bc2 <__ascii_mbtowc+0x6>
 8005bc0:	a901      	add	r1, sp, #4
 8005bc2:	b142      	cbz	r2, 8005bd6 <__ascii_mbtowc+0x1a>
 8005bc4:	b14b      	cbz	r3, 8005bda <__ascii_mbtowc+0x1e>
 8005bc6:	7813      	ldrb	r3, [r2, #0]
 8005bc8:	600b      	str	r3, [r1, #0]
 8005bca:	7812      	ldrb	r2, [r2, #0]
 8005bcc:	1c10      	adds	r0, r2, #0
 8005bce:	bf18      	it	ne
 8005bd0:	2001      	movne	r0, #1
 8005bd2:	b002      	add	sp, #8
 8005bd4:	4770      	bx	lr
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	e7fb      	b.n	8005bd2 <__ascii_mbtowc+0x16>
 8005bda:	f06f 0001 	mvn.w	r0, #1
 8005bde:	e7f8      	b.n	8005bd2 <__ascii_mbtowc+0x16>

08005be0 <memmove>:
 8005be0:	4288      	cmp	r0, r1
 8005be2:	b510      	push	{r4, lr}
 8005be4:	eb01 0302 	add.w	r3, r1, r2
 8005be8:	d803      	bhi.n	8005bf2 <memmove+0x12>
 8005bea:	1e42      	subs	r2, r0, #1
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d10c      	bne.n	8005c0a <memmove+0x2a>
 8005bf0:	bd10      	pop	{r4, pc}
 8005bf2:	4298      	cmp	r0, r3
 8005bf4:	d2f9      	bcs.n	8005bea <memmove+0xa>
 8005bf6:	1881      	adds	r1, r0, r2
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	42d3      	cmn	r3, r2
 8005bfc:	d100      	bne.n	8005c00 <memmove+0x20>
 8005bfe:	bd10      	pop	{r4, pc}
 8005c00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c08:	e7f7      	b.n	8005bfa <memmove+0x1a>
 8005c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c12:	e7eb      	b.n	8005bec <memmove+0xc>

08005c14 <_realloc_r>:
 8005c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	4682      	mov	sl, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	b929      	cbnz	r1, 8005c2a <_realloc_r+0x16>
 8005c1e:	4611      	mov	r1, r2
 8005c20:	b003      	add	sp, #12
 8005c22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	f7ff b8f9 	b.w	8004e1c <_malloc_r>
 8005c2a:	9201      	str	r2, [sp, #4]
 8005c2c:	f7ff fb1c 	bl	8005268 <__malloc_lock>
 8005c30:	9a01      	ldr	r2, [sp, #4]
 8005c32:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005c36:	f102 080b 	add.w	r8, r2, #11
 8005c3a:	f1b8 0f16 	cmp.w	r8, #22
 8005c3e:	f1a4 0908 	sub.w	r9, r4, #8
 8005c42:	f025 0603 	bic.w	r6, r5, #3
 8005c46:	d90a      	bls.n	8005c5e <_realloc_r+0x4a>
 8005c48:	f038 0807 	bics.w	r8, r8, #7
 8005c4c:	d509      	bpl.n	8005c62 <_realloc_r+0x4e>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	2700      	movs	r7, #0
 8005c52:	f8ca 3000 	str.w	r3, [sl]
 8005c56:	4638      	mov	r0, r7
 8005c58:	b003      	add	sp, #12
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	f04f 0810 	mov.w	r8, #16
 8005c62:	4590      	cmp	r8, r2
 8005c64:	d3f3      	bcc.n	8005c4e <_realloc_r+0x3a>
 8005c66:	45b0      	cmp	r8, r6
 8005c68:	f340 8148 	ble.w	8005efc <_realloc_r+0x2e8>
 8005c6c:	4ba9      	ldr	r3, [pc, #676]	; (8005f14 <_realloc_r+0x300>)
 8005c6e:	eb09 0106 	add.w	r1, r9, r6
 8005c72:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005c76:	469b      	mov	fp, r3
 8005c78:	4571      	cmp	r1, lr
 8005c7a:	684b      	ldr	r3, [r1, #4]
 8005c7c:	d005      	beq.n	8005c8a <_realloc_r+0x76>
 8005c7e:	f023 0001 	bic.w	r0, r3, #1
 8005c82:	4408      	add	r0, r1
 8005c84:	6840      	ldr	r0, [r0, #4]
 8005c86:	07c7      	lsls	r7, r0, #31
 8005c88:	d447      	bmi.n	8005d1a <_realloc_r+0x106>
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	4571      	cmp	r1, lr
 8005c90:	eb06 0703 	add.w	r7, r6, r3
 8005c94:	d119      	bne.n	8005cca <_realloc_r+0xb6>
 8005c96:	f108 0010 	add.w	r0, r8, #16
 8005c9a:	4287      	cmp	r7, r0
 8005c9c:	db3f      	blt.n	8005d1e <_realloc_r+0x10a>
 8005c9e:	eba7 0708 	sub.w	r7, r7, r8
 8005ca2:	eb09 0308 	add.w	r3, r9, r8
 8005ca6:	f047 0701 	orr.w	r7, r7, #1
 8005caa:	f8cb 3008 	str.w	r3, [fp, #8]
 8005cae:	605f      	str	r7, [r3, #4]
 8005cb0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	ea43 0308 	orr.w	r3, r3, r8
 8005cbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8005cc2:	f7ff fad7 	bl	8005274 <__malloc_unlock>
 8005cc6:	4627      	mov	r7, r4
 8005cc8:	e7c5      	b.n	8005c56 <_realloc_r+0x42>
 8005cca:	45b8      	cmp	r8, r7
 8005ccc:	dc27      	bgt.n	8005d1e <_realloc_r+0x10a>
 8005cce:	68cb      	ldr	r3, [r1, #12]
 8005cd0:	688a      	ldr	r2, [r1, #8]
 8005cd2:	60d3      	str	r3, [r2, #12]
 8005cd4:	609a      	str	r2, [r3, #8]
 8005cd6:	eba7 0008 	sub.w	r0, r7, r8
 8005cda:	280f      	cmp	r0, #15
 8005cdc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005ce0:	eb09 0207 	add.w	r2, r9, r7
 8005ce4:	f240 810c 	bls.w	8005f00 <_realloc_r+0x2ec>
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	eb09 0108 	add.w	r1, r9, r8
 8005cf0:	ea43 0308 	orr.w	r3, r3, r8
 8005cf4:	f040 0001 	orr.w	r0, r0, #1
 8005cf8:	f8c9 3004 	str.w	r3, [r9, #4]
 8005cfc:	6048      	str	r0, [r1, #4]
 8005cfe:	6853      	ldr	r3, [r2, #4]
 8005d00:	3108      	adds	r1, #8
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6053      	str	r3, [r2, #4]
 8005d08:	4650      	mov	r0, sl
 8005d0a:	f7ff fe99 	bl	8005a40 <_free_r>
 8005d0e:	4650      	mov	r0, sl
 8005d10:	f7ff fab0 	bl	8005274 <__malloc_unlock>
 8005d14:	f109 0708 	add.w	r7, r9, #8
 8005d18:	e79d      	b.n	8005c56 <_realloc_r+0x42>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	07e8      	lsls	r0, r5, #31
 8005d20:	f100 8085 	bmi.w	8005e2e <_realloc_r+0x21a>
 8005d24:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005d28:	eba9 0505 	sub.w	r5, r9, r5
 8005d2c:	6868      	ldr	r0, [r5, #4]
 8005d2e:	f020 0003 	bic.w	r0, r0, #3
 8005d32:	4430      	add	r0, r6
 8005d34:	2900      	cmp	r1, #0
 8005d36:	d077      	beq.n	8005e28 <_realloc_r+0x214>
 8005d38:	4571      	cmp	r1, lr
 8005d3a:	d151      	bne.n	8005de0 <_realloc_r+0x1cc>
 8005d3c:	4403      	add	r3, r0
 8005d3e:	f108 0110 	add.w	r1, r8, #16
 8005d42:	428b      	cmp	r3, r1
 8005d44:	db70      	blt.n	8005e28 <_realloc_r+0x214>
 8005d46:	462f      	mov	r7, r5
 8005d48:	68ea      	ldr	r2, [r5, #12]
 8005d4a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005d4e:	60ca      	str	r2, [r1, #12]
 8005d50:	6091      	str	r1, [r2, #8]
 8005d52:	1f32      	subs	r2, r6, #4
 8005d54:	2a24      	cmp	r2, #36	; 0x24
 8005d56:	d83c      	bhi.n	8005dd2 <_realloc_r+0x1be>
 8005d58:	2a13      	cmp	r2, #19
 8005d5a:	d937      	bls.n	8005dcc <_realloc_r+0x1b8>
 8005d5c:	6821      	ldr	r1, [r4, #0]
 8005d5e:	2a1b      	cmp	r2, #27
 8005d60:	60a9      	str	r1, [r5, #8]
 8005d62:	6861      	ldr	r1, [r4, #4]
 8005d64:	60e9      	str	r1, [r5, #12]
 8005d66:	d81c      	bhi.n	8005da2 <_realloc_r+0x18e>
 8005d68:	f105 0210 	add.w	r2, r5, #16
 8005d6c:	f104 0108 	add.w	r1, r4, #8
 8005d70:	6808      	ldr	r0, [r1, #0]
 8005d72:	6010      	str	r0, [r2, #0]
 8005d74:	6848      	ldr	r0, [r1, #4]
 8005d76:	6050      	str	r0, [r2, #4]
 8005d78:	6889      	ldr	r1, [r1, #8]
 8005d7a:	6091      	str	r1, [r2, #8]
 8005d7c:	eba3 0308 	sub.w	r3, r3, r8
 8005d80:	eb05 0208 	add.w	r2, r5, r8
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	f8cb 2008 	str.w	r2, [fp, #8]
 8005d8c:	6053      	str	r3, [r2, #4]
 8005d8e:	686b      	ldr	r3, [r5, #4]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	ea43 0308 	orr.w	r3, r3, r8
 8005d98:	606b      	str	r3, [r5, #4]
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	f7ff fa6a 	bl	8005274 <__malloc_unlock>
 8005da0:	e759      	b.n	8005c56 <_realloc_r+0x42>
 8005da2:	68a1      	ldr	r1, [r4, #8]
 8005da4:	2a24      	cmp	r2, #36	; 0x24
 8005da6:	6129      	str	r1, [r5, #16]
 8005da8:	68e1      	ldr	r1, [r4, #12]
 8005daa:	bf18      	it	ne
 8005dac:	f105 0218 	addne.w	r2, r5, #24
 8005db0:	6169      	str	r1, [r5, #20]
 8005db2:	bf09      	itett	eq
 8005db4:	6922      	ldreq	r2, [r4, #16]
 8005db6:	f104 0110 	addne.w	r1, r4, #16
 8005dba:	61aa      	streq	r2, [r5, #24]
 8005dbc:	6960      	ldreq	r0, [r4, #20]
 8005dbe:	bf02      	ittt	eq
 8005dc0:	f105 0220 	addeq.w	r2, r5, #32
 8005dc4:	f104 0118 	addeq.w	r1, r4, #24
 8005dc8:	61e8      	streq	r0, [r5, #28]
 8005dca:	e7d1      	b.n	8005d70 <_realloc_r+0x15c>
 8005dcc:	463a      	mov	r2, r7
 8005dce:	4621      	mov	r1, r4
 8005dd0:	e7ce      	b.n	8005d70 <_realloc_r+0x15c>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	f7ff ff02 	bl	8005be0 <memmove>
 8005ddc:	9b01      	ldr	r3, [sp, #4]
 8005dde:	e7cd      	b.n	8005d7c <_realloc_r+0x168>
 8005de0:	18c7      	adds	r7, r0, r3
 8005de2:	45b8      	cmp	r8, r7
 8005de4:	dc20      	bgt.n	8005e28 <_realloc_r+0x214>
 8005de6:	68cb      	ldr	r3, [r1, #12]
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	60d3      	str	r3, [r2, #12]
 8005dec:	609a      	str	r2, [r3, #8]
 8005dee:	4628      	mov	r0, r5
 8005df0:	68eb      	ldr	r3, [r5, #12]
 8005df2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005df6:	60d3      	str	r3, [r2, #12]
 8005df8:	609a      	str	r2, [r3, #8]
 8005dfa:	1f32      	subs	r2, r6, #4
 8005dfc:	2a24      	cmp	r2, #36	; 0x24
 8005dfe:	d843      	bhi.n	8005e88 <_realloc_r+0x274>
 8005e00:	2a13      	cmp	r2, #19
 8005e02:	d93f      	bls.n	8005e84 <_realloc_r+0x270>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	2a1b      	cmp	r2, #27
 8005e08:	60ab      	str	r3, [r5, #8]
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	60eb      	str	r3, [r5, #12]
 8005e0e:	d824      	bhi.n	8005e5a <_realloc_r+0x246>
 8005e10:	f105 0010 	add.w	r0, r5, #16
 8005e14:	f104 0308 	add.w	r3, r4, #8
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	6002      	str	r2, [r0, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	6042      	str	r2, [r0, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	6083      	str	r3, [r0, #8]
 8005e24:	46a9      	mov	r9, r5
 8005e26:	e756      	b.n	8005cd6 <_realloc_r+0xc2>
 8005e28:	4580      	cmp	r8, r0
 8005e2a:	4607      	mov	r7, r0
 8005e2c:	dddf      	ble.n	8005dee <_realloc_r+0x1da>
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4650      	mov	r0, sl
 8005e32:	f7fe fff3 	bl	8004e1c <_malloc_r>
 8005e36:	4607      	mov	r7, r0
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d0ae      	beq.n	8005d9a <_realloc_r+0x186>
 8005e3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005e40:	f1a0 0208 	sub.w	r2, r0, #8
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	444b      	add	r3, r9
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d120      	bne.n	8005e90 <_realloc_r+0x27c>
 8005e4e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005e52:	f027 0703 	bic.w	r7, r7, #3
 8005e56:	4437      	add	r7, r6
 8005e58:	e73d      	b.n	8005cd6 <_realloc_r+0xc2>
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	2a24      	cmp	r2, #36	; 0x24
 8005e5e:	612b      	str	r3, [r5, #16]
 8005e60:	68e3      	ldr	r3, [r4, #12]
 8005e62:	bf18      	it	ne
 8005e64:	f105 0018 	addne.w	r0, r5, #24
 8005e68:	616b      	str	r3, [r5, #20]
 8005e6a:	bf09      	itett	eq
 8005e6c:	6923      	ldreq	r3, [r4, #16]
 8005e6e:	f104 0310 	addne.w	r3, r4, #16
 8005e72:	61ab      	streq	r3, [r5, #24]
 8005e74:	6962      	ldreq	r2, [r4, #20]
 8005e76:	bf02      	ittt	eq
 8005e78:	f105 0020 	addeq.w	r0, r5, #32
 8005e7c:	f104 0318 	addeq.w	r3, r4, #24
 8005e80:	61ea      	streq	r2, [r5, #28]
 8005e82:	e7c9      	b.n	8005e18 <_realloc_r+0x204>
 8005e84:	4623      	mov	r3, r4
 8005e86:	e7c7      	b.n	8005e18 <_realloc_r+0x204>
 8005e88:	4621      	mov	r1, r4
 8005e8a:	f7ff fea9 	bl	8005be0 <memmove>
 8005e8e:	e7c9      	b.n	8005e24 <_realloc_r+0x210>
 8005e90:	1f32      	subs	r2, r6, #4
 8005e92:	2a24      	cmp	r2, #36	; 0x24
 8005e94:	d82e      	bhi.n	8005ef4 <_realloc_r+0x2e0>
 8005e96:	2a13      	cmp	r2, #19
 8005e98:	d929      	bls.n	8005eee <_realloc_r+0x2da>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	2a1b      	cmp	r2, #27
 8005e9e:	6003      	str	r3, [r0, #0]
 8005ea0:	6863      	ldr	r3, [r4, #4]
 8005ea2:	6043      	str	r3, [r0, #4]
 8005ea4:	d80e      	bhi.n	8005ec4 <_realloc_r+0x2b0>
 8005ea6:	f100 0308 	add.w	r3, r0, #8
 8005eaa:	f104 0208 	add.w	r2, r4, #8
 8005eae:	6811      	ldr	r1, [r2, #0]
 8005eb0:	6019      	str	r1, [r3, #0]
 8005eb2:	6851      	ldr	r1, [r2, #4]
 8005eb4:	6059      	str	r1, [r3, #4]
 8005eb6:	6892      	ldr	r2, [r2, #8]
 8005eb8:	609a      	str	r2, [r3, #8]
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	f7ff fdbf 	bl	8005a40 <_free_r>
 8005ec2:	e76a      	b.n	8005d9a <_realloc_r+0x186>
 8005ec4:	68a3      	ldr	r3, [r4, #8]
 8005ec6:	2a24      	cmp	r2, #36	; 0x24
 8005ec8:	6083      	str	r3, [r0, #8]
 8005eca:	68e3      	ldr	r3, [r4, #12]
 8005ecc:	bf18      	it	ne
 8005ece:	f104 0210 	addne.w	r2, r4, #16
 8005ed2:	60c3      	str	r3, [r0, #12]
 8005ed4:	bf09      	itett	eq
 8005ed6:	6923      	ldreq	r3, [r4, #16]
 8005ed8:	f100 0310 	addne.w	r3, r0, #16
 8005edc:	6103      	streq	r3, [r0, #16]
 8005ede:	6961      	ldreq	r1, [r4, #20]
 8005ee0:	bf02      	ittt	eq
 8005ee2:	f100 0318 	addeq.w	r3, r0, #24
 8005ee6:	f104 0218 	addeq.w	r2, r4, #24
 8005eea:	6141      	streq	r1, [r0, #20]
 8005eec:	e7df      	b.n	8005eae <_realloc_r+0x29a>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	e7dc      	b.n	8005eae <_realloc_r+0x29a>
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f7ff fe73 	bl	8005be0 <memmove>
 8005efa:	e7de      	b.n	8005eba <_realloc_r+0x2a6>
 8005efc:	4637      	mov	r7, r6
 8005efe:	e6ea      	b.n	8005cd6 <_realloc_r+0xc2>
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	431f      	orrs	r7, r3
 8005f06:	f8c9 7004 	str.w	r7, [r9, #4]
 8005f0a:	6853      	ldr	r3, [r2, #4]
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6053      	str	r3, [r2, #4]
 8005f12:	e6fc      	b.n	8005d0e <_realloc_r+0xfa>
 8005f14:	20000100 	.word	0x20000100

08005f18 <__ascii_wctomb>:
 8005f18:	b149      	cbz	r1, 8005f2e <__ascii_wctomb+0x16>
 8005f1a:	2aff      	cmp	r2, #255	; 0xff
 8005f1c:	bf8b      	itete	hi
 8005f1e:	238a      	movhi	r3, #138	; 0x8a
 8005f20:	700a      	strbls	r2, [r1, #0]
 8005f22:	6003      	strhi	r3, [r0, #0]
 8005f24:	2001      	movls	r0, #1
 8005f26:	bf88      	it	hi
 8005f28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f2c:	4770      	bx	lr
 8005f2e:	4608      	mov	r0, r1
 8005f30:	4770      	bx	lr
	...

08005f34 <_sbrk>:
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <_sbrk+0x14>)
 8005f36:	4602      	mov	r2, r0
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	b909      	cbnz	r1, 8005f40 <_sbrk+0xc>
 8005f3c:	4903      	ldr	r1, [pc, #12]	; (8005f4c <_sbrk+0x18>)
 8005f3e:	6019      	str	r1, [r3, #0]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	4402      	add	r2, r0
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	4770      	bx	lr
 8005f48:	20000ad4 	.word	0x20000ad4
 8005f4c:	20000b78 	.word	0x20000b78

08005f50 <_init>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr

08005f5c <_fini>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr
